# Geany's snippets configuration file
#
# use \n or %newline% for a new line (it will be replaced by the used EOL char(s) - LF, CR/LF, CR).
# use \t or %ws% for an indentation step, it will be replaced according to the current document's indent mode.
# use \s to force whitespace at beginning or end of a value ('key= value' won't work, use 'key=\svalue').
# use %key% for all keys defined in the [Special] section.
# use %cursor% to define where the cursor should be placed after completion. You can define multiple
#     %cursor% wildcards and use the "Move cursor in snippet" to jump to the next defined cursor
#     position in the completed snippet.
# You can define a section for each supported filetype to overwrite default settings, the section
# name must match exactly the internal filetype name, run 'geany --ft-names' for a full list.
#
# Additionally, you can use most of the template wildcards like {developer}, {command:...},
# or {date} in the snippets.
# See the documentation for details.

# For a list of available filetype names, execute:
# geany --ft-names

# Default is used for all filetypes and keys can be overwritten by [filetype] sections
[Default]

# special keys to be used in other snippets, cannot be used "standalone"
# can be used by %key%, e.g. %brace_open%
# nesting of special keys is not supported (e.g. brace_open=\n{\n%brace_close% won't work)
# key "wordchars" is very special, it defines the word delimiting characters when looking for
# a word to auto complete, leave commented to use the default wordchars
[Special]
#brace_open=\n {\n\t
#brace_close=}\n
#block=\n{\n\t%cursor%\n}
#block_cursor=\n{\n\t%cursor%\n}
#wordchars=_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789

# Optional keybindings to insert snippets
# Note: these can be overridden by Geany's configurable keybindings
[Keybindings]
#for=<Ctrl>7

[Java]
b={                                                                                //\n}
c=                                                                                 // a
da=P.debugVerilog("AAAA", T.at());
db=P.debugVerilog("BBBB", T.at());
dc=P.debugVerilog("CCCC", T.at());
dd=P.debugVerilog("DDDD", T.at());
de=P.debugVerilog("EEEE", T.at());
df=P.debugVerilog("FFFF", T.at());
dg=P.debugVerilog("GGGG", T.at());
dh=P.debugVerilog("HHHH", T.at());
di=P.debugVerilog("IIII", T.at());
dj=P.debugVerilog("JJJJ", T.at());
dk=P.debugVerilog("KKKK", T.at());
dl=P.debugVerilog("LLLL", T.at());
dm=P.debugVerilog("MMMM", T.at());
dn=P.debugVerilog("NNNN", T.at());
do=P.debugVerilog("OOOO", T.at());
dp=P.debugVerilog("PPPP", T.at());
dq=P.debugVerilog("QQQQ", T.at());
dr=P.debugVerilog("RRRR", T.at());
ds=P.debugVerilog("SSSS", T.at());
dt=P.debugVerilog("TTTT", T.at());
du=P.debugVerilog("UUUU", T.at());
dv=P.debugVerilog("VVVV", T.at());
dw=P.debugVerilog("WWWW", T.at());
dx=P.debugVerilog("XXXX", T.at());
dy=P.debugVerilog("YYYY", T.at());
dz=P.debugVerilog("ZZZZ", T.at());
i=if (%cursor%)%block_cursor%\nelse%block_cursor%
f=final int N = 8;\nfor (int i = 0; i < N; i++)%brace_open%\n%brace_close%
fi=final\s
g=.getInt()
m=m.new
n=String n() {return "";}
p=P.new I() {void a() { }};
pa=P.new I() {void a() {say("AAAA");}};
pb=P.new I() {void a() {say("BBBB");}};
pc=P.new I() {void a() {say("CCCC");}};
pd=P.new I() {void a() {say("DDDD");}};
pe=P.new I() {void a() {say("EEEE");}};
pf=P.new I() {void a() {say("FFFF");}};
pg=P.new I() {void a() {say("GGGG");}};
ph=P.new I() {void a() {say("HHHH");}};
pi=P.new I() {void a() {say("IIII");}};
pj=P.new I() {void a() {say("JJJJ");}};
pk=P.new I() {void a() {say("KKKK");}};
pl=P.new I() {void a() {say("LLLL");}};
pm=P.new I() {void a() {say("MMMM");}};
pn=P.new I() {void a() {say("NNNN");}};
po=P.new I() {void a() {say("OOOO");}};
pp=P.new I() {void a() {say("PPPP");}};
pq=P.new I() {void a() {say("QQQQ");}};
pr=P.new I() {void a() {say("RRRR");}};
ps=P.new I() {void a() {say("SSSS");}};
pt=P.new I() {void a() {say("TTTT");}};
pu=P.new I() {void a() {say("UUUU");}};
pv=P.new I() {void a() {say("VVVV");}};
pw=P.new I() {void a() {say("WWWW");}};
px=P.new I() {void a() {say("XXXX");}};
py=P.new I() {void a() {say("YYYY");}};
pz=P.new I() {void a() {say("ZZZZ");}};
pps=P.parallelStart();
ppa=P.parallelSection();
ppe=P.parallelEnd();
r=s.P.run(); s.P.clear();
t=try {s.P.run();} catch(RuntimeException e) {} finally {s.P.clear();}

s=final StringBuilder s = new StringBuilder();                                    // a
sa=say("AAAA", a);
sb=say("BBBB", b);
sc=say("CCCC", c);
sd=say("DDDD", d);
se=say("EEEE", e);
sf=say("FFFF", f);
sg=say("GGGG", g);
sh=say("HHHH", h);
si=say("IIII", i);
sj=say("JJJJ", j);
sk=say("KKKK", k);
sl=say("LLLL", l);
sm=say("MMMM", m);
sn=say("NNNN", n);
so=say("OOOO", o);
sp=say("PPPP", p);
sq=say("QQQQ", q);
sr=say("RRRR", r);
ss=say("SSSS", s);
st=say("TTTT", t);
su=say("UUUU", u);
sv=say("VVVV", v);
sw=say("WWWW", w);
sx=say("XXXX", x);
sy=say("YYYY", y);
sz=say("ZZZZ", z);
ssa=new Say() {void action() {say("AAAA", a);}};
ssb=new Say() {void action() {say("BBBB", b);}};
ssc=new Say() {void action() {say("CCCC", c);}};
ssd=new Say() {void action() {say("DDDD", d);}};
sse=new Say() {void action() {say("EEEE", e);}};
ssf=new Say() {void action() {say("FFFF", f);}};
ssg=new Say() {void action() {say("GGGG", g);}};
ssh=new Say() {void action() {say("HHHH", h);}};
ssi=new Say() {void action() {say("IIII", i);}};
ssj=new Say() {void action() {say("JJJJ", j);}};
ssk=new Say() {void action() {say("KKKK", k);}};
ssl=new Say() {void action() {say("LLLL", l);}};
ssm=new Say() {void action() {say("MMMM", m);}};
ssn=new Say() {void action() {say("NNNN", n);}};
sso=new Say() {void action() {say("OOOO", o);}};
ssp=new Say() {void action() {say("PPPP", p);}};
ssq=new Say() {void action() {say("QQQQ", q);}};
ssr=new Say() {void action() {say("RRRR", r);}};
sss=new Say() {void action() {say("SSSS", s);}};
sst=new Say() {void action() {say("TTTT", t);}};
ssu=new Say() {void action() {say("UUUU", u);}};
ssv=new Say() {void action() {say("VVVV", v);}};
ssw=new Say() {void action() {say("WWWW", w);}};
ssx=new Say() {void action() {say("XXXX", x);}};
ssy=new Say() {void action() {say("YYYY", y);}};
ssz=new Say() {void action() {say("ZZZZ", z);}};
#t=t.ok("""\n""");
ts=public String toString()\n\s{final StringBuilder s = new StringBuilder();\n\s}

switch=switch (%cursor%)%brace_open%case %cursor%:\n\t\t%cursor%\n\t\tbreak;\n\tdefault:\n\t\t%cursor%\n%brace_close%
try=try%block%\ncatch (%cursor%)%block_cursor%

v=String v() {return "AAAA";}
x=private\s
z=zz();\n\s


[Perl]
b={\n}
j=join "\\n", @files;
m==~ m(%cursor%)is;
M=!~ m(%cursor%)is;
s=sub xxx()                                                                     #\n\s{my ($a, $b) = @_;\n\s}
r==~ s(%cursor%) ()igs;
R=!~ s(%cursor%) ()igs;
sa=say STDERR "AAAA $a";
sb=say STDERR "BBBB $b";
sc=say STDERR "CCCC $c";
sd=say STDERR "DDDD $d";
se=say STDERR "EEEE $e";
sf=say STDERR "FFFF $f";
sg=say STDERR "GGGG $g";
sh=say STDERR "HHHH $h";
si=say STDERR "IIII $i";
sj=say STDERR "JJJJ $j";
sk=say STDERR "KKKK $k";
sl=say STDERR "LLLL $l";
sm=say STDERR "MMMM $m";
sn=say STDERR "NNNN $n";
so=say STDERR "OOOO $o";
sp=say STDERR "PPPP $p";
sq=say STDERR "QQQQ $q";
sr=say STDERR "RRRR $r";
ss=say STDERR "SSSS $s";
st=say STDERR "TTTT $t";
su=say STDERR "UUUU $u";
sv=say STDERR "VVVV $v";
sw=say STDERR "WWWW $w";
sx=say STDERR "XXXX $x";
sy=say STDERR "YYYY $y";
sz=say STDERR "ZZZZ $z";
start=#!/usr/bin/perl -I/home/phil/perl/cpan/DataTableText/lib/\n#-------------------------------------------------------------------------------\n# XXX\n# Philip R Brenan at gmail dot com, Appa Apps Ltd Inc., 2024\n#-------------------------------------------------------------------------------\nuse v5.38;\nuse warnings FATAL => qw(all);\nuse strict;\nuse Carp;\nuse Data::Dump qw(dump);\nuse Data::Table::Text qw(:all);\n
#for=for (i = 0; i < %cursor%; i++)%block_cursor%
#while=while (%cursor%)%block_cursor%
#do=do\n{\n\t%cursor%\n} while (%cursor%)\n
#switch=switch (%cursor%)%brace_open%case %cursor%:\n\t\t%cursor%\n\t\tbreak;\n\tdefault:\n\t\t%cursor%\n%brace_close%

[C]
#if=if (%cursor%)%block_cursor%
#else=else%block_cursor%
#for=for (i = 0; i < %cursor%; i++)%block_cursor%
#while=while (%cursor%)%block_cursor%
#do=do\n{\n\t%cursor%\n} while (%cursor%)\n
#switch=switch (%cursor%)%brace_open%case %cursor%:\n\t\t%cursor%\n\t\tbreak;\n\tdefault:\n\t\t%cursor%\n%brace_close%

[C++]
#if=if (%cursor%)%block_cursor%
#else=else%block_cursor%
#for=for (int i = 0; i < %cursor%; i++)%brace_open%\n%brace_close%
#while=while (%cursor%)%block_cursor%
#do=do\n{\n\t%cursor%\n} while (%cursor%)\n
#switch=switch (%cursor%)%brace_open%case %cursor%:\n\t\t%cursor%\n\t\tbreak;\n\tdefault:\n\t\t%cursor%\n%brace_close%
#try=try%block%\ncatch (%cursor%)%block_cursor%

[PHP]
#if=if (%cursor%)%block_cursor%
#else=else%block_cursor%
#for=for ($i = 0; $i < %cursor%; $i++)%brace_open%\n%brace_close%
#while=while (%cursor%)%block_cursor%
#do=do\n{\n\t%cursor%\n} while (%cursor%)\n
#switch=switch (%cursor%)%brace_open%case %cursor%:\n\t\t%cursor%\n\t\tbreak;\n\tdefault:\n\t\t%cursor%\n%brace_close%
#try=try%block%\ncatch (%cursor%)%block_cursor%

[Javascript]
#if=if (%cursor%)%block_cursor%
#else=else%block_cursor%
#for=for (i = 0; i < %cursor%; i++)%block_cursor%
#while=while (%cursor%)%block_cursor%
#do=do\n{\n\t%cursor%\n} while (%cursor%)\n
#switch=switch (%cursor%)%brace_open%case %cursor%:\n\t\t%cursor%\n\t\tbreak;\n\tdefault:\n\t\t%cursor%\n%brace_close%
#try=try%block%\ncatch (%cursor%)%block_cursor%

[C#]
#if=if (%cursor%)%block_cursor%
#else=else%block_cursor%
#for=for (i = 0; i < %cursor%; i++)%block_cursor%
#while=while (%cursor%)%block_cursor%
#do=do\n{\n\t%cursor%\n} while (%cursor%)\n
#switch=switch (%cursor%)%brace_open%case %cursor%:\n\t\t%cursor%\n\t\tbreak;\n\tdefault:\n\t\t%cursor%\n%brace_close%
#try=try%block%\ncatch (%cursor%)%block_cursor%

[Vala]
#if=if (%cursor%)%block_cursor%
#else=else%block_cursor%
#for=for (i = 0; i < %cursor%; i++)%block_cursor%
#while=while (%cursor%)%block_cursor%
#do=do\n{\n\t%cursor%\n} while (%cursor%)\n
#switch=switch (%cursor%)%brace_open%case %cursor%:\n\t\t%cursor%\n\t\tbreak;\n\tdefault:\n\t\t%cursor%\n%brace_close%
#try=try%block%\ncatch (%cursor%)%block_cursor%

[ActionScript]
#if=if (%cursor%)%block_cursor%
#else=else%block_cursor%
#for=for (i = 0; i < %cursor%; i++)%block_cursor%
#while=while (%cursor%)%block_cursor%
#do=do\n{\n\t%cursor%\n} while (%cursor%)\n
#switch=switch (%cursor%)%brace_open%case %cursor%:\n\t\t%cursor%\n\t\tbreak;\n\tdefault:\n\t\t%cursor%\n%brace_close%
#try=try%block%\ncatch (%cursor%)%block_cursor%

[Python]
start=def thing    (): return type('', (), {})\ndef printAll(o): print({k: v for k, v in vars(o).items() if not k.startswith('__')})\nf = thing()
c=class %cursor%:\n\t""" Class doc """\n\t\n\tdef __init__ (self):\n\t\t""" Class initialiser """\n\t\tpass
d=def %cursor% (%cursor%):\n\t""" Function doc """\n\t
f=for i in xrange(%cursor%):\n\t
sa=print("AAAA"+a)
sb=print("BBBB"+b)
sc=print("CCCC"+c)
sd=print("DDDD"+d)

if=if %cursor%:\n\t
elif=elif %cursor%:\n\t
else=else:\n\t
while=while %cursor%:\n\t
try=try:\n\t%cursor%\nexcept Exception, ex:\n\t
with=with %cursor%:\n\t

[HTML]
start=<!DOCTYPE html>\n<html lang="en">\n<head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>$1</title>\n</head>\n<body>\n\n</body>\n</html>\n
a=<a href="https://prb.appaapps.com/">%cursor%</a>
b=<b>%cursor%</b>
i=<img src="https://prb.appaapps.com/%cursor%"/>
h1=<h1 id="xxx">%cursor%</h1>
h2=<h2 id="xxx">%cursor%</h2>
h3=<h3 id="xxx">%cursor%</h3>
h4=<h4 id="xxx">%cursor%</h4>
h5=<h5 id="xxx">%cursor%</h5>
h6=<h6 id="xxx">%cursor%</h6>
p=<p>%cursor%</p>
o=<ol>\n    <li>%cursor%</li>\n    <li>%cursor%</li>\n    <li>%cursor%</li>\n</ol>\n
u=<ul>\n    <li>%cursor%</li>\n    <li>%cursor%</li>\n    <li>%cursor%</li>\n</ul>\n
d=<div class="xxx">\n    %cursor%\n</div>\n
s=<span class="%cursor%">%cursor%</span>
t=<table>\n    <caption>Your Table Caption</caption>\n    <thead>\n        <tr>\n            <th>Header 1</th>\n            <th>Header 2</th>\n            <th>Header 3</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>Row 1, Cell 1</td>\n            <td>Row 1, Cell 2</td>\n            <td>Row 1, Cell 3</td>\n        </tr>\n        <tr>\n            <td>Row 2, Cell 1</td>\n            <td>Row 2, Cell 2</td>\n            <td>Row 2, Cell 3</td>\n        </tr>\n        <tr>\n            <td>Row 3, Cell 1</td>\n            <td>Row 3, Cell 2</td>\n            <td>Row 3, Cell 3</td>\n        </tr>\n    </tbody>\n    <tfoot>\n        <tr>\n            <td>Footer 1</td>\n            <td>Footer 2</td>\n            <td>Footer 3</td>\n        </tr>\n    </tfoot>\n</table>\n
