//------------------------------------------------------------------------------
// Java RiscV assembler representation of the btree algorithm in c via gcc
// Philip R Brenan at gmail dot com, Appa Apps Ltd. Inc., 2025
//------------------------------------------------------------------------------
package com.AppaApps.Silicon;                                                   // Design, layout and simulate a btree in a block on the surface of a silicon chip.

import java.util.*;

class RiscV extends Test                                                        // Execute the RiscV assembler version of the btree algorithm
 {boolean traceCalls = false;                                                   // Trace subroutine calls if true
  final int x0  =  0, zero = 0;
  final int x1  =  1, ra  =  1;
  final int x2  =  2, sp  =  2;
//final int x3  =  3, gp  =  3;
//final int x4  =  4, tp  =  4;
//final int x5  =  5, t0  =  5;
//final int x6  =  6, t1  =  6;
//final int x7  =  7, t2  =  7;
  final int x8  =  8, s0  =  8;
  final int x9  =  9, s1  =  9;
  final int x10 = 10, a0  = 10;
  final int x11 = 11, a1  = 11;
  final int x12 = 12, a2  = 12;
  final int x13 = 13, a3  = 13;
  final int x14 = 14, a4  = 14;
  final int x15 = 15, a5  = 15;
  final int x16 = 16, a6  = 16;
  final int x17 = 17, a7  = 17;
//final int x18 = 18, s2  = 18;
//final int x19 = 19, s3  = 19;
//final int x20 = 20, s4  = 20;
//final int x21 = 21, s5  = 21;
//final int x22 = 22, s6  = 22;
//final int x23 = 23, s7  = 23;
//final int x24 = 24, s8  = 24;
//final int x25 = 25, s9  = 25;
//final int x26 = 26, s10 = 26;
//final int x27 = 27, s11 = 27;
//final int x28 = 28, t3  = 28;
//final int x29 = 29, t4  = 29;
//final int x30 = 30, t5  = 30;
//final int x31 = 31, t6  = 31;

  final int    [] R = new int [32];                                             // Registers
  final int    [] M = new int [powerTwo(20)];                                   // Memory: each location represents one byte. The locations are presensted as integers because java has no unsigned byte
  final ProgramDM P = new ProgramDM()                                           // Program
   {void traceInstruction(ProgramDM.I i)                                        // Dump registers
     {if (!debug) return;
      final StringBuilder s = new StringBuilder();
      s.append(String.format(" %6d  %6d  %-8s ", step, steps, i.v()));

      s.append(String.format(" %8d=ra", R[ra]));
      s.append(String.format(" %8d=sp", R[sp]));
    //s.append(String.format(" %8d=gp", R[gp]));
    //s.append(String.format(" %8d=tp", R[tp]));
    //s.append(String.format(" %8d=t0", R[t0]));
    //s.append(String.format(" %8d=t1", R[t1]));
    //s.append(String.format(" %8d=t2", R[t2]));
      s.append(String.format(" %8d=s0", R[s0]));
      s.append(String.format(" %8d=s1", R[s1]));
      s.append(String.format(" %8d=a0", R[a0]));
      s.append(String.format(" %8d=a1", R[a1]));
      s.append(String.format(" %8d=a2", R[a2]));
      s.append(String.format(" %8d=a3", R[a3]));
      s.append(String.format(" %8d=a4", R[a4]));
      s.append(String.format(" %8d=a5", R[a5]));
      s.append(String.format(" %8d=a6", R[a6]));
      s.append(String.format(" %8d=a7", R[a7]));
    //s.append(String.format(" %8d=s2", R[s2]));
    //s.append(String.format(" %8d=s3", R[s3]));
    //s.append(String.format(" %8d=s4", R[s4]));
    //s.append(String.format(" %8d=s5", R[s5]));
    //s.append(String.format(" %8d=s6", R[s6]));
    //s.append(String.format(" %8d=s7", R[s7]));
    //s.append(String.format(" %8d=s8", R[s8]));
    //s.append(String.format(" %8d=s9", R[s9]));
    //s.append(String.format(" %8d=s10",R[s10]));
    //s.append(String.format(" %8d=s11",R[s11]));
    //s.append(String.format(" %8d=t3", R[t3]));
    //s.append(String.format(" %8d=t4", R[t4]));
    //s.append(String.format(" %8d=t5", R[t5]));
    //s.append(String.format(" %8d=t6", R[t6]));
      say(""+s);
     }
   };
  int callDepth = 0;                                                            // Current call depth
  final int  bs = 8;                                                            // Number of bits in a byte
  final int ubs = 0xFFF;                                                        // Upper bits

  int getB(int i) {return M[i] & 0xFF;}

  int getW(int i)
   {long a   = M[i], b   = M[i+1], c   = M[i+2], d   = M[i+3];
         a &= 0xFF;  b  &= 0xFF;   c  &= 0xFF;   d  &= 0xFF;
                     b <<= (1*bs); c <<= (2*bs); d <<= (3*bs);
    final long s = a | b | c | d;
    return (int)s;
   }

  int getD(int i) {return getW(i);}

  void setB(int i, int v) {M[i] = v;}

  void setW(int i, int v)
   {int a  = v >> (0*bs), b  = v >> (1*bs), c  = v >> (2*bs), d  = v >> (3*bs);
        a &= 0xFF;        b &= 0xFF;        c &= 0xFF;        d &= 0xFF;
    setB(i+0, a); setB(i+1, b); setB(i+2, c); setB(i+3, d);
   }

  void setD(int i,int v)
   {setW(i, v);
    final int s = v < 0 ? -1 : 0;                                               // Sign
    setB(i+4, s); setB(i+5, s); setB(i+6, s); setB(i+7, s);                     // Java only has signed types and weird >> and << operators so this is the best we can do while using ints
   }

  void add  (int t, int s1,     int     s2)                             {P.new I() {String v() {return "add"  ;} void a() {R[t] = R[s1] + R[s2];                         }};}
  void addi (int t, int s1,     int     s2)                             {P.new I() {String v() {return "addi" ;} void a() {R[t] = R[s1] +   s2;                          }};}
  void addi (int t, int s1,     boolean lo, ProgramDM.Label s2)         {P.new I() {String v() {return "addi" ;} void a() {                                              }};}
  void addi (int t, int s1,     boolean lo, int             s2)         {P.new I() {String v() {return "addi" ;} void a() {                                              }};}
  void addw (int t, int s1,     int     s2)                             {P.new I() {String v() {return "addw" ;} void a() {R[t] = R[s1] + R[s2];                         }};}
  void addiw(int t, int s1,     int     s2)                             {P.new I() {String v() {return "addiw";} void a() {R[t] = R[s1] +   s2;                          }};}

  void and  (int t, int s1,     int     s2)                             {P.new I() {String v() {return "and"  ;} void a() {R[t] = R[s1] & R[s2];                         }};}
  void andi (int t, int s1,     int     s2)                             {P.new I() {String v() {return "andi" ;} void a() {R[t] = R[s1] &   s2;                          }};}

  void bleu (int t, int s1,     ProgramDM.Label s2)                     {P.new I() {String v() {return "bleu" ;} void a() {if (R[t] <= R[s1]) P.step = s2.get1();        }};}
  void bltu (int t, int s1,     ProgramDM.Label s2)                     {P.new I() {String v() {return "bltu" ;} void a() {if (R[t] <  R[s1]) P.step = s2.get1();        }};}
  void bgtu (int t, int s1,     ProgramDM.Label s2)                     {P.new I() {String v() {return "bgtu" ;} void a() {if (R[t] >  R[s1]) P.step = s2.get1();        }};}
  void beq  (int t, int s1,     ProgramDM.Label s2)                     {P.new I() {String v() {return "beq"  ;} void a() {if (R[t] == R[s1]) P.step = s2.get1();        }};}
  void bge  (int t, int s1,     ProgramDM.Label s2)                     {P.new I() {String v() {return "bge"  ;} void a() {if (R[t] >= R[s1]) P.step = s2.get1();        }};}
  void bgt  (int t, int s1,     ProgramDM.Label s2)                     {P.new I() {String v() {return "bgt"  ;} void a() {if (R[t] >  R[s1]) P.step = s2.get1();        }};}
  void ble  (int t, int s1,     ProgramDM.Label s2)                     {P.new I() {String v() {return "ble"  ;} void a() {if (R[t] <= R[s1]) P.step = s2.get1();        }};}
  void blt  (int t, int s1,     ProgramDM.Label s2)                     {P.new I() {String v() {return "blt"  ;} void a() {if (R[t] <  R[s1]) P.step = s2.get1();        }};}
  void bne  (int t, int s1,     ProgramDM.Label s2)                     {P.new I() {String v() {return "bne"  ;} void a() {if (R[t] != R[s1]) P.step = s2.get1();        }};}

  void call (ProgramDM.Label t)                                         {P.new I() {String v() {return "call" ;} void a() {R[ra] = P.step+1; P.step = t.get1(); ++callDepth; if (traceCalls) say(""  .repeat(callDepth),   callDepth, t.name);}};}
  void j    (ProgramDM.Label t)                                         {P.new I() {String v() {return "j"    ;} void a() {P.step = t.get1();}};}
  void jr   (int t)                                                     {P.new I() {String v() {return "jr"   ;} void a() {P.step = R[t]-1;                     --callDepth; if (traceCalls) say(""  .repeat(callDepth+1), callDepth," return", R[t]);}};}

  void lb   (int t, int     s1, int     s2)                             {P.new I() {String v() {return "lb"   ;} void a() {R[t] =  getB(s1 + R[s2]);       }};}
  void lbu  (int t, int     s1, int     s2)                             {P.new I() {String v() {return "lbu"  ;} void a() {R[t] =  getB(s1 + R[s2]);       }};}
  void ld   (int t, int     s1, int     s2)                             {P.new I() {String v() {return "ld"   ;} void a() {R[t] =  getD(R[s1] + s2);       }};}

  void li   (int t, int     s1)                                         {P.new I() {String v() {return "li"   ;} void a() {R[t] =  s1;                     }};}
  void lw   (int t, int     s1, int s2)                                 {P.new I() {String v() {return "lw"   ;} void a() {R[t] =  getW( s1 + R[s2]);      }};}
  void lui  (int t, boolean hi, ProgramDM.Label s2)                     {P.new I() {String v() {return "lui"  ;} void a() {R[t] =  s2.get();               }};}
  void lui  (int t, boolean hi, int             s2)                     {P.new I() {String v() {return "lui"  ;} void a() {R[t] =  s2;                     }};}
  void mul  (int t, int s1,     int     s2)                             {P.new I() {String v() {return "mul"  ;} void a() {R[t] =  R[s1] * R[s2];          }};}
  void mulw (int t, int s1,     int     s2)                             {P.new I() {String v() {return "mulw" ;} void a() {R[t] =  R[s1] * R[s2];          }};}
  void mv   (int t, int s1)                                             {P.new I() {String v() {return "mv"   ;} void a() {R[t] =  R[s1];                  }};}
  void neg  (int t, int s1)                                             {P.new I() {String v() {return "neg"  ;} void a() {R[t] = -R[s1];                  }};}
  void nop  ()                                                          {P.new I() {String v() {return "nop"  ;} void a() {}};}
  void or   (int t, int s1,     int     s2)                             {P.new I() {String v() {return "or"   ;} void a() {R[t] =  R[s1] | R[s2];          }};}
  void ori  (int t, int s1,     int     s2)                             {P.new I() {String v() {return "ori"  ;} void a() {R[t] =  R[s1] |   s2;           }};}
  void ret  ()                                                          {P.new I() {String v() {return "ret"  ;} void a() {P.step = R[ra];                 }};}

  void sb   (int t, int s1,     int     s2)                             {P.new I() {String v() {return "sb"   ;} void a() {setB(s1 + R[s2], R[t]);         }};}
  void sbu  (int t, int s1,     int     s2)                             {P.new I() {String v() {return "sbu"  ;} void a() {setB(s1 + R[s2], R[t]);         }};}
  void sd   (int t, int s1,     int     s2)                             {P.new I() {String v() {return "sd"   ;} void a() {setD(s1 + R[s2], R[t]);         }};}
  void seqz (int t, int s1)                                             {P.new I() {String v() {return "seqz" ;} void a() {R[t] =    R[s1] == 0   ? 1 : 0; }};}
  void sextw(int t, int s1) /* fix sign extend */                       {P.new I() {String v() {return "sextw";} void a() {R[t] =    R[s1];                }};}
  void sgt  (int t, int s1,     int     s2)                             {P.new I() {String v() {return "sgt"  ;} void a() {R[t] =    R[s1] >   s2 ? 1 : 0; }};}
  void slli (int t, int s1,     int     s2)                             {P.new I() {String v() {return "slli" ;} void a() {R[t] =    R[s1] <<  s2;         }};}
  void srli (int t, int s1,     int     s2)                             {P.new I() {String v() {return "srli" ;} void a() {R[t] =    R[s1] >>  s2;         }};}
  void srliw(int t, int s1,     int     s2)                             {P.new I() {String v() {return "srliw";} void a() {R[t] =    R[s1] + R[s2];        }};}
  void sraiw(int t, int s1,     int     s2)                             {P.new I() {String v() {return "sraiw";} void a() {R[t] =    R[s1] + R[s2];        }};}
  void sub  (int t, int s1,     int     s2)                             {P.new I() {String v() {return "sub"  ;} void a() {R[t] =    R[s1] + R[s2];        }};}
  void subw (int t, int s1,     int     s2)                             {P.new I() {String v() {return "subw" ;} void a() {R[t] =    R[s1] + R[s2];        }};}
  void sw   (int t, int s1,     int     s2)                             {P.new I() {String v() {return "sw"   ;} void a() {setW(s1+R[s2], R[t]);           }};}
  void tail (ProgramDM.Label t)                                         {P.new I() {String v() {return "tail" ;} void a() {}};}

  RiscV()
   {R[sp] = M.length;                                                           // Set the stack pointer
    for (int i = 0; i < R.length; i++) R[i] = 0;
    for (int i = 0; i < M.length; i++) M[i] = 0;
   }

  void initializeMemoryAndRegisters()                                           // Initialize memory and registers
   {for (int i = 0; i < R.length; i++) R[i] = 0;
    for (int i = 0; i < M.length; i++) M[i] = 0;
   }

//D0 Tests                                                                      // Testing

// Generated by Classify instructions

  void test_btree()                                                             // RiscV code for btree algorithm
   {test_btree1();
    test_btree2();
    initializeMemoryAndRegisters();
    R[ra] = -1;                                                                 // A return to this address shows that the program has finished
    R[sp] = M.length-64;                                                        // Stack pointer needs some space above it
    P.maxSteps = 99999;
    P.start = $create.get();                                                    // Create an empty tree
    //P.debug = true;
    //traceCalls = true;
    P.run();
    ok(P.steps, 53422);

    R[ra] = -1;                                                                 // A return to this address shows that the program has finished
    R[a0] =  1;                                                                 // Key
    R[a1] =  1;                                                                 // Data
    P.start = $put.get();
    P.debug = true;
    traceCalls = true;
    P.run();
   }
  ProgramDM.Label $branch_size = P.new Label("branch_size");
  ProgramDM.Label $LFB6 = P.new Label("LFB6");
  ProgramDM.Label $LFE6 = P.new Label("LFE6");
  ProgramDM.Label $branch_size1 = P.new Label("branch_size1");
  ProgramDM.Label $LFB7 = P.new Label("LFB7");
  ProgramDM.Label $LFE7 = P.new Label("LFE7");
  ProgramDM.Label $branch_isFull = P.new Label("branch_isFull");
  ProgramDM.Label $LFB8 = P.new Label("LFB8");
  ProgramDM.Label $LFE8 = P.new Label("LFE8");
  ProgramDM.Label $branch_isEmpty = P.new Label("branch_isEmpty");
  ProgramDM.Label $LFB9 = P.new Label("LFB9");
  ProgramDM.Label $LFE9 = P.new Label("LFE9");
  ProgramDM.Label $branch_key = P.new Label("branch_key");
  ProgramDM.Label $LFB10 = P.new Label("LFB10");
  ProgramDM.Label $LFE10 = P.new Label("LFE10");
  ProgramDM.Label $branch_data = P.new Label("branch_data");
  ProgramDM.Label $LFB11 = P.new Label("LFB11");
  ProgramDM.Label $LFE11 = P.new Label("LFE11");
  ProgramDM.Label $branch_setKey = P.new Label("branch_setKey");
  ProgramDM.Label $LFB12 = P.new Label("LFB12");
  ProgramDM.Label $LFE12 = P.new Label("LFE12");
  ProgramDM.Label $branch_setData = P.new Label("branch_setData");
  ProgramDM.Label $LFB13 = P.new Label("LFB13");
  ProgramDM.Label $LFE13 = P.new Label("LFE13");
  ProgramDM.Label $branch_copyKey = P.new Label("branch_copyKey");
  ProgramDM.Label $LFB14 = P.new Label("LFB14");
  ProgramDM.Label $LFE14 = P.new Label("LFE14");
  ProgramDM.Label $branch_copyData = P.new Label("branch_copyData");
  ProgramDM.Label $LFB15 = P.new Label("LFB15");
  ProgramDM.Label $LFE15 = P.new Label("LFE15");
  ProgramDM.Label $branch_setKeyData = P.new Label("branch_setKeyData");
  ProgramDM.Label $LFB16 = P.new Label("LFB16");
  ProgramDM.Label $LFE16 = P.new Label("LFE16");
  ProgramDM.Label $branch_copyKeyData = P.new Label("branch_copyKeyData");
  ProgramDM.Label $LFB17 = P.new Label("LFB17");
  ProgramDM.Label $LFE17 = P.new Label("LFE17");
  ProgramDM.Label $branch_inc = P.new Label("branch_inc");
  ProgramDM.Label $LFB18 = P.new Label("LFB18");
  ProgramDM.Label $LFE18 = P.new Label("LFE18");
  ProgramDM.Label $branch_dec = P.new Label("branch_dec");
  ProgramDM.Label $LFB19 = P.new Label("LFB19");
  ProgramDM.Label $LFE19 = P.new Label("LFE19");
  ProgramDM.Label $branch_clear = P.new Label("branch_clear");
  ProgramDM.Label $LFB20 = P.new Label("LFB20");
  ProgramDM.Label $LFE20 = P.new Label("LFE20");
  ProgramDM.Label $branch_push = P.new Label("branch_push");
  ProgramDM.Label $LFB21 = P.new Label("LFB21");
  ProgramDM.Label $LFE21 = P.new Label("LFE21");
  ProgramDM.Label $branch_unshift = P.new Label("branch_unshift");
  ProgramDM.Label $LFB22 = P.new Label("LFB22");
  ProgramDM.Label $L25 = P.new Label("L25");
  ProgramDM.Label $L24 = P.new Label("L24");
  ProgramDM.Label $LFE22 = P.new Label("LFE22");
  ProgramDM.Label $branch_result = P.new Label("branch_result");
  ProgramDM.Label $LFB23 = P.new Label("LFB23");
  ProgramDM.Label $LFE23 = P.new Label("LFE23");
  ProgramDM.Label $branch_pop = P.new Label("branch_pop");
  ProgramDM.Label $LFB24 = P.new Label("LFB24");
  ProgramDM.Label $L30 = P.new Label("L30");
  ProgramDM.Label $LFE24 = P.new Label("LFE24");
  ProgramDM.Label $branch_shift = P.new Label("branch_shift");
  ProgramDM.Label $LFB25 = P.new Label("LFB25");
  ProgramDM.Label $L33 = P.new Label("L33");
  ProgramDM.Label $L32 = P.new Label("L32");
  ProgramDM.Label $L35 = P.new Label("L35");
  ProgramDM.Label $LFE25 = P.new Label("LFE25");
  ProgramDM.Label $branch_elementAt = P.new Label("branch_elementAt");
  ProgramDM.Label $LFB26 = P.new Label("LFB26");
  ProgramDM.Label $L38 = P.new Label("L38");
  ProgramDM.Label $LFE26 = P.new Label("LFE26");
  ProgramDM.Label $branch_setElementAt = P.new Label("branch_setElementAt");
  ProgramDM.Label $LFB27 = P.new Label("LFB27");
  ProgramDM.Label $L40 = P.new Label("L40");
  ProgramDM.Label $L42 = P.new Label("L42");
  ProgramDM.Label $LFE27 = P.new Label("LFE27");
  ProgramDM.Label $branch_insertElementAt = P.new Label("branch_insertElementAt");
  ProgramDM.Label $LFB28 = P.new Label("LFB28");
  ProgramDM.Label $L45 = P.new Label("L45");
  ProgramDM.Label $L44 = P.new Label("L44");
  ProgramDM.Label $LFE28 = P.new Label("LFE28");
  ProgramDM.Label $branch_removeElementAt = P.new Label("branch_removeElementAt");
  ProgramDM.Label $LFB29 = P.new Label("LFB29");
  ProgramDM.Label $L48 = P.new Label("L48");
  ProgramDM.Label $L47 = P.new Label("L47");
  ProgramDM.Label $L50 = P.new Label("L50");
  ProgramDM.Label $LFE29 = P.new Label("LFE29");
  ProgramDM.Label $branch_firstElement = P.new Label("branch_firstElement");
  ProgramDM.Label $LFB30 = P.new Label("LFB30");
  ProgramDM.Label $L52 = P.new Label("L52");
  ProgramDM.Label $L54 = P.new Label("L54");
  ProgramDM.Label $LFE30 = P.new Label("LFE30");
  ProgramDM.Label $branch_lastElement = P.new Label("branch_lastElement");
  ProgramDM.Label $LFB31 = P.new Label("LFB31");
  ProgramDM.Label $L56 = P.new Label("L56");
  ProgramDM.Label $L58 = P.new Label("L58");
  ProgramDM.Label $LFE31 = P.new Label("LFE31");
  ProgramDM.Label $branch_search = P.new Label("branch_search");
  ProgramDM.Label $LFB32 = P.new Label("LFB32");
  ProgramDM.Label $L63 = P.new Label("L63");
  ProgramDM.Label $L61 = P.new Label("L61");
  ProgramDM.Label $L60 = P.new Label("L60");
  ProgramDM.Label $L64 = P.new Label("L64");
  ProgramDM.Label $L65 = P.new Label("L65");
  ProgramDM.Label $LFE32 = P.new Label("LFE32");
  ProgramDM.Label $branch_searchFirstGreaterThanOrEqual = P.new Label("branch_searchFirstGreaterThanOrEqual");
  ProgramDM.Label $LFB33 = P.new Label("LFB33");
  ProgramDM.Label $L70 = P.new Label("L70");
  ProgramDM.Label $L68 = P.new Label("L68");
  ProgramDM.Label $L67 = P.new Label("L67");
  ProgramDM.Label $L71 = P.new Label("L71");
  ProgramDM.Label $L72 = P.new Label("L72");
  ProgramDM.Label $LFE33 = P.new Label("LFE33");
  ProgramDM.Label $branch_searchFirstGreaterThanOrEqualExceptLast = P.new Label("branch_searchFirstGreaterThanOrEqualExceptLast");
  ProgramDM.Label $LFB34 = P.new Label("LFB34");
  ProgramDM.Label $L77 = P.new Label("L77");
  ProgramDM.Label $L75 = P.new Label("L75");
  ProgramDM.Label $L74 = P.new Label("L74");
  ProgramDM.Label $L78 = P.new Label("L78");
  ProgramDM.Label $L79 = P.new Label("L79");
  ProgramDM.Label $LFE34 = P.new Label("LFE34");
  ProgramDM.Label $leaf_size = P.new Label("leaf_size");
  ProgramDM.Label $LFB35 = P.new Label("LFB35");
  ProgramDM.Label $LFE35 = P.new Label("LFE35");
  ProgramDM.Label $leaf_size1 = P.new Label("leaf_size1");
  ProgramDM.Label $LFB36 = P.new Label("LFB36");
  ProgramDM.Label $LFE36 = P.new Label("LFE36");
  ProgramDM.Label $leaf_isFull = P.new Label("leaf_isFull");
  ProgramDM.Label $LFB37 = P.new Label("LFB37");
  ProgramDM.Label $LFE37 = P.new Label("LFE37");
  ProgramDM.Label $leaf_isEmpty = P.new Label("leaf_isEmpty");
  ProgramDM.Label $LFB38 = P.new Label("LFB38");
  ProgramDM.Label $LFE38 = P.new Label("LFE38");
  ProgramDM.Label $leaf_key = P.new Label("leaf_key");
  ProgramDM.Label $LFB39 = P.new Label("LFB39");
  ProgramDM.Label $LFE39 = P.new Label("LFE39");
  ProgramDM.Label $leaf_data = P.new Label("leaf_data");
  ProgramDM.Label $LFB40 = P.new Label("LFB40");
  ProgramDM.Label $LFE40 = P.new Label("LFE40");
  ProgramDM.Label $leaf_setKey = P.new Label("leaf_setKey");
  ProgramDM.Label $LFB41 = P.new Label("LFB41");
  ProgramDM.Label $LFE41 = P.new Label("LFE41");
  ProgramDM.Label $leaf_setData = P.new Label("leaf_setData");
  ProgramDM.Label $LFB42 = P.new Label("LFB42");
  ProgramDM.Label $LFE42 = P.new Label("LFE42");
  ProgramDM.Label $leaf_copyKey = P.new Label("leaf_copyKey");
  ProgramDM.Label $LFB43 = P.new Label("LFB43");
  ProgramDM.Label $LFE43 = P.new Label("LFE43");
  ProgramDM.Label $leaf_copyData = P.new Label("leaf_copyData");
  ProgramDM.Label $LFB44 = P.new Label("LFB44");
  ProgramDM.Label $LFE44 = P.new Label("LFE44");
  ProgramDM.Label $leaf_setKeyData = P.new Label("leaf_setKeyData");
  ProgramDM.Label $LFB45 = P.new Label("LFB45");
  ProgramDM.Label $LFE45 = P.new Label("LFE45");
  ProgramDM.Label $leaf_copyKeyData = P.new Label("leaf_copyKeyData");
  ProgramDM.Label $LFB46 = P.new Label("LFB46");
  ProgramDM.Label $LFE46 = P.new Label("LFE46");
  ProgramDM.Label $leaf_inc = P.new Label("leaf_inc");
  ProgramDM.Label $LFB47 = P.new Label("LFB47");
  ProgramDM.Label $LFE47 = P.new Label("LFE47");
  ProgramDM.Label $leaf_dec = P.new Label("leaf_dec");
  ProgramDM.Label $LFB48 = P.new Label("LFB48");
  ProgramDM.Label $LFE48 = P.new Label("LFE48");
  ProgramDM.Label $leaf_clear = P.new Label("leaf_clear");
  ProgramDM.Label $LFB49 = P.new Label("LFB49");
  ProgramDM.Label $LFE49 = P.new Label("LFE49");
  ProgramDM.Label $leaf_push = P.new Label("leaf_push");
  ProgramDM.Label $LFB50 = P.new Label("LFB50");
  ProgramDM.Label $LFE50 = P.new Label("LFE50");
  ProgramDM.Label $leaf_unshift = P.new Label("leaf_unshift");
  ProgramDM.Label $LFB51 = P.new Label("LFB51");
  ProgramDM.Label $L104 = P.new Label("L104");
  ProgramDM.Label $L103 = P.new Label("L103");
  ProgramDM.Label $LFE51 = P.new Label("LFE51");
  ProgramDM.Label $leaf_result = P.new Label("leaf_result");
  ProgramDM.Label $LFB52 = P.new Label("LFB52");
  ProgramDM.Label $LFE52 = P.new Label("LFE52");
  ProgramDM.Label $leaf_pop = P.new Label("leaf_pop");
  ProgramDM.Label $LFB53 = P.new Label("LFB53");
  ProgramDM.Label $L109 = P.new Label("L109");
  ProgramDM.Label $LFE53 = P.new Label("LFE53");
  ProgramDM.Label $leaf_shift = P.new Label("leaf_shift");
  ProgramDM.Label $LFB54 = P.new Label("LFB54");
  ProgramDM.Label $L112 = P.new Label("L112");
  ProgramDM.Label $L111 = P.new Label("L111");
  ProgramDM.Label $L114 = P.new Label("L114");
  ProgramDM.Label $LFE54 = P.new Label("LFE54");
  ProgramDM.Label $leaf_elementAt = P.new Label("leaf_elementAt");
  ProgramDM.Label $LFB55 = P.new Label("LFB55");
  ProgramDM.Label $L117 = P.new Label("L117");
  ProgramDM.Label $LFE55 = P.new Label("LFE55");
  ProgramDM.Label $leaf_setElementAt = P.new Label("leaf_setElementAt");
  ProgramDM.Label $LFB56 = P.new Label("LFB56");
  ProgramDM.Label $L119 = P.new Label("L119");
  ProgramDM.Label $L121 = P.new Label("L121");
  ProgramDM.Label $LFE56 = P.new Label("LFE56");
  ProgramDM.Label $leaf_insertElementAt = P.new Label("leaf_insertElementAt");
  ProgramDM.Label $LFB57 = P.new Label("LFB57");
  ProgramDM.Label $L124 = P.new Label("L124");
  ProgramDM.Label $L123 = P.new Label("L123");
  ProgramDM.Label $LFE57 = P.new Label("LFE57");
  ProgramDM.Label $leaf_removeElementAt = P.new Label("leaf_removeElementAt");
  ProgramDM.Label $LFB58 = P.new Label("LFB58");
  ProgramDM.Label $L127 = P.new Label("L127");
  ProgramDM.Label $L126 = P.new Label("L126");
  ProgramDM.Label $L129 = P.new Label("L129");
  ProgramDM.Label $LFE58 = P.new Label("LFE58");
  ProgramDM.Label $leaf_firstElement = P.new Label("leaf_firstElement");
  ProgramDM.Label $LFB59 = P.new Label("LFB59");
  ProgramDM.Label $L131 = P.new Label("L131");
  ProgramDM.Label $L133 = P.new Label("L133");
  ProgramDM.Label $LFE59 = P.new Label("LFE59");
  ProgramDM.Label $leaf_lastElement = P.new Label("leaf_lastElement");
  ProgramDM.Label $LFB60 = P.new Label("LFB60");
  ProgramDM.Label $L135 = P.new Label("L135");
  ProgramDM.Label $L137 = P.new Label("L137");
  ProgramDM.Label $LFE60 = P.new Label("LFE60");
  ProgramDM.Label $leaf_search = P.new Label("leaf_search");
  ProgramDM.Label $LFB61 = P.new Label("LFB61");
  ProgramDM.Label $L142 = P.new Label("L142");
  ProgramDM.Label $L140 = P.new Label("L140");
  ProgramDM.Label $L139 = P.new Label("L139");
  ProgramDM.Label $L143 = P.new Label("L143");
  ProgramDM.Label $L144 = P.new Label("L144");
  ProgramDM.Label $LFE61 = P.new Label("LFE61");
  ProgramDM.Label $leaf_searchFirstGreaterThanOrEqual = P.new Label("leaf_searchFirstGreaterThanOrEqual");
  ProgramDM.Label $LFB62 = P.new Label("LFB62");
  ProgramDM.Label $L149 = P.new Label("L149");
  ProgramDM.Label $L147 = P.new Label("L147");
  ProgramDM.Label $L146 = P.new Label("L146");
  ProgramDM.Label $L150 = P.new Label("L150");
  ProgramDM.Label $L151 = P.new Label("L151");
  ProgramDM.Label $LFE62 = P.new Label("LFE62");
  ProgramDM.Label $leaf_searchFirstGreaterThanOrEqualExceptLast = P.new Label("leaf_searchFirstGreaterThanOrEqualExceptLast");
  ProgramDM.Label $LFB63 = P.new Label("LFB63");
  ProgramDM.Label $L156 = P.new Label("L156");
  ProgramDM.Label $L154 = P.new Label("L154");
  ProgramDM.Label $L153 = P.new Label("L153");
  ProgramDM.Label $L157 = P.new Label("L157");
  ProgramDM.Label $L158 = P.new Label("L158");
  ProgramDM.Label $LFE63 = P.new Label("LFE63");
  ProgramDM.Label $debug = P.new Label("debug");
  ProgramDM.Label $btree = P.new Label("btree");
  ProgramDM.Label $initialize_free_chain = P.new Label("initialize_free_chain");
  ProgramDM.Label $LFB64 = P.new Label("LFB64");
  ProgramDM.Label $L161 = P.new Label("L161");
  ProgramDM.Label $L160 = P.new Label("L160");
  ProgramDM.Label $LFE64 = P.new Label("LFE64");
  ProgramDM.Label $create = P.new Label("create");
  ProgramDM.Label $LFB65 = P.new Label("LFB65");
  ProgramDM.Label $L164 = P.new Label("L164");
  ProgramDM.Label $L163 = P.new Label("L163");
  ProgramDM.Label $LFE65 = P.new Label("LFE65");
  ProgramDM.Label $allocate = P.new Label("allocate");
  ProgramDM.Label $LFB66 = P.new Label("LFB66");
  ProgramDM.Label $LFE66 = P.new Label("LFE66");
  ProgramDM.Label $isLeaf = P.new Label("isLeaf");
  ProgramDM.Label $LFB67 = P.new Label("LFB67");
  ProgramDM.Label $LFE67 = P.new Label("LFE67");
  ProgramDM.Label $rootIsLeaf = P.new Label("rootIsLeaf");
  ProgramDM.Label $LFB68 = P.new Label("LFB68");
  ProgramDM.Label $LFE68 = P.new Label("LFE68");
  ProgramDM.Label $setLeaf = P.new Label("setLeaf");
  ProgramDM.Label $LFB69 = P.new Label("LFB69");
  ProgramDM.Label $LFE69 = P.new Label("LFE69");
  ProgramDM.Label $setBranch = P.new Label("setBranch");
  ProgramDM.Label $LFB70 = P.new Label("LFB70");
  ProgramDM.Label $LFE70 = P.new Label("LFE70");
  ProgramDM.Label $setLeafRoot = P.new Label("setLeafRoot");
  ProgramDM.Label $LFB71 = P.new Label("LFB71");
  ProgramDM.Label $LFE71 = P.new Label("LFE71");
  ProgramDM.Label $setBranchRoot = P.new Label("setBranchRoot");
  ProgramDM.Label $LFB72 = P.new Label("LFB72");
  ProgramDM.Label $LFE72 = P.new Label("LFE72");
  ProgramDM.Label $clear = P.new Label("clear");
  ProgramDM.Label $LFB73 = P.new Label("LFB73");
  ProgramDM.Label $L177 = P.new Label("L177");
  ProgramDM.Label $L176 = P.new Label("L176");
  ProgramDM.Label $LFE73 = P.new Label("LFE73");
  ProgramDM.Label $erase = P.new Label("erase");
  ProgramDM.Label $LFB74 = P.new Label("LFB74");
  ProgramDM.Label $L180 = P.new Label("L180");
  ProgramDM.Label $L179 = P.new Label("L179");
  ProgramDM.Label $LFE74 = P.new Label("LFE74");
  ProgramDM.Label $freeNode = P.new Label("freeNode");
  ProgramDM.Label $LFB75 = P.new Label("LFB75");
  ProgramDM.Label $LFE75 = P.new Label("LFE75");
  ProgramDM.Label $leaf = P.new Label("leaf");
  ProgramDM.Label $LFB76 = P.new Label("LFB76");
  ProgramDM.Label $LFE76 = P.new Label("LFE76");
  ProgramDM.Label $branch = P.new Label("branch");
  ProgramDM.Label $LFB77 = P.new Label("LFB77");
  ProgramDM.Label $LFE77 = P.new Label("LFE77");
  ProgramDM.Label $leafSize = P.new Label("leafSize");
  ProgramDM.Label $LFB78 = P.new Label("LFB78");
  ProgramDM.Label $LFE78 = P.new Label("LFE78");
  ProgramDM.Label $branchSize = P.new Label("branchSize");
  ProgramDM.Label $LFB79 = P.new Label("LFB79");
  ProgramDM.Label $LFE79 = P.new Label("LFE79");
  ProgramDM.Label $splitLeafSize = P.new Label("splitLeafSize");
  ProgramDM.Label $LFB80 = P.new Label("LFB80");
  ProgramDM.Label $LFE80 = P.new Label("LFE80");
  ProgramDM.Label $splitBranchSize = P.new Label("splitBranchSize");
  ProgramDM.Label $LFB81 = P.new Label("LFB81");
  ProgramDM.Label $LFE81 = P.new Label("LFE81");
  ProgramDM.Label $isFull = P.new Label("isFull");
  ProgramDM.Label $LFB82 = P.new Label("LFB82");
  ProgramDM.Label $L195 = P.new Label("L195");
  ProgramDM.Label $L197 = P.new Label("L197");
  ProgramDM.Label $LFE82 = P.new Label("LFE82");
  ProgramDM.Label $isFullRoot = P.new Label("isFullRoot");
  ProgramDM.Label $LFB83 = P.new Label("LFB83");
  ProgramDM.Label $LFE83 = P.new Label("LFE83");
  ProgramDM.Label $isLow = P.new Label("isLow");
  ProgramDM.Label $LFB84 = P.new Label("LFB84");
  ProgramDM.Label $L201 = P.new Label("L201");
  ProgramDM.Label $L203 = P.new Label("L203");
  ProgramDM.Label $LFE84 = P.new Label("LFE84");
  ProgramDM.Label $hasLeavesForChildren = P.new Label("hasLeavesForChildren");
  ProgramDM.Label $LFB85 = P.new Label("LFB85");
  ProgramDM.Label $L206 = P.new Label("L206");
  ProgramDM.Label $LFE85 = P.new Label("LFE85");
  ProgramDM.Label $top = P.new Label("top");
  ProgramDM.Label $LFB86 = P.new Label("LFB86");
  ProgramDM.Label $L209 = P.new Label("L209");
  ProgramDM.Label $LFE86 = P.new Label("LFE86");
  ProgramDM.Label $allocLeaf = P.new Label("allocLeaf");
  ProgramDM.Label $LFB87 = P.new Label("LFB87");
  ProgramDM.Label $LFE87 = P.new Label("LFE87");
  ProgramDM.Label $allocBranch = P.new Label("allocBranch");
  ProgramDM.Label $LFB88 = P.new Label("LFB88");
  ProgramDM.Label $LFE88 = P.new Label("LFE88");
  ProgramDM.Label $splitLeafRoot = P.new Label("splitLeafRoot");
  ProgramDM.Label $LFB89 = P.new Label("LFB89");
  ProgramDM.Label $L216 = P.new Label("L216");
  ProgramDM.Label $L215 = P.new Label("L215");
  ProgramDM.Label $L218 = P.new Label("L218");
  ProgramDM.Label $L217 = P.new Label("L217");
  ProgramDM.Label $L219 = P.new Label("L219");
  ProgramDM.Label $LFE89 = P.new Label("LFE89");
  ProgramDM.Label $splitBranchRoot = P.new Label("splitBranchRoot");
  ProgramDM.Label $LFB90 = P.new Label("LFB90");
  ProgramDM.Label $L222 = P.new Label("L222");
  ProgramDM.Label $L221 = P.new Label("L221");
  ProgramDM.Label $L224 = P.new Label("L224");
  ProgramDM.Label $L223 = P.new Label("L223");
  ProgramDM.Label $L225 = P.new Label("L225");
  ProgramDM.Label $LFE90 = P.new Label("LFE90");
  ProgramDM.Label $splitLeaf = P.new Label("splitLeaf");
  ProgramDM.Label $LFB91 = P.new Label("LFB91");
  ProgramDM.Label $L228 = P.new Label("L228");
  ProgramDM.Label $L227 = P.new Label("L227");
  ProgramDM.Label $L229 = P.new Label("L229");
  ProgramDM.Label $LFE91 = P.new Label("LFE91");
  ProgramDM.Label $splitBranch = P.new Label("splitBranch");
  ProgramDM.Label $LFB92 = P.new Label("LFB92");
  ProgramDM.Label $L232 = P.new Label("L232");
  ProgramDM.Label $L231 = P.new Label("L231");
  ProgramDM.Label $L233 = P.new Label("L233");
  ProgramDM.Label $LFE92 = P.new Label("LFE92");
  ProgramDM.Label $stealFromLeft = P.new Label("stealFromLeft");
  ProgramDM.Label $LFB93 = P.new Label("LFB93");
  ProgramDM.Label $L236 = P.new Label("L236");
  ProgramDM.Label $L238 = P.new Label("L238");
  ProgramDM.Label $L235 = P.new Label("L235");
  ProgramDM.Label $L241 = P.new Label("L241");
  ProgramDM.Label $L243 = P.new Label("L243");
  ProgramDM.Label $L239 = P.new Label("L239");
  ProgramDM.Label $L240 = P.new Label("L240");
  ProgramDM.Label $L244 = P.new Label("L244");
  ProgramDM.Label $LFE93 = P.new Label("LFE93");
  ProgramDM.Label $stealFromRight = P.new Label("stealFromRight");
  ProgramDM.Label $LFB94 = P.new Label("LFB94");
  ProgramDM.Label $L247 = P.new Label("L247");
  ProgramDM.Label $L249 = P.new Label("L249");
  ProgramDM.Label $L246 = P.new Label("L246");
  ProgramDM.Label $L252 = P.new Label("L252");
  ProgramDM.Label $L254 = P.new Label("L254");
  ProgramDM.Label $L250 = P.new Label("L250");
  ProgramDM.Label $L255 = P.new Label("L255");
  ProgramDM.Label $L256 = P.new Label("L256");
  ProgramDM.Label $LFE94 = P.new Label("LFE94");
  ProgramDM.Label $mergeRoot = P.new Label("mergeRoot");
  ProgramDM.Label $LFB95 = P.new Label("LFB95");
  ProgramDM.Label $L258 = P.new Label("L258");
  ProgramDM.Label $L259 = P.new Label("L259");
  ProgramDM.Label $L264 = P.new Label("L264");
  ProgramDM.Label $L263 = P.new Label("L263");
  ProgramDM.Label $L266 = P.new Label("L266");
  ProgramDM.Label $L265 = P.new Label("L265");
  ProgramDM.Label $L261 = P.new Label("L261");
  ProgramDM.Label $L268 = P.new Label("L268");
  ProgramDM.Label $L267 = P.new Label("L267");
  ProgramDM.Label $L270 = P.new Label("L270");
  ProgramDM.Label $L269 = P.new Label("L269");
  ProgramDM.Label $L262 = P.new Label("L262");
  ProgramDM.Label $L260 = P.new Label("L260");
  ProgramDM.Label $L271 = P.new Label("L271");
  ProgramDM.Label $LFE95 = P.new Label("LFE95");
  ProgramDM.Label $mergeLeftSibling = P.new Label("mergeLeftSibling");
  ProgramDM.Label $LFB96 = P.new Label("LFB96");
  ProgramDM.Label $L273 = P.new Label("L273");
  ProgramDM.Label $L275 = P.new Label("L275");
  ProgramDM.Label $L277 = P.new Label("L277");
  ProgramDM.Label $L279 = P.new Label("L279");
  ProgramDM.Label $L278 = P.new Label("L278");
  ProgramDM.Label $L276 = P.new Label("L276");
  ProgramDM.Label $L281 = P.new Label("L281");
  ProgramDM.Label $L284 = P.new Label("L284");
  ProgramDM.Label $L283 = P.new Label("L283");
  ProgramDM.Label $L280 = P.new Label("L280");
  ProgramDM.Label $L285 = P.new Label("L285");
  ProgramDM.Label $L286 = P.new Label("L286");
  ProgramDM.Label $LFE96 = P.new Label("LFE96");
  ProgramDM.Label $mergeRightSibling = P.new Label("mergeRightSibling");
  ProgramDM.Label $LFB97 = P.new Label("LFB97");
  ProgramDM.Label $L288 = P.new Label("L288");
  ProgramDM.Label $L291 = P.new Label("L291");
  ProgramDM.Label $L293 = P.new Label("L293");
  ProgramDM.Label $L292 = P.new Label("L292");
  ProgramDM.Label $L290 = P.new Label("L290");
  ProgramDM.Label $L295 = P.new Label("L295");
  ProgramDM.Label $L298 = P.new Label("L298");
  ProgramDM.Label $L297 = P.new Label("L297");
  ProgramDM.Label $L294 = P.new Label("L294");
  ProgramDM.Label $L299 = P.new Label("L299");
  ProgramDM.Label $L300 = P.new Label("L300");
  ProgramDM.Label $LFE97 = P.new Label("LFE97");
  ProgramDM.Label $balance = P.new Label("balance");
  ProgramDM.Label $LFB98 = P.new Label("LFB98");
  ProgramDM.Label $L310 = P.new Label("L310");
  ProgramDM.Label $L311 = P.new Label("L311");
  ProgramDM.Label $L312 = P.new Label("L312");
  ProgramDM.Label $L313 = P.new Label("L313");
  ProgramDM.Label $L301 = P.new Label("L301");
  ProgramDM.Label $L309 = P.new Label("L309");
  ProgramDM.Label $LFE98 = P.new Label("LFE98");
  ProgramDM.Label $find_result = P.new Label("find_result");
  ProgramDM.Label $LFB99 = P.new Label("LFB99");
  ProgramDM.Label $LFE99 = P.new Label("LFE99");
  ProgramDM.Label $find = P.new Label("find");
  ProgramDM.Label $LFB100 = P.new Label("LFB100");
  ProgramDM.Label $L317 = P.new Label("L317");
  ProgramDM.Label $L321 = P.new Label("L321");
  ProgramDM.Label $L320 = P.new Label("L320");
  ProgramDM.Label $L319 = P.new Label("L319");
  ProgramDM.Label $L322 = P.new Label("L322");
  ProgramDM.Label $L323 = P.new Label("L323");
  ProgramDM.Label $LFE100 = P.new Label("LFE100");
  ProgramDM.Label $findAndInsert_result = P.new Label("findAndInsert_result");
  ProgramDM.Label $LFB101 = P.new Label("LFB101");
  ProgramDM.Label $LFE101 = P.new Label("LFE101");
  ProgramDM.Label $findAndInsert = P.new Label("findAndInsert");
  ProgramDM.Label $LFB102 = P.new Label("LFB102");
  ProgramDM.Label $L327 = P.new Label("L327");
  ProgramDM.Label $L330 = P.new Label("L330");
  ProgramDM.Label $L331 = P.new Label("L331");
  ProgramDM.Label $L329 = P.new Label("L329");
  ProgramDM.Label $L332 = P.new Label("L332");
  ProgramDM.Label $L333 = P.new Label("L333");
  ProgramDM.Label $LFE102 = P.new Label("LFE102");
  ProgramDM.Label $put = P.new Label("put");
  ProgramDM.Label $LFB103 = P.new Label("LFB103");
  ProgramDM.Label $L338 = P.new Label("L338");
  ProgramDM.Label $L339 = P.new Label("L339");
  ProgramDM.Label $L337 = P.new Label("L337");
  ProgramDM.Label $L346 = P.new Label("L346");
  ProgramDM.Label $L343 = P.new Label("L343");
  ProgramDM.Label $L344 = P.new Label("L344");
  ProgramDM.Label $L349 = P.new Label("L349");
  ProgramDM.Label $L342 = P.new Label("L342");
  ProgramDM.Label $L350 = P.new Label("L350");
  ProgramDM.Label $L351 = P.new Label("L351");
  ProgramDM.Label $L334 = P.new Label("L334");
  ProgramDM.Label $L348 = P.new Label("L348");
  ProgramDM.Label $LFE103 = P.new Label("LFE103");
  ProgramDM.Label $findAndDelete_result = P.new Label("findAndDelete_result");
  ProgramDM.Label $LFB104 = P.new Label("LFB104");
  ProgramDM.Label $LFE104 = P.new Label("LFE104");
  ProgramDM.Label $findAndDelete = P.new Label("findAndDelete");
  ProgramDM.Label $LFB105 = P.new Label("LFB105");
  ProgramDM.Label $L355 = P.new Label("L355");
  ProgramDM.Label $L357 = P.new Label("L357");
  ProgramDM.Label $L358 = P.new Label("L358");
  ProgramDM.Label $LFE105 = P.new Label("LFE105");
  ProgramDM.Label $delete = P.new Label("delete");
  ProgramDM.Label $LFB106 = P.new Label("LFB106");
  ProgramDM.Label $L360 = P.new Label("L360");
  ProgramDM.Label $L364 = P.new Label("L364");
  ProgramDM.Label $L363 = P.new Label("L363");
  ProgramDM.Label $L362 = P.new Label("L362");
  ProgramDM.Label $L359 = P.new Label("L359");
  ProgramDM.Label $L366 = P.new Label("L366");
  ProgramDM.Label $LFE106 = P.new Label("LFE106");
  ProgramDM.Label $merge = P.new Label("merge");
  ProgramDM.Label $LFB107 = P.new Label("LFB107");
  ProgramDM.Label $L375 = P.new Label("L375");
  ProgramDM.Label $L373 = P.new Label("L373");
  ProgramDM.Label $L372 = P.new Label("L372");
  ProgramDM.Label $L371 = P.new Label("L371");
  ProgramDM.Label $L368 = P.new Label("L368");
  ProgramDM.Label $L377 = P.new Label("L377");
  ProgramDM.Label $L367 = P.new Label("L367");
  ProgramDM.Label $L376 = P.new Label("L376");
  ProgramDM.Label $LFE107 = P.new Label("LFE107");
  ProgramDM.Label $test_put_ascending22 = P.new Label("test_put_ascending22");
  ProgramDM.Label $LFB108 = P.new Label("LFB108");
  ProgramDM.Label $L380 = P.new Label("L380");
  ProgramDM.Label $L379 = P.new Label("L379");
  ProgramDM.Label $LFE108 = P.new Label("LFE108");
  ProgramDM.Label $main = P.new Label("main");
  ProgramDM.Label $LFB109 = P.new Label("LFB109");
  ProgramDM.Label $LFE109 = P.new Label("LFE109");
  ProgramDM.Label $0 = P.new Label("0");
  ProgramDM.Label $1 = P.new Label("1");
  ProgramDM.Label $2 = P.new Label("2");
  ProgramDM.Label $3 = P.new Label("3");
  ProgramDM.Label $4 = P.new Label("4");
  void test_btree1() {
    $branch_size.set();
    $LFB6.set();
    /*    0 b */ endbr64();
    /*    1 b */ mov(QWORD,PTR,-8[rsp],rdi);
    /*    2 b */ mov(rax,QWORD,PTR,-8[rsp]);
    /*    3 b */ mov(eax,DWORD,PTR,[rax]);
    /*    4 b */ ret();
    $LFE6.set();
    $branch_size1.set();
    $LFB7.set();
    /*    5 b */ endbr64();
    /*    6 b */ mov(QWORD,PTR,-8[rsp],rdi);
    /*    7 b */ mov(rax,QWORD,PTR,-8[rsp]);
    /*    8 b */ mov(eax,DWORD,PTR,[rax]);
    /*    9 b */ sub(eax,1);
    /*   10 b */ ret();
    $LFE7.set();
    $branch_isFull.set();
    $LFB8.set();
    /*   11 b */ endbr64();
    /*   12 b */ sub(rsp,8);
    /*   13 b */ mov(QWORD,PTR,[rsp],rdi);
    /*   14 b */ mov(rax,QWORD,PTR,[rsp]);
    /*   15 b */ mov(rdi,rax);
    /*   16 Y */ call($branch_size);
    /*   17 b */ cmp(eax,4);
    /*   18 b */ setg(al);
    /*   19 b */ movzx(eax,al);
    /*   20 b */ add(rsp,8);
    /*   21 b */ ret();
    $LFE8.set();
    $branch_isEmpty.set();
    $LFB9.set();
    /*   22 b */ endbr64();
    /*   23 b */ sub(rsp,8);
    /*   24 b */ mov(QWORD,PTR,[rsp],rdi);
    /*   25 b */ mov(rax,QWORD,PTR,[rsp]);
    /*   26 b */ mov(rdi,rax);
    /*   27 Y */ call($branch_size);
    /*   28 b */ test(eax,eax);
    /*   29 b */ sete(al);
    /*   30 b */ movzx(eax,al);
    /*   31 b */ add(rsp,8);
    /*   32 b */ ret();
    $LFE9.set();
    $branch_key.set();
    $LFB10.set();
    /*   33 b */ endbr64();
    /*   34 b */ mov(QWORD,PTR,-8[rsp],rdi);
    /*   35 b */ mov(DWORD,PTR,-12[rsp],esi);
    /*   36 b */ mov(rax,QWORD,PTR,-8[rsp]);
    /*   37 b */ mov(edx,DWORD,PTR,-12[rsp]);
    /*   38 b */ movsx(rdx,edx);
    /*   39 b */ mov(eax,DWORD,PTR,4[rax+rdx*4]);
    /*   40 b */ ret();
    $LFE10.set();
    $branch_data.set();
    $LFB11.set();
    /*   41 b */ endbr64();
    /*   42 b */ mov(QWORD,PTR,-8[rsp],rdi);
    /*   43 b */ mov(DWORD,PTR,-12[rsp],esi);
    /*   44 b */ mov(rax,QWORD,PTR,-8[rsp]);
    /*   45 b */ mov(edx,DWORD,PTR,-12[rsp]);
    /*   46 b */ movsx(rdx,edx);
    /*   47 b */ add(rdx,4);
    /*   48 b */ mov(eax,DWORD,PTR,4[rax+rdx*4]);
    /*   49 b */ ret();
    $LFE11.set();
    $branch_setKey.set();
    $LFB12.set();
    /*   50 b */ endbr64();
    /*   51 b */ mov(QWORD,PTR,-8[rsp],rdi);
    /*   52 b */ mov(DWORD,PTR,-12[rsp],esi);
    /*   53 b */ mov(DWORD,PTR,-16[rsp],edx);
    /*   54 b */ mov(rax,QWORD,PTR,-8[rsp]);
    /*   55 b */ mov(edx,DWORD,PTR,-12[rsp]);
    /*   56 b */ movsx(rdx,edx);
    /*   57 b */ mov(ecx,DWORD,PTR,-16[rsp]);
    /*   58 b */ mov(DWORD,PTR,4[rax+rdx*4],ecx);
    /*   59 b */ nop();
    /*   60 b */ ret();
    $LFE12.set();
    $branch_setData.set();
    $LFB13.set();
    /*   61 b */ endbr64();
    /*   62 b */ mov(QWORD,PTR,-8[rsp],rdi);
    /*   63 b */ mov(DWORD,PTR,-12[rsp],esi);
    /*   64 b */ mov(DWORD,PTR,-16[rsp],edx);
    /*   65 b */ mov(rax,QWORD,PTR,-8[rsp]);
    /*   66 b */ mov(edx,DWORD,PTR,-12[rsp]);
    /*   67 b */ movsx(rdx,edx);
    /*   68 b */ lea(rcx,4[rdx]);
    /*   69 b */ mov(edx,DWORD,PTR,-16[rsp]);
    /*   70 b */ mov(DWORD,PTR,4[rax+rcx*4],edx);
    /*   71 b */ nop();
    /*   72 b */ ret();
    $LFE13.set();
    $branch_copyKey.set();
    $LFB14.set();
    /*   73 b */ endbr64();
    /*   74 b */ mov(QWORD,PTR,-8[rsp],rdi);
    /*   75 b */ mov(DWORD,PTR,-12[rsp],esi);
    /*   76 b */ mov(DWORD,PTR,-16[rsp],edx);
    /*   77 b */ mov(rax,QWORD,PTR,-8[rsp]);
    /*   78 b */ mov(edx,DWORD,PTR,-16[rsp]);
    /*   79 b */ movsx(rdx,edx);
    /*   80 b */ mov(ecx,DWORD,PTR,4[rax+rdx*4]);
    /*   81 b */ mov(rax,QWORD,PTR,-8[rsp]);
    /*   82 b */ mov(edx,DWORD,PTR,-12[rsp]);
    /*   83 b */ movsx(rdx,edx);
    /*   84 b */ mov(DWORD,PTR,4[rax+rdx*4],ecx);
    /*   85 b */ nop();
    /*   86 b */ ret();
    $LFE14.set();
    $branch_copyData.set();
    $LFB15.set();
    /*   87 b */ endbr64();
    /*   88 b */ mov(QWORD,PTR,-8[rsp],rdi);
    /*   89 b */ mov(DWORD,PTR,-12[rsp],esi);
    /*   90 b */ mov(DWORD,PTR,-16[rsp],edx);
    /*   91 b */ mov(rax,QWORD,PTR,-8[rsp]);
    /*   92 b */ mov(edx,DWORD,PTR,-16[rsp]);
    /*   93 b */ movsx(rdx,edx);
    /*   94 b */ add(rdx,4);
    /*   95 b */ mov(edx,DWORD,PTR,4[rax+rdx*4]);
    /*   96 b */ mov(rax,QWORD,PTR,-8[rsp]);
    /*   97 b */ mov(ecx,DWORD,PTR,-12[rsp]);
    /*   98 b */ movsx(rcx,ecx);
    /*   99 b */ add(rcx,4);
    /*  100 b */ mov(DWORD,PTR,4[rax+rcx*4],edx);
    /*  101 b */ nop();
    /*  102 b */ ret();
    $LFE15.set();
    $branch_setKeyData.set();
    $LFB16.set();
    /*  103 b */ endbr64();
    /*  104 b */ sub(rsp,24);
    /*  105 b */ mov(QWORD,PTR,16[rsp],rdi);
    /*  106 b */ mov(DWORD,PTR,12[rsp],esi);
    /*  107 b */ mov(DWORD,PTR,8[rsp],edx);
    /*  108 b */ mov(DWORD,PTR,4[rsp],ecx);
    /*  109 b */ mov(edx,DWORD,PTR,8[rsp]);
    /*  110 b */ mov(ecx,DWORD,PTR,12[rsp]);
    /*  111 b */ mov(rax,QWORD,PTR,16[rsp]);
    /*  112 b */ mov(esi,ecx);
    /*  113 b */ mov(rdi,rax);
    /*  114 Y */ call($branch_setKey);
    /*  115 b */ mov(edx,DWORD,PTR,4[rsp]);
    /*  116 b */ mov(ecx,DWORD,PTR,12[rsp]);
    /*  117 b */ mov(rax,QWORD,PTR,16[rsp]);
    /*  118 b */ mov(esi,ecx);
    /*  119 b */ mov(rdi,rax);
    /*  120 Y */ call($branch_setData);
    /*  121 b */ nop();
    /*  122 b */ add(rsp,24);
    /*  123 b */ ret();
    $LFE16.set();
    $branch_copyKeyData.set();
    $LFB17.set();
    /*  124 b */ endbr64();
    /*  125 b */ sub(rsp,16);
    /*  126 b */ mov(QWORD,PTR,8[rsp],rdi);
    /*  127 b */ mov(DWORD,PTR,4[rsp],esi);
    /*  128 b */ mov(DWORD,PTR,[rsp],edx);
    /*  129 b */ mov(edx,DWORD,PTR,[rsp]);
    /*  130 b */ mov(ecx,DWORD,PTR,4[rsp]);
    /*  131 b */ mov(rax,QWORD,PTR,8[rsp]);
    /*  132 b */ mov(esi,ecx);
    /*  133 b */ mov(rdi,rax);
    /*  134 Y */ call($branch_copyKey);
    /*  135 b */ mov(edx,DWORD,PTR,[rsp]);
    /*  136 b */ mov(ecx,DWORD,PTR,4[rsp]);
    /*  137 b */ mov(rax,QWORD,PTR,8[rsp]);
    /*  138 b */ mov(esi,ecx);
    /*  139 b */ mov(rdi,rax);
    /*  140 Y */ call($branch_copyData);
    /*  141 b */ nop();
    /*  142 b */ add(rsp,16);
    /*  143 b */ ret();
    $LFE17.set();
    $branch_inc.set();
    $LFB18.set();
    /*  144 b */ endbr64();
    /*  145 b */ mov(QWORD,PTR,-8[rsp],rdi);
    /*  146 b */ mov(rax,QWORD,PTR,-8[rsp]);
    /*  147 b */ mov(eax,DWORD,PTR,[rax]);
    /*  148 b */ lea(edx,1[rax]);
    /*  149 b */ mov(rax,QWORD,PTR,-8[rsp]);
    /*  150 b */ mov(DWORD,PTR,[rax],edx);
    /*  151 b */ nop();
    /*  152 b */ ret();
    $LFE18.set();
    $branch_dec.set();
    $LFB19.set();
    /*  153 b */ endbr64();
    /*  154 b */ mov(QWORD,PTR,-8[rsp],rdi);
    /*  155 b */ mov(rax,QWORD,PTR,-8[rsp]);
    /*  156 b */ mov(eax,DWORD,PTR,[rax]);
    /*  157 b */ lea(edx,-1[rax]);
    /*  158 b */ mov(rax,QWORD,PTR,-8[rsp]);
    /*  159 b */ mov(DWORD,PTR,[rax],edx);
    /*  160 b */ nop();
    /*  161 b */ ret();
    $LFE19.set();
    $branch_clear.set();
    $LFB20.set();
    /*  162 b */ endbr64();
    /*  163 b */ mov(QWORD,PTR,-8[rsp],rdi);
    /*  164 b */ mov(rax,QWORD,PTR,-8[rsp]);
    /*  165 b */ mov(DWORD,PTR,[rax],0);
    /*  166 b */ nop();
    /*  167 b */ ret();
    $LFE20.set();
    $branch_push.set();
    $LFB21.set();
    /*  168 b */ endbr64();
    /*  169 b */ sub(rsp,32);
    /*  170 b */ mov(QWORD,PTR,8[rsp],rdi);
    /*  171 b */ mov(DWORD,PTR,4[rsp],esi);
    /*  172 b */ mov(DWORD,PTR,[rsp],edx);
    /*  173 b */ mov(rax,QWORD,PTR,8[rsp]);
    /*  174 b */ mov(rdi,rax);
    /*  175 Y */ call($branch_size);
    /*  176 b */ mov(DWORD,PTR,28[rsp],eax);
    /*  177 b */ mov(ecx,DWORD,PTR,[rsp]);
    /*  178 b */ mov(edx,DWORD,PTR,4[rsp]);
    /*  179 b */ mov(esi,DWORD,PTR,28[rsp]);
    /*  180 b */ mov(rax,QWORD,PTR,8[rsp]);
    /*  181 b */ mov(rdi,rax);
    /*  182 Y */ call($branch_setKeyData);
    /*  183 b */ mov(rax,QWORD,PTR,8[rsp]);
    /*  184 b */ mov(rdi,rax);
    /*  185 Y */ call($branch_inc);
    /*  186 b */ nop();
    /*  187 b */ add(rsp,32);
    /*  188 b */ ret();
    $LFE21.set();
    $branch_unshift.set();
    $LFB22.set();
    /*  189 b */ endbr64();
    /*  190 b */ sub(rsp,32);
    /*  191 b */ mov(QWORD,PTR,8[rsp],rdi);
    /*  192 b */ mov(DWORD,PTR,4[rsp],esi);
    /*  193 b */ mov(DWORD,PTR,[rsp],edx);
    /*  194 b */ mov(rax,QWORD,PTR,8[rsp]);
    /*  195 b */ mov(rdi,rax);
    /*  196 Y */ call($branch_size);
    /*  197 b */ mov(DWORD,PTR,28[rsp],eax);
    /*  198 X */ jmp($L24);
    $L25.set();
    /*  199 b */ mov(eax,DWORD,PTR,28[rsp]);
    /*  200 b */ lea(edx,-1[rax]);
    /*  201 b */ mov(ecx,DWORD,PTR,28[rsp]);
    /*  202 b */ mov(rax,QWORD,PTR,8[rsp]);
    /*  203 b */ mov(esi,ecx);
    /*  204 b */ mov(rdi,rax);
    /*  205 Y */ call($branch_copyKeyData);
    /*  206 b */ sub(DWORD,PTR,28[rsp],1);
    $L24.set();
    /*  207 b */ cmp(DWORD,PTR,28[rsp],0);
    /*  208 X */ jg($L25);
    /*  209 b */ mov(ecx,DWORD,PTR,[rsp]);
    /*  210 b */ mov(edx,DWORD,PTR,4[rsp]);
    /*  211 b */ mov(rax,QWORD,PTR,8[rsp]);
    /*  212 b */ mov(esi,0);
    /*  213 b */ mov(rdi,rax);
    /*  214 Y */ call($branch_setKeyData);
    /*  215 b */ mov(rax,QWORD,PTR,8[rsp]);
    /*  216 b */ mov(rdi,rax);
    /*  217 Y */ call($branch_inc);
    /*  218 b */ nop();
    /*  219 b */ add(rsp,32);
    /*  220 b */ ret();
    $LFE22.set();
    $branch_result.set();
    $LFB23.set();
    /*  221 b */ endbr64();
    /*  222 b */ mov(QWORD,PTR,-40[rsp],rdi);
    /*  223 b */ mov(DWORD,PTR,-4[rsp],0);
    /*  224 b */ mov(eax,DWORD,PTR,-4[rsp]);
    /*  225 b */ mov(DWORD,PTR,-8[rsp],eax);
    /*  226 b */ mov(eax,DWORD,PTR,-8[rsp]);
    /*  227 b */ mov(DWORD,PTR,-12[rsp],eax);
    /*  228 b */ mov(eax,DWORD,PTR,-12[rsp]);
    /*  229 b */ mov(DWORD,PTR,-16[rsp],eax);
    /*  230 b */ mov(eax,DWORD,PTR,-16[rsp]);
    /*  231 b */ mov(DWORD,PTR,-20[rsp],eax);
    /*  232 b */ mov(rax,QWORD,PTR,-40[rsp]);
    /*  233 b */ mov(rdx,QWORD,PTR,-20[rsp]);
    /*  234 b */ mov(QWORD,PTR,[rax],rdx);
    /*  235 b */ mov(rdx,QWORD,PTR,-12[rsp]);
    /*  236 b */ mov(QWORD,PTR,8[rax],rdx);
    /*  237 b */ mov(edx,DWORD,PTR,-4[rsp]);
    /*  238 b */ mov(DWORD,PTR,16[rax],edx);
    /*  239 b */ mov(rax,QWORD,PTR,-40[rsp]);
    /*  240 b */ ret();
    $LFE23.set();
    $branch_pop.set();
    $LFB24.set();
    /*  241 b */ endbr64();
    /*  242 b */ sub(rsp,56);
    /*  243 b */ mov(QWORD,PTR,8[rsp],rdi);
    /*  244 b */ mov(QWORD,PTR,[rsp],rsi);
    /*  245 b */ mov(rax,QWORD,PTR,fs:40);
    /*  246 b */ mov(QWORD,PTR,40[rsp],rax);
    /*  247 b */ xor(eax,eax);
    /*  248 b */ lea(rax,20[rsp]);
    /*  249 b */ mov(rdi,rax);
    /*  250 b */ mov(eax,0);
    /*  251 Y */ call($branch_result);
    /*  252 b */ mov(rax,QWORD,PTR,[rsp]);
    /*  253 b */ mov(rdi,rax);
    /*  254 Y */ call($branch_dec);
    /*  255 b */ mov(rax,QWORD,PTR,[rsp]);
    /*  256 b */ mov(rdi,rax);
    /*  257 Y */ call($branch_size);
    /*  258 b */ mov(DWORD,PTR,28[rsp],eax);
    /*  259 b */ mov(edx,DWORD,PTR,28[rsp]);
    /*  260 b */ mov(rax,QWORD,PTR,[rsp]);
    /*  261 b */ mov(esi,edx);
    /*  262 b */ mov(rdi,rax);
    /*  263 Y */ call($branch_key);
    /*  264 b */ mov(DWORD,PTR,32[rsp],eax);
    /*  265 b */ mov(edx,DWORD,PTR,28[rsp]);
    /*  266 b */ mov(rax,QWORD,PTR,[rsp]);
    /*  267 b */ mov(esi,edx);
    /*  268 b */ mov(rdi,rax);
    /*  269 Y */ call($branch_data);
    /*  270 b */ mov(DWORD,PTR,36[rsp],eax);
    /*  271 b */ mov(rax,QWORD,PTR,8[rsp]);
    /*  272 b */ mov(rdx,QWORD,PTR,20[rsp]);
    /*  273 b */ mov(QWORD,PTR,[rax],rdx);
    /*  274 b */ mov(rdx,QWORD,PTR,28[rsp]);
    /*  275 b */ mov(QWORD,PTR,8[rax],rdx);
    /*  276 b */ mov(edx,DWORD,PTR,36[rsp]);
    /*  277 b */ mov(DWORD,PTR,16[rax],edx);
    /*  278 b */ mov(rax,QWORD,PTR,40[rsp]);
    /*  279 b */ sub(rax,QWORD,PTR,fs:40);
    /*  280 X */ je($L30);
    /*  281 Y */ call($__stack_chk_fail@PLT);
    $L30.set();
    /*  282 b */ mov(rax,QWORD,PTR,8[rsp]);
    /*  283 b */ add(rsp,56);
    /*  284 b */ ret();
    $LFE24.set();
    $branch_shift.set();
    $LFB25.set();
    /*  285 b */ endbr64();
    /*  286 b */ sub(rsp,72);
    /*  287 b */ mov(QWORD,PTR,8[rsp],rdi);
    /*  288 b */ mov(QWORD,PTR,[rsp],rsi);
    /*  289 b */ mov(rax,QWORD,PTR,fs:40);
    /*  290 b */ mov(QWORD,PTR,56[rsp],rax);
    /*  291 b */ xor(eax,eax);
    /*  292 b */ lea(rax,36[rsp]);
    /*  293 b */ mov(rdi,rax);
    /*  294 b */ mov(eax,0);
    /*  295 Y */ call($branch_result);
    /*  296 b */ mov(rax,QWORD,PTR,[rsp]);
    /*  297 b */ mov(esi,0);
    /*  298 b */ mov(rdi,rax);
    /*  299 Y */ call($branch_key);
    /*  300 b */ mov(DWORD,PTR,48[rsp],eax);
    /*  301 b */ mov(rax,QWORD,PTR,[rsp]);
    /*  302 b */ mov(esi,0);
    /*  303 b */ mov(rdi,rax);
    /*  304 Y */ call($branch_data);
    /*  305 b */ mov(DWORD,PTR,52[rsp],eax);
    /*  306 b */ mov(DWORD,PTR,28[rsp],0);
    /*  307 b */ mov(rax,QWORD,PTR,[rsp]);
    /*  308 b */ mov(rdi,rax);
    /*  309 Y */ call($branch_size);
    /*  310 b */ sub(eax,1);
    /*  311 b */ mov(DWORD,PTR,32[rsp],eax);
    /*  312 X */ jmp($L32);
    $L33.set();
    /*  313 b */ mov(eax,DWORD,PTR,28[rsp]);
    /*  314 b */ lea(edx,1[rax]);
    /*  315 b */ mov(ecx,DWORD,PTR,28[rsp]);
    /*  316 b */ mov(rax,QWORD,PTR,[rsp]);
    /*  317 b */ mov(esi,ecx);
    /*  318 b */ mov(rdi,rax);
    /*  319 Y */ call($branch_copyKeyData);
    /*  320 b */ add(DWORD,PTR,28[rsp],1);
    $L32.set();
    /*  321 b */ mov(eax,DWORD,PTR,28[rsp]);
    /*  322 b */ cmp(eax,DWORD,PTR,32[rsp]);
    /*  323 X */ jl($L33);
    /*  324 b */ mov(rax,QWORD,PTR,[rsp]);
    /*  325 b */ mov(rdi,rax);
    /*  326 Y */ call($branch_dec);
    /*  327 b */ mov(rax,QWORD,PTR,8[rsp]);
    /*  328 b */ mov(rdx,QWORD,PTR,36[rsp]);
    /*  329 b */ mov(QWORD,PTR,[rax],rdx);
    /*  330 b */ mov(rdx,QWORD,PTR,44[rsp]);
    /*  331 b */ mov(QWORD,PTR,8[rax],rdx);
    /*  332 b */ mov(edx,DWORD,PTR,52[rsp]);
    /*  333 b */ mov(DWORD,PTR,16[rax],edx);
    /*  334 b */ mov(rax,QWORD,PTR,56[rsp]);
    /*  335 b */ sub(rax,QWORD,PTR,fs:40);
    /*  336 X */ je($L35);
    /*  337 Y */ call($__stack_chk_fail@PLT);
    $L35.set();
    /*  338 b */ mov(rax,QWORD,PTR,8[rsp]);
    /*  339 b */ add(rsp,72);
    /*  340 b */ ret();
    $LFE25.set();
    $branch_elementAt.set();
    $LFB26.set();
    /*  341 b */ endbr64();
    /*  342 b */ sub(rsp,72);
    /*  343 b */ mov(QWORD,PTR,24[rsp],rdi);
    /*  344 b */ mov(QWORD,PTR,16[rsp],rsi);
    /*  345 b */ mov(DWORD,PTR,12[rsp],edx);
    /*  346 b */ mov(rax,QWORD,PTR,fs:40);
    /*  347 b */ mov(QWORD,PTR,56[rsp],rax);
    /*  348 b */ xor(eax,eax);
    /*  349 b */ lea(rax,36[rsp]);
    /*  350 b */ mov(rdi,rax);
    /*  351 b */ mov(eax,0);
    /*  352 Y */ call($branch_result);
    /*  353 b */ mov(eax,DWORD,PTR,12[rsp]);
    /*  354 b */ mov(DWORD,PTR,44[rsp],eax);
    /*  355 b */ mov(edx,DWORD,PTR,12[rsp]);
    /*  356 b */ mov(rax,QWORD,PTR,16[rsp]);
    /*  357 b */ mov(esi,edx);
    /*  358 b */ mov(rdi,rax);
    /*  359 Y */ call($branch_key);
    /*  360 b */ mov(DWORD,PTR,48[rsp],eax);
    /*  361 b */ mov(edx,DWORD,PTR,12[rsp]);
    /*  362 b */ mov(rax,QWORD,PTR,16[rsp]);
    /*  363 b */ mov(esi,edx);
    /*  364 b */ mov(rdi,rax);
    /*  365 Y */ call($branch_data);
    /*  366 b */ mov(DWORD,PTR,52[rsp],eax);
    /*  367 b */ mov(rax,QWORD,PTR,24[rsp]);
    /*  368 b */ mov(rdx,QWORD,PTR,36[rsp]);
    /*  369 b */ mov(QWORD,PTR,[rax],rdx);
    /*  370 b */ mov(rdx,QWORD,PTR,44[rsp]);
    /*  371 b */ mov(QWORD,PTR,8[rax],rdx);
    /*  372 b */ mov(edx,DWORD,PTR,52[rsp]);
    /*  373 b */ mov(DWORD,PTR,16[rax],edx);
    /*  374 b */ mov(rax,QWORD,PTR,56[rsp]);
    /*  375 b */ sub(rax,QWORD,PTR,fs:40);
    /*  376 X */ je($L38);
    /*  377 Y */ call($__stack_chk_fail@PLT);
    $L38.set();
    /*  378 b */ mov(rax,QWORD,PTR,24[rsp]);
    /*  379 b */ add(rsp,72);
    /*  380 b */ ret();
    $LFE26.set();
    $branch_setElementAt.set();
    $LFB27.set();
    /*  381 b */ endbr64();
    /*  382 b */ sub(rsp,24);
    /*  383 b */ mov(QWORD,PTR,16[rsp],rdi);
    /*  384 b */ mov(DWORD,PTR,12[rsp],esi);
    /*  385 b */ mov(DWORD,PTR,8[rsp],edx);
    /*  386 b */ mov(DWORD,PTR,4[rsp],ecx);
    /*  387 b */ mov(rax,QWORD,PTR,16[rsp]);
    /*  388 b */ mov(rdi,rax);
    /*  389 Y */ call($branch_size);
    /*  390 b */ cmp(DWORD,PTR,4[rsp],eax);
    /*  391 X */ jne($L40);
    /*  392 b */ mov(ecx,DWORD,PTR,8[rsp]);
    /*  393 b */ mov(edx,DWORD,PTR,12[rsp]);
    /*  394 b */ mov(esi,DWORD,PTR,4[rsp]);
    /*  395 b */ mov(rax,QWORD,PTR,16[rsp]);
    /*  396 b */ mov(rdi,rax);
    /*  397 Y */ call($branch_setKeyData);
    /*  398 b */ mov(rax,QWORD,PTR,16[rsp]);
    /*  399 b */ mov(rdi,rax);
    /*  400 Y */ call($branch_inc);
    /*  401 X */ jmp($L42);
    $L40.set();
    /*  402 b */ mov(ecx,DWORD,PTR,8[rsp]);
    /*  403 b */ mov(edx,DWORD,PTR,12[rsp]);
    /*  404 b */ mov(esi,DWORD,PTR,4[rsp]);
    /*  405 b */ mov(rax,QWORD,PTR,16[rsp]);
    /*  406 b */ mov(rdi,rax);
    /*  407 Y */ call($branch_setKeyData);
    $L42.set();
    /*  408 b */ nop();
    /*  409 b */ add(rsp,24);
    /*  410 b */ ret();
    $LFE27.set();
    $branch_insertElementAt.set();
    $LFB28.set();
    /*  411 b */ endbr64();
    /*  412 b */ sub(rsp,40);
    /*  413 b */ mov(QWORD,PTR,16[rsp],rdi);
    /*  414 b */ mov(DWORD,PTR,12[rsp],esi);
    /*  415 b */ mov(DWORD,PTR,8[rsp],edx);
    /*  416 b */ mov(DWORD,PTR,4[rsp],ecx);
    /*  417 b */ mov(rax,QWORD,PTR,16[rsp]);
    /*  418 b */ mov(rdi,rax);
    /*  419 Y */ call($branch_size);
    /*  420 b */ mov(DWORD,PTR,36[rsp],eax);
    /*  421 X */ jmp($L44);
    $L45.set();
    /*  422 b */ mov(eax,DWORD,PTR,36[rsp]);
    /*  423 b */ lea(edx,-1[rax]);
    /*  424 b */ mov(ecx,DWORD,PTR,36[rsp]);
    /*  425 b */ mov(rax,QWORD,PTR,16[rsp]);
    /*  426 b */ mov(esi,ecx);
    /*  427 b */ mov(rdi,rax);
    /*  428 Y */ call($branch_copyKeyData);
    /*  429 b */ sub(DWORD,PTR,36[rsp],1);
    $L44.set();
    /*  430 b */ mov(eax,DWORD,PTR,36[rsp]);
    /*  431 b */ cmp(eax,DWORD,PTR,4[rsp]);
    /*  432 X */ jg($L45);
    /*  433 b */ mov(ecx,DWORD,PTR,8[rsp]);
    /*  434 b */ mov(edx,DWORD,PTR,12[rsp]);
    /*  435 b */ mov(esi,DWORD,PTR,4[rsp]);
    /*  436 b */ mov(rax,QWORD,PTR,16[rsp]);
    /*  437 b */ mov(rdi,rax);
    /*  438 Y */ call($branch_setKeyData);
    /*  439 b */ mov(rax,QWORD,PTR,16[rsp]);
    /*  440 b */ mov(rdi,rax);
    /*  441 Y */ call($branch_inc);
    /*  442 b */ nop();
    /*  443 b */ add(rsp,40);
    /*  444 b */ ret();
    $LFE28.set();
    $branch_removeElementAt.set();
    $LFB29.set();
    /*  445 b */ endbr64();
    /*  446 b */ sub(rsp,88);
    /*  447 b */ mov(QWORD,PTR,24[rsp],rdi);
    /*  448 b */ mov(QWORD,PTR,16[rsp],rsi);
    /*  449 b */ mov(DWORD,PTR,12[rsp],edx);
    /*  450 b */ mov(rax,QWORD,PTR,fs:40);
    /*  451 b */ mov(QWORD,PTR,72[rsp],rax);
    /*  452 b */ xor(eax,eax);
    /*  453 b */ lea(rax,52[rsp]);
    /*  454 b */ mov(rdi,rax);
    /*  455 b */ mov(eax,0);
    /*  456 Y */ call($branch_result);
    /*  457 b */ mov(eax,DWORD,PTR,12[rsp]);
    /*  458 b */ mov(DWORD,PTR,60[rsp],eax);
    /*  459 b */ mov(edx,DWORD,PTR,12[rsp]);
    /*  460 b */ mov(rax,QWORD,PTR,16[rsp]);
    /*  461 b */ mov(esi,edx);
    /*  462 b */ mov(rdi,rax);
    /*  463 Y */ call($branch_key);
    /*  464 b */ mov(DWORD,PTR,64[rsp],eax);
    /*  465 b */ mov(edx,DWORD,PTR,12[rsp]);
    /*  466 b */ mov(rax,QWORD,PTR,16[rsp]);
    /*  467 b */ mov(esi,edx);
    /*  468 b */ mov(rdi,rax);
    /*  469 Y */ call($branch_data);
    /*  470 b */ mov(DWORD,PTR,68[rsp],eax);
    /*  471 b */ mov(eax,DWORD,PTR,12[rsp]);
    /*  472 b */ mov(DWORD,PTR,44[rsp],eax);
    /*  473 b */ mov(rax,QWORD,PTR,16[rsp]);
    /*  474 b */ mov(rdi,rax);
    /*  475 Y */ call($branch_size);
    /*  476 b */ sub(eax,1);
    /*  477 b */ mov(DWORD,PTR,48[rsp],eax);
    /*  478 X */ jmp($L47);
    $L48.set();
    /*  479 b */ mov(eax,DWORD,PTR,44[rsp]);
    /*  480 b */ lea(edx,1[rax]);
    /*  481 b */ mov(ecx,DWORD,PTR,44[rsp]);
    /*  482 b */ mov(rax,QWORD,PTR,16[rsp]);
    /*  483 b */ mov(esi,ecx);
    /*  484 b */ mov(rdi,rax);
    /*  485 Y */ call($branch_copyKeyData);
    /*  486 b */ add(DWORD,PTR,44[rsp],1);
    $L47.set();
    /*  487 b */ mov(eax,DWORD,PTR,44[rsp]);
    /*  488 b */ cmp(eax,DWORD,PTR,48[rsp]);
    /*  489 X */ jl($L48);
    /*  490 b */ mov(rax,QWORD,PTR,16[rsp]);
    /*  491 b */ mov(rdi,rax);
    /*  492 Y */ call($branch_dec);
    /*  493 b */ mov(rax,QWORD,PTR,24[rsp]);
    /*  494 b */ mov(rdx,QWORD,PTR,52[rsp]);
    /*  495 b */ mov(QWORD,PTR,[rax],rdx);
    /*  496 b */ mov(rdx,QWORD,PTR,60[rsp]);
    /*  497 b */ mov(QWORD,PTR,8[rax],rdx);
    /*  498 b */ mov(edx,DWORD,PTR,68[rsp]);
    /*  499 b */ mov(DWORD,PTR,16[rax],edx);
    /*  500 b */ mov(rax,QWORD,PTR,72[rsp]);
    /*  501 b */ sub(rax,QWORD,PTR,fs:40);
    /*  502 X */ je($L50);
    /*  503 Y */ call($__stack_chk_fail@PLT);
    $L50.set();
    /*  504 b */ mov(rax,QWORD,PTR,24[rsp]);
    /*  505 b */ add(rsp,88);
    /*  506 b */ ret();
    $LFE29.set();
    $branch_firstElement.set();
    $LFB30.set();
    /*  507 b */ endbr64();
    /*  508 b */ sub(rsp,56);
    /*  509 b */ mov(QWORD,PTR,8[rsp],rdi);
    /*  510 b */ mov(QWORD,PTR,[rsp],rsi);
    /*  511 b */ mov(rax,QWORD,PTR,fs:40);
    /*  512 b */ mov(QWORD,PTR,40[rsp],rax);
    /*  513 b */ xor(eax,eax);
    /*  514 b */ lea(rax,20[rsp]);
    /*  515 b */ mov(rdi,rax);
    /*  516 b */ mov(eax,0);
    /*  517 Y */ call($branch_result);
    /*  518 b */ mov(rax,QWORD,PTR,[rsp]);
    /*  519 b */ mov(rdi,rax);
    /*  520 Y */ call($branch_isEmpty);
    /*  521 b */ test(eax,eax);
    /*  522 b */ sete(al);
    /*  523 b */ movzx(eax,al);
    /*  524 b */ mov(DWORD,PTR,24[rsp],eax);
    /*  525 b */ mov(eax,DWORD,PTR,24[rsp]);
    /*  526 b */ test(eax,eax);
    /*  527 X */ je($L52);
    /*  528 b */ mov(DWORD,PTR,28[rsp],0);
    /*  529 b */ mov(rax,QWORD,PTR,[rsp]);
    /*  530 b */ mov(esi,0);
    /*  531 b */ mov(rdi,rax);
    /*  532 Y */ call($branch_key);
    /*  533 b */ mov(DWORD,PTR,32[rsp],eax);
    /*  534 b */ mov(rax,QWORD,PTR,[rsp]);
    /*  535 b */ mov(esi,0);
    /*  536 b */ mov(rdi,rax);
    /*  537 Y */ call($branch_data);
    /*  538 b */ mov(DWORD,PTR,36[rsp],eax);
    $L52.set();
    /*  539 b */ mov(rax,QWORD,PTR,8[rsp]);
    /*  540 b */ mov(rdx,QWORD,PTR,20[rsp]);
    /*  541 b */ mov(QWORD,PTR,[rax],rdx);
    /*  542 b */ mov(rdx,QWORD,PTR,28[rsp]);
    /*  543 b */ mov(QWORD,PTR,8[rax],rdx);
    /*  544 b */ mov(edx,DWORD,PTR,36[rsp]);
    /*  545 b */ mov(DWORD,PTR,16[rax],edx);
    /*  546 b */ mov(rax,QWORD,PTR,40[rsp]);
    /*  547 b */ sub(rax,QWORD,PTR,fs:40);
    /*  548 X */ je($L54);
    /*  549 Y */ call($__stack_chk_fail@PLT);
    $L54.set();
    /*  550 b */ mov(rax,QWORD,PTR,8[rsp]);
    /*  551 b */ add(rsp,56);
    /*  552 b */ ret();
    $LFE30.set();
    $branch_lastElement.set();
    $LFB31.set();
    /*  553 b */ endbr64();
    /*  554 b */ sub(rsp,56);
    /*  555 b */ mov(QWORD,PTR,8[rsp],rdi);
    /*  556 b */ mov(QWORD,PTR,[rsp],rsi);
    /*  557 b */ mov(rax,QWORD,PTR,fs:40);
    /*  558 b */ mov(QWORD,PTR,40[rsp],rax);
    /*  559 b */ xor(eax,eax);
    /*  560 b */ lea(rax,20[rsp]);
    /*  561 b */ mov(rdi,rax);
    /*  562 b */ mov(eax,0);
    /*  563 Y */ call($branch_result);
    /*  564 b */ mov(rax,QWORD,PTR,[rsp]);
    /*  565 b */ mov(rdi,rax);
    /*  566 Y */ call($branch_isEmpty);
    /*  567 b */ test(eax,eax);
    /*  568 b */ sete(al);
    /*  569 b */ movzx(eax,al);
    /*  570 b */ mov(DWORD,PTR,24[rsp],eax);
    /*  571 b */ mov(rax,QWORD,PTR,[rsp]);
    /*  572 b */ mov(rdi,rax);
    /*  573 Y */ call($branch_size);
    /*  574 b */ sub(eax,1);
    /*  575 b */ mov(DWORD,PTR,16[rsp],eax);
    /*  576 b */ mov(eax,DWORD,PTR,24[rsp]);
    /*  577 b */ test(eax,eax);
    /*  578 X */ je($L56);
    /*  579 b */ mov(eax,DWORD,PTR,16[rsp]);
    /*  580 b */ mov(DWORD,PTR,28[rsp],eax);
    /*  581 b */ mov(edx,DWORD,PTR,16[rsp]);
    /*  582 b */ mov(rax,QWORD,PTR,[rsp]);
    /*  583 b */ mov(esi,edx);
    /*  584 b */ mov(rdi,rax);
    /*  585 Y */ call($branch_key);
    /*  586 b */ mov(DWORD,PTR,32[rsp],eax);
    /*  587 b */ mov(edx,DWORD,PTR,16[rsp]);
    /*  588 b */ mov(rax,QWORD,PTR,[rsp]);
    /*  589 b */ mov(esi,edx);
    /*  590 b */ mov(rdi,rax);
    /*  591 Y */ call($branch_data);
    /*  592 b */ mov(DWORD,PTR,36[rsp],eax);
    $L56.set();
    /*  593 b */ mov(rax,QWORD,PTR,8[rsp]);
    /*  594 b */ mov(rdx,QWORD,PTR,20[rsp]);
    /*  595 b */ mov(QWORD,PTR,[rax],rdx);
    /*  596 b */ mov(rdx,QWORD,PTR,28[rsp]);
    /*  597 b */ mov(QWORD,PTR,8[rax],rdx);
    /*  598 b */ mov(edx,DWORD,PTR,36[rsp]);
    /*  599 b */ mov(DWORD,PTR,16[rax],edx);
    /*  600 b */ mov(rax,QWORD,PTR,40[rsp]);
    /*  601 b */ sub(rax,QWORD,PTR,fs:40);
    /*  602 X */ je($L58);
    /*  603 Y */ call($__stack_chk_fail@PLT);
    $L58.set();
    /*  604 b */ mov(rax,QWORD,PTR,8[rsp]);
    /*  605 b */ add(rsp,56);
    /*  606 b */ ret();
    $LFE31.set();
    $branch_search.set();
    $LFB32.set();
    /*  607 b */ endbr64();
    /*  608 b */ sub(rsp,88);
    /*  609 b */ mov(QWORD,PTR,24[rsp],rdi);
    /*  610 b */ mov(QWORD,PTR,16[rsp],rsi);
    /*  611 b */ mov(DWORD,PTR,12[rsp],edx);
    /*  612 b */ mov(rax,QWORD,PTR,fs:40);
    /*  613 b */ mov(QWORD,PTR,72[rsp],rax);
    /*  614 b */ xor(eax,eax);
    /*  615 b */ lea(rax,52[rsp]);
    /*  616 b */ mov(rdi,rax);
    /*  617 b */ mov(eax,0);
    /*  618 Y */ call($branch_result);
    /*  619 b */ mov(eax,DWORD,PTR,12[rsp]);
    /*  620 b */ mov(DWORD,PTR,64[rsp],eax);
    /*  621 b */ mov(DWORD,PTR,44[rsp],0);
    /*  622 b */ mov(rax,QWORD,PTR,16[rsp]);
    /*  623 b */ mov(rdi,rax);
    /*  624 Y */ call($branch_size);
    /*  625 b */ mov(DWORD,PTR,48[rsp],eax);
    /*  626 X */ jmp($L60);
    $L63.set();
    /*  627 b */ mov(edx,DWORD,PTR,44[rsp]);
    /*  628 b */ mov(rax,QWORD,PTR,16[rsp]);
    /*  629 b */ mov(esi,edx);
    /*  630 b */ mov(rdi,rax);
    /*  631 Y */ call($branch_key);
    /*  632 b */ cmp(DWORD,PTR,12[rsp],eax);
    /*  633 X */ jne($L61);
    /*  634 b */ mov(DWORD,PTR,56[rsp],1);
    /*  635 b */ mov(eax,DWORD,PTR,44[rsp]);
    /*  636 b */ mov(DWORD,PTR,60[rsp],eax);
    /*  637 b */ mov(edx,DWORD,PTR,44[rsp]);
    /*  638 b */ mov(rax,QWORD,PTR,16[rsp]);
    /*  639 b */ mov(esi,edx);
    /*  640 b */ mov(rdi,rax);
    /*  641 Y */ call($branch_data);
    /*  642 b */ mov(DWORD,PTR,68[rsp],eax);
    /*  643 b */ mov(rax,QWORD,PTR,24[rsp]);
    /*  644 b */ mov(rdx,QWORD,PTR,52[rsp]);
    /*  645 b */ mov(QWORD,PTR,[rax],rdx);
    /*  646 b */ mov(rdx,QWORD,PTR,60[rsp]);
    /*  647 b */ mov(QWORD,PTR,8[rax],rdx);
    /*  648 b */ mov(edx,DWORD,PTR,68[rsp]);
    /*  649 b */ mov(DWORD,PTR,16[rax],edx);
    /*  650 X */ jmp($L64);
    $L61.set();
    /*  651 b */ add(DWORD,PTR,44[rsp],1);
    $L60.set();
    /*  652 b */ mov(eax,DWORD,PTR,44[rsp]);
    /*  653 b */ cmp(eax,DWORD,PTR,48[rsp]);
    /*  654 X */ jl($L63);
    /*  655 b */ mov(DWORD,PTR,56[rsp],0);
    /*  656 b */ mov(rax,QWORD,PTR,24[rsp]);
    /*  657 b */ mov(rdx,QWORD,PTR,52[rsp]);
    /*  658 b */ mov(QWORD,PTR,[rax],rdx);
    /*  659 b */ mov(rdx,QWORD,PTR,60[rsp]);
    /*  660 b */ mov(QWORD,PTR,8[rax],rdx);
    /*  661 b */ mov(edx,DWORD,PTR,68[rsp]);
    /*  662 b */ mov(DWORD,PTR,16[rax],edx);
    $L64.set();
    /*  663 b */ mov(rax,QWORD,PTR,72[rsp]);
    /*  664 b */ sub(rax,QWORD,PTR,fs:40);
    /*  665 X */ je($L65);
    /*  666 Y */ call($__stack_chk_fail@PLT);
    $L65.set();
    /*  667 b */ mov(rax,QWORD,PTR,24[rsp]);
    /*  668 b */ add(rsp,88);
    /*  669 b */ ret();
    $LFE32.set();
    $branch_searchFirstGreaterThanOrEqual.set();
    $LFB33.set();
    /*  670 b */ endbr64();
    /*  671 b */ sub(rsp,88);
    /*  672 b */ mov(QWORD,PTR,24[rsp],rdi);
    /*  673 b */ mov(QWORD,PTR,16[rsp],rsi);
    /*  674 b */ mov(DWORD,PTR,12[rsp],edx);
    /*  675 b */ mov(rax,QWORD,PTR,fs:40);
    /*  676 b */ mov(QWORD,PTR,72[rsp],rax);
    /*  677 b */ xor(eax,eax);
    /*  678 b */ lea(rax,52[rsp]);
    /*  679 b */ mov(rdi,rax);
    /*  680 b */ mov(eax,0);
    /*  681 Y */ call($branch_result);
    /*  682 b */ mov(eax,DWORD,PTR,12[rsp]);
    /*  683 b */ mov(DWORD,PTR,52[rsp],eax);
    /*  684 b */ mov(DWORD,PTR,44[rsp],0);
    /*  685 b */ mov(rax,QWORD,PTR,16[rsp]);
    /*  686 b */ mov(rdi,rax);
    /*  687 Y */ call($branch_size);
    /*  688 b */ mov(DWORD,PTR,48[rsp],eax);
    /*  689 X */ jmp($L67);
    $L70.set();
    /*  690 b */ mov(edx,DWORD,PTR,44[rsp]);
    /*  691 b */ mov(rax,QWORD,PTR,16[rsp]);
    /*  692 b */ mov(esi,edx);
    /*  693 b */ mov(rdi,rax);
    /*  694 Y */ call($branch_key);
    /*  695 b */ cmp(DWORD,PTR,12[rsp],eax);
    /*  696 X */ jg($L68);
    /*  697 b */ mov(DWORD,PTR,56[rsp],1);
    /*  698 b */ mov(eax,DWORD,PTR,44[rsp]);
    /*  699 b */ mov(DWORD,PTR,60[rsp],eax);
    /*  700 b */ mov(edx,DWORD,PTR,44[rsp]);
    /*  701 b */ mov(rax,QWORD,PTR,16[rsp]);
    /*  702 b */ mov(esi,edx);
    /*  703 b */ mov(rdi,rax);
    /*  704 Y */ call($branch_key);
    /*  705 b */ mov(DWORD,PTR,64[rsp],eax);
    /*  706 b */ mov(edx,DWORD,PTR,44[rsp]);
    /*  707 b */ mov(rax,QWORD,PTR,16[rsp]);
    /*  708 b */ mov(esi,edx);
    /*  709 b */ mov(rdi,rax);
    /*  710 Y */ call($branch_data);
    /*  711 b */ mov(DWORD,PTR,68[rsp],eax);
    /*  712 b */ mov(rax,QWORD,PTR,24[rsp]);
    /*  713 b */ mov(rdx,QWORD,PTR,52[rsp]);
    /*  714 b */ mov(QWORD,PTR,[rax],rdx);
    /*  715 b */ mov(rdx,QWORD,PTR,60[rsp]);
    /*  716 b */ mov(QWORD,PTR,8[rax],rdx);
    /*  717 b */ mov(edx,DWORD,PTR,68[rsp]);
    /*  718 b */ mov(DWORD,PTR,16[rax],edx);
    /*  719 X */ jmp($L71);
    $L68.set();
    /*  720 b */ add(DWORD,PTR,44[rsp],1);
    $L67.set();
    /*  721 b */ mov(eax,DWORD,PTR,44[rsp]);
    /*  722 b */ cmp(eax,DWORD,PTR,48[rsp]);
    /*  723 X */ jl($L70);
    /*  724 b */ mov(DWORD,PTR,56[rsp],0);
    /*  725 b */ mov(rax,QWORD,PTR,24[rsp]);
    /*  726 b */ mov(rdx,QWORD,PTR,52[rsp]);
    /*  727 b */ mov(QWORD,PTR,[rax],rdx);
    /*  728 b */ mov(rdx,QWORD,PTR,60[rsp]);
    /*  729 b */ mov(QWORD,PTR,8[rax],rdx);
    /*  730 b */ mov(edx,DWORD,PTR,68[rsp]);
    /*  731 b */ mov(DWORD,PTR,16[rax],edx);
    $L71.set();
    /*  732 b */ mov(rax,QWORD,PTR,72[rsp]);
    /*  733 b */ sub(rax,QWORD,PTR,fs:40);
    /*  734 X */ je($L72);
    /*  735 Y */ call($__stack_chk_fail@PLT);
    $L72.set();
    /*  736 b */ mov(rax,QWORD,PTR,24[rsp]);
    /*  737 b */ add(rsp,88);
    /*  738 b */ ret();
    $LFE33.set();
    $branch_searchFirstGreaterThanOrEqualExceptLast.set();
    $LFB34.set();
    /*  739 b */ endbr64();
    /*  740 b */ sub(rsp,88);
    /*  741 b */ mov(QWORD,PTR,24[rsp],rdi);
    /*  742 b */ mov(QWORD,PTR,16[rsp],rsi);
    /*  743 b */ mov(DWORD,PTR,12[rsp],edx);
    /*  744 b */ mov(rax,QWORD,PTR,fs:40);
    /*  745 b */ mov(QWORD,PTR,72[rsp],rax);
    /*  746 b */ xor(eax,eax);
    /*  747 b */ lea(rax,52[rsp]);
    /*  748 b */ mov(rdi,rax);
    /*  749 b */ mov(eax,0);
    /*  750 Y */ call($branch_result);
    /*  751 b */ mov(eax,DWORD,PTR,12[rsp]);
    /*  752 b */ mov(DWORD,PTR,52[rsp],eax);
    /*  753 b */ mov(rax,QWORD,PTR,16[rsp]);
    /*  754 b */ mov(rdi,rax);
    /*  755 Y */ call($branch_size);
    /*  756 b */ sub(eax,1);
    /*  757 b */ mov(DWORD,PTR,44[rsp],eax);
    /*  758 b */ mov(DWORD,PTR,40[rsp],0);
    /*  759 b */ mov(eax,DWORD,PTR,44[rsp]);
    /*  760 b */ mov(DWORD,PTR,48[rsp],eax);
    /*  761 X */ jmp($L74);
    $L77.set();
    /*  762 b */ mov(edx,DWORD,PTR,40[rsp]);
    /*  763 b */ mov(rax,QWORD,PTR,16[rsp]);
    /*  764 b */ mov(esi,edx);
    /*  765 b */ mov(rdi,rax);
    /*  766 Y */ call($branch_key);
    /*  767 b */ cmp(DWORD,PTR,12[rsp],eax);
    /*  768 X */ jg($L75);
    /*  769 b */ mov(DWORD,PTR,56[rsp],1);
    /*  770 b */ mov(eax,DWORD,PTR,40[rsp]);
    /*  771 b */ mov(DWORD,PTR,60[rsp],eax);
    /*  772 b */ mov(edx,DWORD,PTR,40[rsp]);
    /*  773 b */ mov(rax,QWORD,PTR,16[rsp]);
    /*  774 b */ mov(esi,edx);
    /*  775 b */ mov(rdi,rax);
    /*  776 Y */ call($branch_key);
    /*  777 b */ mov(DWORD,PTR,64[rsp],eax);
    /*  778 b */ mov(edx,DWORD,PTR,40[rsp]);
    /*  779 b */ mov(rax,QWORD,PTR,16[rsp]);
    /*  780 b */ mov(esi,edx);
    /*  781 b */ mov(rdi,rax);
    /*  782 Y */ call($branch_data);
    /*  783 b */ mov(DWORD,PTR,68[rsp],eax);
    /*  784 b */ mov(rax,QWORD,PTR,24[rsp]);
    /*  785 b */ mov(rdx,QWORD,PTR,52[rsp]);
    /*  786 b */ mov(QWORD,PTR,[rax],rdx);
    /*  787 b */ mov(rdx,QWORD,PTR,60[rsp]);
    /*  788 b */ mov(QWORD,PTR,8[rax],rdx);
    /*  789 b */ mov(edx,DWORD,PTR,68[rsp]);
    /*  790 b */ mov(DWORD,PTR,16[rax],edx);
    /*  791 X */ jmp($L78);
    $L75.set();
    /*  792 b */ add(DWORD,PTR,40[rsp],1);
    $L74.set();
    /*  793 b */ mov(eax,DWORD,PTR,40[rsp]);
    /*  794 b */ cmp(eax,DWORD,PTR,48[rsp]);
    /*  795 X */ jl($L77);
    /*  796 b */ mov(DWORD,PTR,56[rsp],1);
    /*  797 b */ mov(eax,DWORD,PTR,44[rsp]);
    /*  798 b */ mov(DWORD,PTR,60[rsp],eax);
    /*  799 b */ mov(DWORD,PTR,64[rsp],0);
    /*  800 b */ mov(edx,DWORD,PTR,44[rsp]);
    /*  801 b */ mov(rax,QWORD,PTR,16[rsp]);
    /*  802 b */ mov(esi,edx);
    /*  803 b */ mov(rdi,rax);
    /*  804 Y */ call($branch_data);
    /*  805 b */ mov(DWORD,PTR,68[rsp],eax);
    /*  806 b */ mov(rax,QWORD,PTR,24[rsp]);
    /*  807 b */ mov(rdx,QWORD,PTR,52[rsp]);
    /*  808 b */ mov(QWORD,PTR,[rax],rdx);
    /*  809 b */ mov(rdx,QWORD,PTR,60[rsp]);
    /*  810 b */ mov(QWORD,PTR,8[rax],rdx);
    /*  811 b */ mov(edx,DWORD,PTR,68[rsp]);
    /*  812 b */ mov(DWORD,PTR,16[rax],edx);
    $L78.set();
    /*  813 b */ mov(rax,QWORD,PTR,72[rsp]);
    /*  814 b */ sub(rax,QWORD,PTR,fs:40);
    /*  815 X */ je($L79);
    /*  816 Y */ call($__stack_chk_fail@PLT);
    $L79.set();
    /*  817 b */ mov(rax,QWORD,PTR,24[rsp]);
    /*  818 b */ add(rsp,88);
    /*  819 b */ ret();
    $LFE34.set();
    $leaf_size.set();
    $LFB35.set();
    /*  820 b */ endbr64();
    /*  821 b */ mov(QWORD,PTR,-8[rsp],rdi);
    /*  822 b */ mov(rax,QWORD,PTR,-8[rsp]);
    /*  823 b */ mov(eax,DWORD,PTR,[rax]);
    /*  824 b */ ret();
    $LFE35.set();
    $leaf_size1.set();
    $LFB36.set();
    /*  825 b */ endbr64();
    /*  826 b */ mov(QWORD,PTR,-8[rsp],rdi);
    /*  827 b */ mov(rax,QWORD,PTR,-8[rsp]);
    /*  828 b */ mov(eax,DWORD,PTR,[rax]);
    /*  829 b */ sub(eax,1);
    /*  830 b */ ret();
    $LFE36.set();
    $leaf_isFull.set();
    $LFB37.set();
    /*  831 b */ endbr64();
    /*  832 b */ sub(rsp,8);
    /*  833 b */ mov(QWORD,PTR,[rsp],rdi);
    /*  834 b */ mov(rax,QWORD,PTR,[rsp]);
    /*  835 b */ mov(rdi,rax);
    /*  836 Y */ call($leaf_size);
    /*  837 b */ cmp(eax,2);
    /*  838 b */ setg(al);
    /*  839 b */ movzx(eax,al);
    /*  840 b */ add(rsp,8);
    /*  841 b */ ret();
    $LFE37.set();
    $leaf_isEmpty.set();
    $LFB38.set();
    /*  842 b */ endbr64();
    /*  843 b */ sub(rsp,8);
    /*  844 b */ mov(QWORD,PTR,[rsp],rdi);
    /*  845 b */ mov(rax,QWORD,PTR,[rsp]);
    /*  846 b */ mov(rdi,rax);
    /*  847 Y */ call($leaf_size);
    /*  848 b */ test(eax,eax);
    /*  849 b */ sete(al);
    /*  850 b */ movzx(eax,al);
    /*  851 b */ add(rsp,8);
    /*  852 b */ ret();
    $LFE38.set();
    $leaf_key.set();
    $LFB39.set();
    /*  853 b */ endbr64();
    /*  854 b */ mov(QWORD,PTR,-8[rsp],rdi);
    /*  855 b */ mov(DWORD,PTR,-12[rsp],esi);
    /*  856 b */ mov(rax,QWORD,PTR,-8[rsp]);
    /*  857 b */ mov(edx,DWORD,PTR,-12[rsp]);
    /*  858 b */ movsx(rdx,edx);
    /*  859 b */ mov(eax,DWORD,PTR,4[rax+rdx*4]);
    /*  860 b */ ret();
    $LFE39.set();
    $leaf_data.set();
    $LFB40.set();
    /*  861 b */ endbr64();
    /*  862 b */ mov(QWORD,PTR,-8[rsp],rdi);
    /*  863 b */ mov(DWORD,PTR,-12[rsp],esi);
    /*  864 b */ mov(rdx,QWORD,PTR,-8[rsp]);
    /*  865 b */ mov(eax,DWORD,PTR,-12[rsp]);
    /*  866 b */ cdqe();
    /*  867 b */ movzx(eax,BYTE,PTR,12[rdx+rax]);
    /*  868 b */ ret();
    $LFE40.set();
    $leaf_setKey.set();
    $LFB41.set();
    /*  869 b */ endbr64();
    /*  870 b */ mov(QWORD,PTR,-8[rsp],rdi);
    /*  871 b */ mov(DWORD,PTR,-12[rsp],esi);
    /*  872 b */ mov(DWORD,PTR,-16[rsp],edx);
    /*  873 b */ mov(rax,QWORD,PTR,-8[rsp]);
    /*  874 b */ mov(edx,DWORD,PTR,-12[rsp]);
    /*  875 b */ movsx(rdx,edx);
    /*  876 b */ mov(ecx,DWORD,PTR,-16[rsp]);
    /*  877 b */ mov(DWORD,PTR,4[rax+rdx*4],ecx);
    /*  878 b */ nop();
    /*  879 b */ ret();
    $LFE41.set();
    $leaf_setData.set();
    $LFB42.set();
    /*  880 b */ endbr64();
    /*  881 b */ mov(QWORD,PTR,-8[rsp],rdi);
    /*  882 b */ mov(DWORD,PTR,-12[rsp],esi);
    /*  883 b */ mov(DWORD,PTR,-16[rsp],edx);
    /*  884 b */ mov(eax,DWORD,PTR,-16[rsp]);
    /*  885 b */ mov(ecx,eax);
    /*  886 b */ mov(rdx,QWORD,PTR,-8[rsp]);
    /*  887 b */ mov(eax,DWORD,PTR,-12[rsp]);
    /*  888 b */ cdqe();
    /*  889 b */ mov(BYTE,PTR,12[rdx+rax],cl);
    /*  890 b */ nop();
    /*  891 b */ ret();
    $LFE42.set();
    $leaf_copyKey.set();
    $LFB43.set();
    /*  892 b */ endbr64();
    /*  893 b */ mov(QWORD,PTR,-8[rsp],rdi);
    /*  894 b */ mov(DWORD,PTR,-12[rsp],esi);
    /*  895 b */ mov(DWORD,PTR,-16[rsp],edx);
    /*  896 b */ mov(rax,QWORD,PTR,-8[rsp]);
    /*  897 b */ mov(edx,DWORD,PTR,-16[rsp]);
    /*  898 b */ movsx(rdx,edx);
    /*  899 b */ mov(ecx,DWORD,PTR,4[rax+rdx*4]);
    /*  900 b */ mov(rax,QWORD,PTR,-8[rsp]);
    /*  901 b */ mov(edx,DWORD,PTR,-12[rsp]);
    /*  902 b */ movsx(rdx,edx);
    /*  903 b */ mov(DWORD,PTR,4[rax+rdx*4],ecx);
    /*  904 b */ nop();
    /*  905 b */ ret();
    $LFE43.set();
    $leaf_copyData.set();
    $LFB44.set();
    /*  906 b */ endbr64();
    /*  907 b */ mov(QWORD,PTR,-8[rsp],rdi);
    /*  908 b */ mov(DWORD,PTR,-12[rsp],esi);
    /*  909 b */ mov(DWORD,PTR,-16[rsp],edx);
    /*  910 b */ mov(rdx,QWORD,PTR,-8[rsp]);
    /*  911 b */ mov(eax,DWORD,PTR,-16[rsp]);
    /*  912 b */ cdqe();
    /*  913 b */ movzx(ecx,BYTE,PTR,12[rdx+rax]);
    /*  914 b */ mov(rdx,QWORD,PTR,-8[rsp]);
    /*  915 b */ mov(eax,DWORD,PTR,-12[rsp]);
    /*  916 b */ cdqe();
    /*  917 b */ mov(BYTE,PTR,12[rdx+rax],cl);
    /*  918 b */ nop();
    /*  919 b */ ret();
    $LFE44.set();
    $leaf_setKeyData.set();
    $LFB45.set();
    /*  920 b */ endbr64();
    /*  921 b */ sub(rsp,24);
    /*  922 b */ mov(QWORD,PTR,16[rsp],rdi);
    /*  923 b */ mov(DWORD,PTR,12[rsp],esi);
    /*  924 b */ mov(DWORD,PTR,8[rsp],edx);
    /*  925 b */ mov(DWORD,PTR,4[rsp],ecx);
    /*  926 b */ mov(edx,DWORD,PTR,8[rsp]);
    /*  927 b */ mov(ecx,DWORD,PTR,12[rsp]);
    /*  928 b */ mov(rax,QWORD,PTR,16[rsp]);
    /*  929 b */ mov(esi,ecx);
    /*  930 b */ mov(rdi,rax);
    /*  931 Y */ call($leaf_setKey);
    /*  932 b */ mov(edx,DWORD,PTR,4[rsp]);
    /*  933 b */ mov(ecx,DWORD,PTR,12[rsp]);
    /*  934 b */ mov(rax,QWORD,PTR,16[rsp]);
    /*  935 b */ mov(esi,ecx);
    /*  936 b */ mov(rdi,rax);
    /*  937 Y */ call($leaf_setData);
    /*  938 b */ nop();
    /*  939 b */ add(rsp,24);
    /*  940 b */ ret();
    $LFE45.set();
    $leaf_copyKeyData.set();
    $LFB46.set();
    /*  941 b */ endbr64();
    /*  942 b */ sub(rsp,16);
    /*  943 b */ mov(QWORD,PTR,8[rsp],rdi);
    /*  944 b */ mov(DWORD,PTR,4[rsp],esi);
    /*  945 b */ mov(DWORD,PTR,[rsp],edx);
    /*  946 b */ mov(edx,DWORD,PTR,[rsp]);
    /*  947 b */ mov(ecx,DWORD,PTR,4[rsp]);
    /*  948 b */ mov(rax,QWORD,PTR,8[rsp]);
    /*  949 b */ mov(esi,ecx);
    /*  950 b */ mov(rdi,rax);
    /*  951 Y */ call($leaf_copyKey);
    /*  952 b */ mov(edx,DWORD,PTR,[rsp]);
    /*  953 b */ mov(ecx,DWORD,PTR,4[rsp]);
    /*  954 b */ mov(rax,QWORD,PTR,8[rsp]);
    /*  955 b */ mov(esi,ecx);
    /*  956 b */ mov(rdi,rax);
    /*  957 Y */ call($leaf_copyData);
    /*  958 b */ nop();
    /*  959 b */ add(rsp,16);
    /*  960 b */ ret();
    $LFE46.set();
    $leaf_inc.set();
    $LFB47.set();
    /*  961 b */ endbr64();
    /*  962 b */ mov(QWORD,PTR,-8[rsp],rdi);
    /*  963 b */ mov(rax,QWORD,PTR,-8[rsp]);
    /*  964 b */ mov(eax,DWORD,PTR,[rax]);
    /*  965 b */ lea(edx,1[rax]);
    /*  966 b */ mov(rax,QWORD,PTR,-8[rsp]);
    /*  967 b */ mov(DWORD,PTR,[rax],edx);
    /*  968 b */ nop();
    /*  969 b */ ret();
    $LFE47.set();
    $leaf_dec.set();
    $LFB48.set();
    /*  970 b */ endbr64();
    /*  971 b */ mov(QWORD,PTR,-8[rsp],rdi);
    /*  972 b */ mov(rax,QWORD,PTR,-8[rsp]);
    /*  973 b */ mov(eax,DWORD,PTR,[rax]);
    /*  974 b */ lea(edx,-1[rax]);
    /*  975 b */ mov(rax,QWORD,PTR,-8[rsp]);
    /*  976 b */ mov(DWORD,PTR,[rax],edx);
    /*  977 b */ nop();
    /*  978 b */ ret();
    $LFE48.set();
    $leaf_clear.set();
    $LFB49.set();
    /*  979 b */ endbr64();
    /*  980 b */ mov(QWORD,PTR,-8[rsp],rdi);
    /*  981 b */ mov(rax,QWORD,PTR,-8[rsp]);
    /*  982 b */ mov(DWORD,PTR,[rax],0);
    /*  983 b */ nop();
    /*  984 b */ ret();
    $LFE49.set();
    $leaf_push.set();
    $LFB50.set();
    /*  985 b */ endbr64();
    /*  986 b */ sub(rsp,32);
    /*  987 b */ mov(QWORD,PTR,8[rsp],rdi);
    /*  988 b */ mov(DWORD,PTR,4[rsp],esi);
    /*  989 b */ mov(DWORD,PTR,[rsp],edx);
    /*  990 b */ mov(rax,QWORD,PTR,8[rsp]);
    /*  991 b */ mov(rdi,rax);
    /*  992 Y */ call($leaf_size);
    /*  993 b */ mov(DWORD,PTR,28[rsp],eax);
    /*  994 b */ mov(ecx,DWORD,PTR,[rsp]);
    /*  995 b */ mov(edx,DWORD,PTR,4[rsp]);
    /*  996 b */ mov(esi,DWORD,PTR,28[rsp]);
    /*  997 b */ mov(rax,QWORD,PTR,8[rsp]);
    /*  998 b */ mov(rdi,rax);
    /*  999 Y */ call($leaf_setKeyData);
    /* 1000 b */ mov(rax,QWORD,PTR,8[rsp]);
    /* 1001 b */ mov(rdi,rax);
    /* 1002 Y */ call($leaf_inc);
    /* 1003 b */ nop();
    /* 1004 b */ add(rsp,32);
    /* 1005 b */ ret();
    $LFE50.set();
    $leaf_unshift.set();
    $LFB51.set();
    /* 1006 b */ endbr64();
    /* 1007 b */ sub(rsp,32);
    /* 1008 b */ mov(QWORD,PTR,8[rsp],rdi);
    /* 1009 b */ mov(DWORD,PTR,4[rsp],esi);
    /* 1010 b */ mov(DWORD,PTR,[rsp],edx);
    /* 1011 b */ mov(rax,QWORD,PTR,8[rsp]);
    /* 1012 b */ mov(rdi,rax);
    /* 1013 Y */ call($leaf_size);
    /* 1014 b */ mov(DWORD,PTR,28[rsp],eax);
    /* 1015 X */ jmp($L103);
    $L104.set();
    /* 1016 b */ mov(eax,DWORD,PTR,28[rsp]);
    /* 1017 b */ lea(edx,-1[rax]);
    /* 1018 b */ mov(ecx,DWORD,PTR,28[rsp]);
    /* 1019 b */ mov(rax,QWORD,PTR,8[rsp]);
    /* 1020 b */ mov(esi,ecx);
    /* 1021 b */ mov(rdi,rax);
    /* 1022 Y */ call($leaf_copyKeyData);
    /* 1023 b */ sub(DWORD,PTR,28[rsp],1);
    $L103.set();
    /* 1024 b */ cmp(DWORD,PTR,28[rsp],0);
    /* 1025 X */ jg($L104);
    /* 1026 b */ mov(ecx,DWORD,PTR,[rsp]);
    /* 1027 b */ mov(edx,DWORD,PTR,4[rsp]);
    /* 1028 b */ mov(rax,QWORD,PTR,8[rsp]);
    /* 1029 b */ mov(esi,0);
    /* 1030 b */ mov(rdi,rax);
    /* 1031 Y */ call($leaf_setKeyData);
    /* 1032 b */ mov(rax,QWORD,PTR,8[rsp]);
    /* 1033 b */ mov(rdi,rax);
    /* 1034 Y */ call($leaf_inc);
    /* 1035 b */ nop();
    /* 1036 b */ add(rsp,32);
    /* 1037 b */ ret();
    $LFE51.set();
    $leaf_result.set();
    $LFB52.set();
    /* 1038 b */ endbr64();
    /* 1039 b */ mov(QWORD,PTR,-40[rsp],rdi);
    /* 1040 b */ mov(BYTE,PTR,-4[rsp],0);
    /* 1041 b */ mov(DWORD,PTR,-8[rsp],0);
    /* 1042 b */ mov(eax,DWORD,PTR,-8[rsp]);
    /* 1043 b */ mov(DWORD,PTR,-12[rsp],eax);
    /* 1044 b */ mov(eax,DWORD,PTR,-12[rsp]);
    /* 1045 b */ mov(DWORD,PTR,-16[rsp],eax);
    /* 1046 b */ mov(eax,DWORD,PTR,-16[rsp]);
    /* 1047 b */ mov(DWORD,PTR,-20[rsp],eax);
    /* 1048 b */ mov(rax,QWORD,PTR,-40[rsp]);
    /* 1049 b */ mov(rdx,QWORD,PTR,-20[rsp]);
    /* 1050 b */ mov(QWORD,PTR,[rax],rdx);
    /* 1051 b */ mov(rdx,QWORD,PTR,-12[rsp]);
    /* 1052 b */ mov(QWORD,PTR,8[rax],rdx);
    /* 1053 b */ mov(edx,DWORD,PTR,-4[rsp]);
    /* 1054 b */ mov(DWORD,PTR,16[rax],edx);
    /* 1055 b */ mov(rax,QWORD,PTR,-40[rsp]);
    /* 1056 b */ ret();
    $LFE52.set();
    $leaf_pop.set();
    $LFB53.set();
    /* 1057 b */ endbr64();
    /* 1058 b */ sub(rsp,56);
    /* 1059 b */ mov(QWORD,PTR,8[rsp],rdi);
    /* 1060 b */ mov(QWORD,PTR,[rsp],rsi);
    /* 1061 b */ mov(rax,QWORD,PTR,fs:40);
    /* 1062 b */ mov(QWORD,PTR,40[rsp],rax);
    /* 1063 b */ xor(eax,eax);
    /* 1064 b */ lea(rax,20[rsp]);
    /* 1065 b */ mov(rdi,rax);
    /* 1066 b */ mov(eax,0);
    /* 1067 Y */ call($leaf_result);
    /* 1068 b */ mov(rax,QWORD,PTR,[rsp]);
    /* 1069 b */ mov(rdi,rax);
    /* 1070 Y */ call($leaf_dec);
    /* 1071 b */ mov(rax,QWORD,PTR,[rsp]);
    /* 1072 b */ mov(rdi,rax);
    /* 1073 Y */ call($leaf_size);
    /* 1074 b */ mov(DWORD,PTR,28[rsp],eax);
    /* 1075 b */ mov(edx,DWORD,PTR,28[rsp]);
    /* 1076 b */ mov(rax,QWORD,PTR,[rsp]);
    /* 1077 b */ mov(esi,edx);
    /* 1078 b */ mov(rdi,rax);
    /* 1079 Y */ call($leaf_key);
    /* 1080 b */ mov(DWORD,PTR,32[rsp],eax);
    /* 1081 b */ mov(edx,DWORD,PTR,28[rsp]);
    /* 1082 b */ mov(rax,QWORD,PTR,[rsp]);
    /* 1083 b */ mov(esi,edx);
    /* 1084 b */ mov(rdi,rax);
    /* 1085 Y */ call($leaf_data);
    /* 1086 b */ mov(BYTE,PTR,36[rsp],al);
    /* 1087 b */ mov(rax,QWORD,PTR,8[rsp]);
    /* 1088 b */ mov(rdx,QWORD,PTR,20[rsp]);
    /* 1089 b */ mov(QWORD,PTR,[rax],rdx);
    /* 1090 b */ mov(rdx,QWORD,PTR,28[rsp]);
    /* 1091 b */ mov(QWORD,PTR,8[rax],rdx);
    /* 1092 b */ mov(edx,DWORD,PTR,36[rsp]);
    /* 1093 b */ mov(DWORD,PTR,16[rax],edx);
    /* 1094 b */ mov(rax,QWORD,PTR,40[rsp]);
    /* 1095 b */ sub(rax,QWORD,PTR,fs:40);
    /* 1096 X */ je($L109);
    /* 1097 Y */ call($__stack_chk_fail@PLT);
    $L109.set();
    /* 1098 b */ mov(rax,QWORD,PTR,8[rsp]);
    /* 1099 b */ add(rsp,56);
    /* 1100 b */ ret();
    $LFE53.set();
    $leaf_shift.set();
    $LFB54.set();
    /* 1101 b */ endbr64();
    /* 1102 b */ sub(rsp,72);
    /* 1103 b */ mov(QWORD,PTR,8[rsp],rdi);
    /* 1104 b */ mov(QWORD,PTR,[rsp],rsi);
    /* 1105 b */ mov(rax,QWORD,PTR,fs:40);
    /* 1106 b */ mov(QWORD,PTR,56[rsp],rax);
    /* 1107 b */ xor(eax,eax);
    /* 1108 b */ lea(rax,36[rsp]);
    /* 1109 b */ mov(rdi,rax);
    /* 1110 b */ mov(eax,0);
    /* 1111 Y */ call($leaf_result);
    /* 1112 b */ mov(rax,QWORD,PTR,[rsp]);
    /* 1113 b */ mov(esi,0);
    /* 1114 b */ mov(rdi,rax);
    /* 1115 Y */ call($leaf_key);
    /* 1116 b */ mov(DWORD,PTR,48[rsp],eax);
    /* 1117 b */ mov(rax,QWORD,PTR,[rsp]);
    /* 1118 b */ mov(esi,0);
    /* 1119 b */ mov(rdi,rax);
    /* 1120 Y */ call($leaf_data);
    /* 1121 b */ mov(BYTE,PTR,52[rsp],al);
    /* 1122 b */ mov(DWORD,PTR,28[rsp],0);
    /* 1123 b */ mov(rax,QWORD,PTR,[rsp]);
    /* 1124 b */ mov(rdi,rax);
    /* 1125 Y */ call($leaf_size);
    /* 1126 b */ sub(eax,1);
    /* 1127 b */ mov(DWORD,PTR,32[rsp],eax);
    /* 1128 X */ jmp($L111);
    $L112.set();
    /* 1129 b */ mov(eax,DWORD,PTR,28[rsp]);
    /* 1130 b */ lea(edx,1[rax]);
    /* 1131 b */ mov(ecx,DWORD,PTR,28[rsp]);
    /* 1132 b */ mov(rax,QWORD,PTR,[rsp]);
    /* 1133 b */ mov(esi,ecx);
    /* 1134 b */ mov(rdi,rax);
    /* 1135 Y */ call($leaf_copyKeyData);
    /* 1136 b */ add(DWORD,PTR,28[rsp],1);
    $L111.set();
    /* 1137 b */ mov(eax,DWORD,PTR,28[rsp]);
    /* 1138 b */ cmp(eax,DWORD,PTR,32[rsp]);
    /* 1139 X */ jl($L112);
    /* 1140 b */ mov(rax,QWORD,PTR,[rsp]);
    /* 1141 b */ mov(rdi,rax);
    /* 1142 Y */ call($leaf_dec);
    /* 1143 b */ mov(rax,QWORD,PTR,8[rsp]);
    /* 1144 b */ mov(rdx,QWORD,PTR,36[rsp]);
    /* 1145 b */ mov(QWORD,PTR,[rax],rdx);
    /* 1146 b */ mov(rdx,QWORD,PTR,44[rsp]);
    /* 1147 b */ mov(QWORD,PTR,8[rax],rdx);
    /* 1148 b */ mov(edx,DWORD,PTR,52[rsp]);
    /* 1149 b */ mov(DWORD,PTR,16[rax],edx);
    /* 1150 b */ mov(rax,QWORD,PTR,56[rsp]);
    /* 1151 b */ sub(rax,QWORD,PTR,fs:40);
    /* 1152 X */ je($L114);
    /* 1153 Y */ call($__stack_chk_fail@PLT);
    $L114.set();
    /* 1154 b */ mov(rax,QWORD,PTR,8[rsp]);
    /* 1155 b */ add(rsp,72);
    /* 1156 b */ ret();
    $LFE54.set();
    $leaf_elementAt.set();
    $LFB55.set();
    /* 1157 b */ endbr64();
    /* 1158 b */ sub(rsp,72);
    /* 1159 b */ mov(QWORD,PTR,24[rsp],rdi);
    /* 1160 b */ mov(QWORD,PTR,16[rsp],rsi);
    /* 1161 b */ mov(DWORD,PTR,12[rsp],edx);
    /* 1162 b */ mov(rax,QWORD,PTR,fs:40);
    /* 1163 b */ mov(QWORD,PTR,56[rsp],rax);
    /* 1164 b */ xor(eax,eax);
    /* 1165 b */ lea(rax,36[rsp]);
    /* 1166 b */ mov(rdi,rax);
    /* 1167 b */ mov(eax,0);
    /* 1168 Y */ call($leaf_result);
    /* 1169 b */ mov(eax,DWORD,PTR,12[rsp]);
    /* 1170 b */ mov(DWORD,PTR,44[rsp],eax);
    /* 1171 b */ mov(edx,DWORD,PTR,12[rsp]);
    /* 1172 b */ mov(rax,QWORD,PTR,16[rsp]);
    /* 1173 b */ mov(esi,edx);
    /* 1174 b */ mov(rdi,rax);
    /* 1175 Y */ call($leaf_key);
    /* 1176 b */ mov(DWORD,PTR,48[rsp],eax);
    /* 1177 b */ mov(edx,DWORD,PTR,12[rsp]);
    /* 1178 b */ mov(rax,QWORD,PTR,16[rsp]);
    /* 1179 b */ mov(esi,edx);
    /* 1180 b */ mov(rdi,rax);
    /* 1181 Y */ call($leaf_data);
    /* 1182 b */ mov(BYTE,PTR,52[rsp],al);
    /* 1183 b */ mov(rax,QWORD,PTR,24[rsp]);
    /* 1184 b */ mov(rdx,QWORD,PTR,36[rsp]);
    /* 1185 b */ mov(QWORD,PTR,[rax],rdx);
    /* 1186 b */ mov(rdx,QWORD,PTR,44[rsp]);
    /* 1187 b */ mov(QWORD,PTR,8[rax],rdx);
    /* 1188 b */ mov(edx,DWORD,PTR,52[rsp]);
    /* 1189 b */ mov(DWORD,PTR,16[rax],edx);
    /* 1190 b */ mov(rax,QWORD,PTR,56[rsp]);
    /* 1191 b */ sub(rax,QWORD,PTR,fs:40);
    /* 1192 X */ je($L117);
    /* 1193 Y */ call($__stack_chk_fail@PLT);
    $L117.set();
    /* 1194 b */ mov(rax,QWORD,PTR,24[rsp]);
    /* 1195 b */ add(rsp,72);
    /* 1196 b */ ret();
    $LFE55.set();
    $leaf_setElementAt.set();
    $LFB56.set();
    /* 1197 b */ endbr64();
    /* 1198 b */ sub(rsp,24);
    /* 1199 b */ mov(QWORD,PTR,16[rsp],rdi);
    /* 1200 b */ mov(DWORD,PTR,12[rsp],esi);
    /* 1201 b */ mov(DWORD,PTR,8[rsp],edx);
    /* 1202 b */ mov(DWORD,PTR,4[rsp],ecx);
    /* 1203 b */ mov(rax,QWORD,PTR,16[rsp]);
    /* 1204 b */ mov(rdi,rax);
    /* 1205 Y */ call($leaf_size);
    /* 1206 b */ cmp(DWORD,PTR,4[rsp],eax);
    /* 1207 X */ jne($L119);
    /* 1208 b */ mov(ecx,DWORD,PTR,8[rsp]);
    /* 1209 b */ mov(edx,DWORD,PTR,12[rsp]);
    /* 1210 b */ mov(esi,DWORD,PTR,4[rsp]);
    /* 1211 b */ mov(rax,QWORD,PTR,16[rsp]);
    /* 1212 b */ mov(rdi,rax);
    /* 1213 Y */ call($leaf_setKeyData);
    /* 1214 b */ mov(rax,QWORD,PTR,16[rsp]);
    /* 1215 b */ mov(rdi,rax);
    /* 1216 Y */ call($leaf_inc);
    /* 1217 X */ jmp($L121);
    $L119.set();
    /* 1218 b */ mov(ecx,DWORD,PTR,8[rsp]);
    /* 1219 b */ mov(edx,DWORD,PTR,12[rsp]);
    /* 1220 b */ mov(esi,DWORD,PTR,4[rsp]);
    /* 1221 b */ mov(rax,QWORD,PTR,16[rsp]);
    /* 1222 b */ mov(rdi,rax);
    /* 1223 Y */ call($leaf_setKeyData);
    $L121.set();
    /* 1224 b */ nop();
    /* 1225 b */ add(rsp,24);
    /* 1226 b */ ret();
    $LFE56.set();
    $leaf_insertElementAt.set();
    $LFB57.set();
    /* 1227 b */ endbr64();
    /* 1228 b */ sub(rsp,40);
    /* 1229 b */ mov(QWORD,PTR,16[rsp],rdi);
    /* 1230 b */ mov(DWORD,PTR,12[rsp],esi);
    /* 1231 b */ mov(DWORD,PTR,8[rsp],edx);
    /* 1232 b */ mov(DWORD,PTR,4[rsp],ecx);
    /* 1233 b */ mov(rax,QWORD,PTR,16[rsp]);
    /* 1234 b */ mov(rdi,rax);
    /* 1235 Y */ call($leaf_size);
    /* 1236 b */ mov(DWORD,PTR,36[rsp],eax);
    /* 1237 X */ jmp($L123);
    $L124.set();
    /* 1238 b */ mov(eax,DWORD,PTR,36[rsp]);
    /* 1239 b */ lea(edx,-1[rax]);
    /* 1240 b */ mov(ecx,DWORD,PTR,36[rsp]);
    /* 1241 b */ mov(rax,QWORD,PTR,16[rsp]);
    /* 1242 b */ mov(esi,ecx);
    /* 1243 b */ mov(rdi,rax);
    /* 1244 Y */ call($leaf_copyKeyData);
    /* 1245 b */ sub(DWORD,PTR,36[rsp],1);
    $L123.set();
    /* 1246 b */ mov(eax,DWORD,PTR,36[rsp]);
    /* 1247 b */ cmp(eax,DWORD,PTR,4[rsp]);
    /* 1248 X */ jg($L124);
    /* 1249 b */ mov(ecx,DWORD,PTR,8[rsp]);
    /* 1250 b */ mov(edx,DWORD,PTR,12[rsp]);
    /* 1251 b */ mov(esi,DWORD,PTR,4[rsp]);
    /* 1252 b */ mov(rax,QWORD,PTR,16[rsp]);
    /* 1253 b */ mov(rdi,rax);
    /* 1254 Y */ call($leaf_setKeyData);
    /* 1255 b */ mov(rax,QWORD,PTR,16[rsp]);
    /* 1256 b */ mov(rdi,rax);
    /* 1257 Y */ call($leaf_inc);
    /* 1258 b */ nop();
    /* 1259 b */ add(rsp,40);
    /* 1260 b */ ret();
    $LFE57.set();
    $leaf_removeElementAt.set();
    $LFB58.set();
    /* 1261 b */ endbr64();
    /* 1262 b */ sub(rsp,88);
    /* 1263 b */ mov(QWORD,PTR,24[rsp],rdi);
    /* 1264 b */ mov(QWORD,PTR,16[rsp],rsi);
    /* 1265 b */ mov(DWORD,PTR,12[rsp],edx);
    /* 1266 b */ mov(rax,QWORD,PTR,fs:40);
    /* 1267 b */ mov(QWORD,PTR,72[rsp],rax);
    /* 1268 b */ xor(eax,eax);
    /* 1269 b */ lea(rax,52[rsp]);
    /* 1270 b */ mov(rdi,rax);
    /* 1271 b */ mov(eax,0);
    /* 1272 Y */ call($leaf_result);
    /* 1273 b */ mov(eax,DWORD,PTR,12[rsp]);
    /* 1274 b */ mov(DWORD,PTR,60[rsp],eax);
    /* 1275 b */ mov(edx,DWORD,PTR,12[rsp]);
    /* 1276 b */ mov(rax,QWORD,PTR,16[rsp]);
    /* 1277 b */ mov(esi,edx);
    /* 1278 b */ mov(rdi,rax);
    /* 1279 Y */ call($leaf_key);
    /* 1280 b */ mov(DWORD,PTR,64[rsp],eax);
    /* 1281 b */ mov(edx,DWORD,PTR,12[rsp]);
    /* 1282 b */ mov(rax,QWORD,PTR,16[rsp]);
    /* 1283 b */ mov(esi,edx);
    /* 1284 b */ mov(rdi,rax);
    /* 1285 Y */ call($leaf_data);
    /* 1286 b */ mov(BYTE,PTR,68[rsp],al);
    /* 1287 b */ mov(eax,DWORD,PTR,12[rsp]);
    /* 1288 b */ mov(DWORD,PTR,44[rsp],eax);
    /* 1289 b */ mov(rax,QWORD,PTR,16[rsp]);
    /* 1290 b */ mov(rdi,rax);
    /* 1291 Y */ call($leaf_size);
    /* 1292 b */ sub(eax,1);
    /* 1293 b */ mov(DWORD,PTR,48[rsp],eax);
    /* 1294 X */ jmp($L126);
    $L127.set();
    /* 1295 b */ mov(eax,DWORD,PTR,44[rsp]);
    /* 1296 b */ lea(edx,1[rax]);
    /* 1297 b */ mov(ecx,DWORD,PTR,44[rsp]);
    /* 1298 b */ mov(rax,QWORD,PTR,16[rsp]);
    /* 1299 b */ mov(esi,ecx);
    /* 1300 b */ mov(rdi,rax);
    /* 1301 Y */ call($leaf_copyKeyData);
    /* 1302 b */ add(DWORD,PTR,44[rsp],1);
    $L126.set();
    /* 1303 b */ mov(eax,DWORD,PTR,44[rsp]);
    /* 1304 b */ cmp(eax,DWORD,PTR,48[rsp]);
    /* 1305 X */ jl($L127);
    /* 1306 b */ mov(rax,QWORD,PTR,16[rsp]);
    /* 1307 b */ mov(rdi,rax);
    /* 1308 Y */ call($leaf_dec);
    /* 1309 b */ mov(rax,QWORD,PTR,24[rsp]);
    /* 1310 b */ mov(rdx,QWORD,PTR,52[rsp]);
    /* 1311 b */ mov(QWORD,PTR,[rax],rdx);
    /* 1312 b */ mov(rdx,QWORD,PTR,60[rsp]);
    /* 1313 b */ mov(QWORD,PTR,8[rax],rdx);
    /* 1314 b */ mov(edx,DWORD,PTR,68[rsp]);
    /* 1315 b */ mov(DWORD,PTR,16[rax],edx);
    /* 1316 b */ mov(rax,QWORD,PTR,72[rsp]);
    /* 1317 b */ sub(rax,QWORD,PTR,fs:40);
    /* 1318 X */ je($L129);
    /* 1319 Y */ call($__stack_chk_fail@PLT);
    $L129.set();
    /* 1320 b */ mov(rax,QWORD,PTR,24[rsp]);
    /* 1321 b */ add(rsp,88);
    /* 1322 b */ ret();
    $LFE58.set();
    $leaf_firstElement.set();
    $LFB59.set();
    /* 1323 b */ endbr64();
    /* 1324 b */ sub(rsp,56);
    /* 1325 b */ mov(QWORD,PTR,8[rsp],rdi);
    /* 1326 b */ mov(QWORD,PTR,[rsp],rsi);
    /* 1327 b */ mov(rax,QWORD,PTR,fs:40);
    /* 1328 b */ mov(QWORD,PTR,40[rsp],rax);
    /* 1329 b */ xor(eax,eax);
    /* 1330 b */ lea(rax,20[rsp]);
    /* 1331 b */ mov(rdi,rax);
    /* 1332 b */ mov(eax,0);
    /* 1333 Y */ call($leaf_result);
    /* 1334 b */ mov(rax,QWORD,PTR,[rsp]);
    /* 1335 b */ mov(rdi,rax);
    /* 1336 Y */ call($leaf_isEmpty);
    /* 1337 b */ test(eax,eax);
    /* 1338 b */ sete(al);
    /* 1339 b */ movzx(eax,al);
    /* 1340 b */ mov(DWORD,PTR,24[rsp],eax);
    /* 1341 b */ mov(eax,DWORD,PTR,24[rsp]);
    /* 1342 b */ test(eax,eax);
    /* 1343 X */ je($L131);
    /* 1344 b */ mov(DWORD,PTR,28[rsp],0);
    /* 1345 b */ mov(rax,QWORD,PTR,[rsp]);
    /* 1346 b */ mov(esi,0);
    /* 1347 b */ mov(rdi,rax);
    /* 1348 Y */ call($leaf_key);
    /* 1349 b */ mov(DWORD,PTR,32[rsp],eax);
    /* 1350 b */ mov(rax,QWORD,PTR,[rsp]);
    /* 1351 b */ mov(esi,0);
    /* 1352 b */ mov(rdi,rax);
    /* 1353 Y */ call($leaf_data);
    /* 1354 b */ mov(BYTE,PTR,36[rsp],al);
    $L131.set();
    /* 1355 b */ mov(rax,QWORD,PTR,8[rsp]);
    /* 1356 b */ mov(rdx,QWORD,PTR,20[rsp]);
    /* 1357 b */ mov(QWORD,PTR,[rax],rdx);
    /* 1358 b */ mov(rdx,QWORD,PTR,28[rsp]);
    /* 1359 b */ mov(QWORD,PTR,8[rax],rdx);
    /* 1360 b */ mov(edx,DWORD,PTR,36[rsp]);
    /* 1361 b */ mov(DWORD,PTR,16[rax],edx);
    /* 1362 b */ mov(rax,QWORD,PTR,40[rsp]);
    /* 1363 b */ sub(rax,QWORD,PTR,fs:40);
    /* 1364 X */ je($L133);
    /* 1365 Y */ call($__stack_chk_fail@PLT);
    $L133.set();
    /* 1366 b */ mov(rax,QWORD,PTR,8[rsp]);
    /* 1367 b */ add(rsp,56);
    /* 1368 b */ ret();
    $LFE59.set();
    $leaf_lastElement.set();
    $LFB60.set();
    /* 1369 b */ endbr64();
    /* 1370 b */ sub(rsp,56);
    /* 1371 b */ mov(QWORD,PTR,8[rsp],rdi);
    /* 1372 b */ mov(QWORD,PTR,[rsp],rsi);
    /* 1373 b */ mov(rax,QWORD,PTR,fs:40);
    /* 1374 b */ mov(QWORD,PTR,40[rsp],rax);
    /* 1375 b */ xor(eax,eax);
    /* 1376 b */ lea(rax,20[rsp]);
    /* 1377 b */ mov(rdi,rax);
    /* 1378 b */ mov(eax,0);
    /* 1379 Y */ call($leaf_result);
    /* 1380 b */ mov(rax,QWORD,PTR,[rsp]);
    /* 1381 b */ mov(rdi,rax);
    /* 1382 Y */ call($leaf_isEmpty);
    /* 1383 b */ test(eax,eax);
    /* 1384 b */ sete(al);
    /* 1385 b */ movzx(eax,al);
    /* 1386 b */ mov(DWORD,PTR,24[rsp],eax);
    /* 1387 b */ mov(rax,QWORD,PTR,[rsp]);
    /* 1388 b */ mov(rdi,rax);
    /* 1389 Y */ call($leaf_size);
    /* 1390 b */ sub(eax,1);
    /* 1391 b */ mov(DWORD,PTR,16[rsp],eax);
    /* 1392 b */ mov(eax,DWORD,PTR,24[rsp]);
    /* 1393 b */ test(eax,eax);
    /* 1394 X */ je($L135);
    /* 1395 b */ mov(eax,DWORD,PTR,16[rsp]);
    /* 1396 b */ mov(DWORD,PTR,28[rsp],eax);
    /* 1397 b */ mov(edx,DWORD,PTR,16[rsp]);
    /* 1398 b */ mov(rax,QWORD,PTR,[rsp]);
    /* 1399 b */ mov(esi,edx);
    /* 1400 b */ mov(rdi,rax);
    /* 1401 Y */ call($leaf_key);
    /* 1402 b */ mov(DWORD,PTR,32[rsp],eax);
    /* 1403 b */ mov(edx,DWORD,PTR,16[rsp]);
    /* 1404 b */ mov(rax,QWORD,PTR,[rsp]);
    /* 1405 b */ mov(esi,edx);
    /* 1406 b */ mov(rdi,rax);
    /* 1407 Y */ call($leaf_data);
    /* 1408 b */ mov(BYTE,PTR,36[rsp],al);
    $L135.set();
    /* 1409 b */ mov(rax,QWORD,PTR,8[rsp]);
    /* 1410 b */ mov(rdx,QWORD,PTR,20[rsp]);
    /* 1411 b */ mov(QWORD,PTR,[rax],rdx);
    /* 1412 b */ mov(rdx,QWORD,PTR,28[rsp]);
    /* 1413 b */ mov(QWORD,PTR,8[rax],rdx);
    /* 1414 b */ mov(edx,DWORD,PTR,36[rsp]);
    /* 1415 b */ mov(DWORD,PTR,16[rax],edx);
    /* 1416 b */ mov(rax,QWORD,PTR,40[rsp]);
    /* 1417 b */ sub(rax,QWORD,PTR,fs:40);
    /* 1418 X */ je($L137);
    /* 1419 Y */ call($__stack_chk_fail@PLT);
    $L137.set();
    /* 1420 b */ mov(rax,QWORD,PTR,8[rsp]);
    /* 1421 b */ add(rsp,56);
    /* 1422 b */ ret();
    $LFE60.set();
    $leaf_search.set();
    $LFB61.set();
    /* 1423 b */ endbr64();
    /* 1424 b */ sub(rsp,88);
    /* 1425 b */ mov(QWORD,PTR,24[rsp],rdi);
    /* 1426 b */ mov(QWORD,PTR,16[rsp],rsi);
    /* 1427 b */ mov(DWORD,PTR,12[rsp],edx);
    /* 1428 b */ mov(rax,QWORD,PTR,fs:40);
    /* 1429 b */ mov(QWORD,PTR,72[rsp],rax);
    /* 1430 b */ xor(eax,eax);
    /* 1431 b */ lea(rax,52[rsp]);
    /* 1432 b */ mov(rdi,rax);
    /* 1433 b */ mov(eax,0);
    /* 1434 Y */ call($leaf_result);
    /* 1435 b */ mov(eax,DWORD,PTR,12[rsp]);
    /* 1436 b */ mov(DWORD,PTR,64[rsp],eax);
    /* 1437 b */ mov(DWORD,PTR,44[rsp],0);
    /* 1438 b */ mov(rax,QWORD,PTR,16[rsp]);
    /* 1439 b */ mov(rdi,rax);
    /* 1440 Y */ call($leaf_size);
    /* 1441 b */ mov(DWORD,PTR,48[rsp],eax);
    /* 1442 X */ jmp($L139);
    $L142.set();
    /* 1443 b */ mov(edx,DWORD,PTR,44[rsp]);
    /* 1444 b */ mov(rax,QWORD,PTR,16[rsp]);
    /* 1445 b */ mov(esi,edx);
    /* 1446 b */ mov(rdi,rax);
    /* 1447 Y */ call($leaf_key);
    /* 1448 b */ cmp(DWORD,PTR,12[rsp],eax);
    /* 1449 X */ jne($L140);
    /* 1450 b */ mov(DWORD,PTR,56[rsp],1);
    /* 1451 b */ mov(eax,DWORD,PTR,44[rsp]);
    /* 1452 b */ mov(DWORD,PTR,60[rsp],eax);
    /* 1453 b */ mov(edx,DWORD,PTR,44[rsp]);
    /* 1454 b */ mov(rax,QWORD,PTR,16[rsp]);
    /* 1455 b */ mov(esi,edx);
    /* 1456 b */ mov(rdi,rax);
    /* 1457 Y */ call($leaf_data);
    /* 1458 b */ mov(BYTE,PTR,68[rsp],al);
    /* 1459 b */ mov(rax,QWORD,PTR,24[rsp]);
    /* 1460 b */ mov(rdx,QWORD,PTR,52[rsp]);
    /* 1461 b */ mov(QWORD,PTR,[rax],rdx);
    /* 1462 b */ mov(rdx,QWORD,PTR,60[rsp]);
    /* 1463 b */ mov(QWORD,PTR,8[rax],rdx);
    /* 1464 b */ mov(edx,DWORD,PTR,68[rsp]);
    /* 1465 b */ mov(DWORD,PTR,16[rax],edx);
    /* 1466 X */ jmp($L143);
    $L140.set();
    /* 1467 b */ add(DWORD,PTR,44[rsp],1);
    $L139.set();
    /* 1468 b */ mov(eax,DWORD,PTR,44[rsp]);
    /* 1469 b */ cmp(eax,DWORD,PTR,48[rsp]);
    /* 1470 X */ jl($L142);
    /* 1471 b */ mov(DWORD,PTR,56[rsp],0);
    /* 1472 b */ mov(rax,QWORD,PTR,24[rsp]);
    /* 1473 b */ mov(rdx,QWORD,PTR,52[rsp]);
    /* 1474 b */ mov(QWORD,PTR,[rax],rdx);
    /* 1475 b */ mov(rdx,QWORD,PTR,60[rsp]);
    /* 1476 b */ mov(QWORD,PTR,8[rax],rdx);
    /* 1477 b */ mov(edx,DWORD,PTR,68[rsp]);
    /* 1478 b */ mov(DWORD,PTR,16[rax],edx);
    $L143.set();
    /* 1479 b */ mov(rax,QWORD,PTR,72[rsp]);
    /* 1480 b */ sub(rax,QWORD,PTR,fs:40);
    /* 1481 X */ je($L144);
    /* 1482 Y */ call($__stack_chk_fail@PLT);
    $L144.set();
    /* 1483 b */ mov(rax,QWORD,PTR,24[rsp]);
    /* 1484 b */ add(rsp,88);
    /* 1485 b */ ret();
    $LFE61.set();
    $leaf_searchFirstGreaterThanOrEqual.set();
    $LFB62.set();
    /* 1486 b */ endbr64();
    /* 1487 b */ sub(rsp,88);
    /* 1488 b */ mov(QWORD,PTR,24[rsp],rdi);
    /* 1489 b */ mov(QWORD,PTR,16[rsp],rsi);
    /* 1490 b */ mov(DWORD,PTR,12[rsp],edx);
    /* 1491 b */ mov(rax,QWORD,PTR,fs:40);
    /* 1492 b */ mov(QWORD,PTR,72[rsp],rax);
    /* 1493 b */ xor(eax,eax);
    /* 1494 b */ lea(rax,52[rsp]);
    /* 1495 b */ mov(rdi,rax);
    /* 1496 b */ mov(eax,0);
    /* 1497 Y */ call($leaf_result);
    /* 1498 b */ mov(eax,DWORD,PTR,12[rsp]);
    /* 1499 b */ mov(DWORD,PTR,52[rsp],eax);
    /* 1500 b */ mov(DWORD,PTR,44[rsp],0);
    /* 1501 b */ mov(rax,QWORD,PTR,16[rsp]);
    /* 1502 b */ mov(rdi,rax);
    /* 1503 Y */ call($leaf_size);
    /* 1504 b */ mov(DWORD,PTR,48[rsp],eax);
    /* 1505 X */ jmp($L146);
    $L149.set();
    /* 1506 b */ mov(edx,DWORD,PTR,44[rsp]);
    /* 1507 b */ mov(rax,QWORD,PTR,16[rsp]);
    /* 1508 b */ mov(esi,edx);
    /* 1509 b */ mov(rdi,rax);
    /* 1510 Y */ call($leaf_key);
    /* 1511 b */ cmp(DWORD,PTR,12[rsp],eax);
    /* 1512 X */ jg($L147);
    /* 1513 b */ mov(DWORD,PTR,56[rsp],1);
    /* 1514 b */ mov(eax,DWORD,PTR,44[rsp]);
    /* 1515 b */ mov(DWORD,PTR,60[rsp],eax);
    /* 1516 b */ mov(edx,DWORD,PTR,44[rsp]);
    /* 1517 b */ mov(rax,QWORD,PTR,16[rsp]);
    /* 1518 b */ mov(esi,edx);
    /* 1519 b */ mov(rdi,rax);
    /* 1520 Y */ call($leaf_key);
    /* 1521 b */ mov(DWORD,PTR,64[rsp],eax);
    /* 1522 b */ mov(edx,DWORD,PTR,44[rsp]);
    /* 1523 b */ mov(rax,QWORD,PTR,16[rsp]);
    /* 1524 b */ mov(esi,edx);
    /* 1525 b */ mov(rdi,rax);
    /* 1526 Y */ call($leaf_data);
    /* 1527 b */ mov(BYTE,PTR,68[rsp],al);
    /* 1528 b */ mov(rax,QWORD,PTR,24[rsp]);
    /* 1529 b */ mov(rdx,QWORD,PTR,52[rsp]);
    /* 1530 b */ mov(QWORD,PTR,[rax],rdx);
    /* 1531 b */ mov(rdx,QWORD,PTR,60[rsp]);
    /* 1532 b */ mov(QWORD,PTR,8[rax],rdx);
    /* 1533 b */ mov(edx,DWORD,PTR,68[rsp]);
    /* 1534 b */ mov(DWORD,PTR,16[rax],edx);
    /* 1535 X */ jmp($L150);
    $L147.set();
    /* 1536 b */ add(DWORD,PTR,44[rsp],1);
    $L146.set();
    /* 1537 b */ mov(eax,DWORD,PTR,44[rsp]);
    /* 1538 b */ cmp(eax,DWORD,PTR,48[rsp]);
    /* 1539 X */ jl($L149);
    /* 1540 b */ mov(DWORD,PTR,56[rsp],0);
    /* 1541 b */ mov(rax,QWORD,PTR,24[rsp]);
    /* 1542 b */ mov(rdx,QWORD,PTR,52[rsp]);
    /* 1543 b */ mov(QWORD,PTR,[rax],rdx);
    /* 1544 b */ mov(rdx,QWORD,PTR,60[rsp]);
    /* 1545 b */ mov(QWORD,PTR,8[rax],rdx);
    /* 1546 b */ mov(edx,DWORD,PTR,68[rsp]);
    /* 1547 b */ mov(DWORD,PTR,16[rax],edx);
    $L150.set();
    /* 1548 b */ mov(rax,QWORD,PTR,72[rsp]);
    /* 1549 b */ sub(rax,QWORD,PTR,fs:40);
    /* 1550 X */ je($L151);
    /* 1551 Y */ call($__stack_chk_fail@PLT);
    $L151.set();
    /* 1552 b */ mov(rax,QWORD,PTR,24[rsp]);
    /* 1553 b */ add(rsp,88);
    /* 1554 b */ ret();
    $LFE62.set();
    $leaf_searchFirstGreaterThanOrEqualExceptLast.set();
    $LFB63.set();
    /* 1555 b */ endbr64();
    /* 1556 b */ sub(rsp,88);
    /* 1557 b */ mov(QWORD,PTR,24[rsp],rdi);
    /* 1558 b */ mov(QWORD,PTR,16[rsp],rsi);
    /* 1559 b */ mov(DWORD,PTR,12[rsp],edx);
    /* 1560 b */ mov(rax,QWORD,PTR,fs:40);
    /* 1561 b */ mov(QWORD,PTR,72[rsp],rax);
    /* 1562 b */ xor(eax,eax);
    /* 1563 b */ lea(rax,52[rsp]);
    /* 1564 b */ mov(rdi,rax);
    /* 1565 b */ mov(eax,0);
    /* 1566 Y */ call($leaf_result);
    /* 1567 b */ mov(eax,DWORD,PTR,12[rsp]);
    /* 1568 b */ mov(DWORD,PTR,52[rsp],eax);
    /* 1569 b */ mov(rax,QWORD,PTR,16[rsp]);
    /* 1570 b */ mov(rdi,rax);
    /* 1571 Y */ call($leaf_size);
    /* 1572 b */ sub(eax,1);
    /* 1573 b */ mov(DWORD,PTR,44[rsp],eax);
    /* 1574 b */ mov(DWORD,PTR,40[rsp],0);
    /* 1575 b */ mov(eax,DWORD,PTR,44[rsp]);
    /* 1576 b */ mov(DWORD,PTR,48[rsp],eax);
    /* 1577 X */ jmp($L153);
    $L156.set();
    /* 1578 b */ mov(edx,DWORD,PTR,40[rsp]);
    /* 1579 b */ mov(rax,QWORD,PTR,16[rsp]);
    /* 1580 b */ mov(esi,edx);
    /* 1581 b */ mov(rdi,rax);
    /* 1582 Y */ call($leaf_key);
    /* 1583 b */ cmp(DWORD,PTR,12[rsp],eax);
    /* 1584 X */ jg($L154);
    /* 1585 b */ mov(DWORD,PTR,56[rsp],1);
    /* 1586 b */ mov(eax,DWORD,PTR,40[rsp]);
    /* 1587 b */ mov(DWORD,PTR,60[rsp],eax);
    /* 1588 b */ mov(edx,DWORD,PTR,40[rsp]);
    /* 1589 b */ mov(rax,QWORD,PTR,16[rsp]);
    /* 1590 b */ mov(esi,edx);
    /* 1591 b */ mov(rdi,rax);
    /* 1592 Y */ call($leaf_key);
    /* 1593 b */ mov(DWORD,PTR,64[rsp],eax);
    /* 1594 b */ mov(edx,DWORD,PTR,40[rsp]);
    /* 1595 b */ mov(rax,QWORD,PTR,16[rsp]);
    /* 1596 b */ mov(esi,edx);
    /* 1597 b */ mov(rdi,rax);
    /* 1598 Y */ call($leaf_data);
    /* 1599 b */ mov(BYTE,PTR,68[rsp],al);
    /* 1600 b */ mov(rax,QWORD,PTR,24[rsp]);
    /* 1601 b */ mov(rdx,QWORD,PTR,52[rsp]);
    /* 1602 b */ mov(QWORD,PTR,[rax],rdx);
    /* 1603 b */ mov(rdx,QWORD,PTR,60[rsp]);
    /* 1604 b */ mov(QWORD,PTR,8[rax],rdx);
    /* 1605 b */ mov(edx,DWORD,PTR,68[rsp]);
    /* 1606 b */ mov(DWORD,PTR,16[rax],edx);
    /* 1607 X */ jmp($L157);
    $L154.set();
    /* 1608 b */ add(DWORD,PTR,40[rsp],1);
    $L153.set();
    /* 1609 b */ mov(eax,DWORD,PTR,40[rsp]);
    /* 1610 b */ cmp(eax,DWORD,PTR,48[rsp]);
    /* 1611 X */ jl($L156);
    /* 1612 b */ mov(DWORD,PTR,56[rsp],1);
    /* 1613 b */ mov(eax,DWORD,PTR,44[rsp]);
    /* 1614 b */ mov(DWORD,PTR,60[rsp],eax);
    /* 1615 b */ mov(DWORD,PTR,64[rsp],0);
    /* 1616 b */ mov(edx,DWORD,PTR,44[rsp]);
    /* 1617 b */ mov(rax,QWORD,PTR,16[rsp]);
    /* 1618 b */ mov(esi,edx);
    /* 1619 b */ mov(rdi,rax);
    /* 1620 Y */ call($leaf_data);
    /* 1621 b */ mov(BYTE,PTR,68[rsp],al);
    /* 1622 b */ mov(rax,QWORD,PTR,24[rsp]);
    /* 1623 b */ mov(rdx,QWORD,PTR,52[rsp]);
    /* 1624 b */ mov(QWORD,PTR,[rax],rdx);
    /* 1625 b */ mov(rdx,QWORD,PTR,60[rsp]);
    /* 1626 b */ mov(QWORD,PTR,8[rax],rdx);
    /* 1627 b */ mov(edx,DWORD,PTR,68[rsp]);
    /* 1628 b */ mov(DWORD,PTR,16[rax],edx);
    $L157.set();
    /* 1629 b */ mov(rax,QWORD,PTR,72[rsp]);
    /* 1630 b */ sub(rax,QWORD,PTR,fs:40);
    /* 1631 X */ je($L158);
    /* 1632 Y */ call($__stack_chk_fail@PLT);
    $L158.set();
    /* 1633 b */ mov(rax,QWORD,PTR,24[rsp]);
    /* 1634 b */ add(rsp,88);
    /* 1635 b */ ret();
    $LFE63.set();
    $debug.set();
    $btree.set();
    $initialize_free_chain.set();
    $LFB64.set();
    /* 1636 b */ endbr64();
    /* 1637 b */ mov(DWORD,PTR,-4[rsp],100);
    /* 1638 X */ jmp($L160);
    $L161.set();
    /* 1639 b */ mov(eax,DWORD,PTR,-4[rsp]);
    /* 1640 b */ lea(edx,-2[rax]);
    /* 1641 b */ mov(eax,DWORD,PTR,-4[rsp]);
    /* 1642 b */ lea(ecx,-1[rax]);
    /* 1643 b */ movsx(rdx,edx);
    /* 1644 b */ mov(rax,rdx);
    /* 1645 b */ sal(rax,2);
    /* 1646 b */ add(rax,rdx);
    /* 1647 b */ add(rax,rax);
    /* 1648 b */ add(rax,rdx);
    /* 1649 b */ sal(rax,2);
    /* 1650 b */ mov(rdx,rax);
    /* 1651 b */ lea(rax,btree[rip+4]);
    /* 1652 b */ mov(DWORD,PTR,[rdx+rax],ecx);
    /* 1653 b */ sub(DWORD,PTR,-4[rsp],1);
    $L160.set();
    /* 1654 b */ cmp(DWORD,PTR,-4[rsp],1);
    /* 1655 X */ jg($L161);
    /* 1656 b */ mov(DWORD,PTR,btree[rip],1);
    /* 1657 b */ mov(DWORD,PTR,btree[rip+4],0);
    /* 1658 b */ nop();
    /* 1659 b */ ret();
    $LFE64.set();
    $create.set();
    $LFB65.set();
    /* 1660 b */ endbr64();
    /* 1661 b */ sub(rsp,24);
    /* 1662 b */ mov(DWORD,PTR,12[rsp],0);
    /* 1663 X */ jmp($L163);
    $L164.set();
    /* 1664 b */ mov(eax,DWORD,PTR,12[rsp]);
    /* 1665 b */ mov(edi,eax);
    /* 1666 Y */ call($clear);
    /* 1667 b */ add(DWORD,PTR,12[rsp],1);
    $L163.set();
    /* 1668 b */ cmp(DWORD,PTR,12[rsp],99);
    /* 1669 X */ jle($L164);
    /* 1670 b */ mov(eax,0);
    /* 1671 Y */ call($initialize_free_chain);
    /* 1672 b */ mov(DWORD,PTR,btree[rip+8],1);
    /* 1673 b */ nop();
    /* 1674 b */ add(rsp,24);
    /* 1675 b */ ret();
    $LFE65.set();
    $allocate.set();
    $LFB66.set();
    /* 1676 b */ endbr64();
    /* 1677 b */ sub(rsp,24);
    /* 1678 b */ mov(eax,DWORD,PTR,btree[rip]);
    /* 1679 b */ mov(DWORD,PTR,12[rsp],eax);
    /* 1680 b */ mov(eax,DWORD,PTR,12[rsp]);
    /* 1681 b */ movsx(rdx,eax);
    /* 1682 b */ mov(rax,rdx);
    /* 1683 b */ sal(rax,2);
    /* 1684 b */ add(rax,rdx);
    /* 1685 b */ add(rax,rax);
    /* 1686 b */ add(rax,rdx);
    /* 1687 b */ sal(rax,2);
    /* 1688 b */ mov(rdx,rax);
    /* 1689 b */ lea(rax,btree[rip+4]);
    /* 1690 b */ mov(eax,DWORD,PTR,[rdx+rax]);
    /* 1691 b */ mov(DWORD,PTR,btree[rip],eax);
    /* 1692 b */ mov(eax,DWORD,PTR,12[rsp]);
    /* 1693 b */ movsx(rdx,eax);
    /* 1694 b */ mov(rax,rdx);
    /* 1695 b */ sal(rax,2);
    /* 1696 b */ add(rax,rdx);
    /* 1697 b */ add(rax,rax);
    /* 1698 b */ add(rax,rdx);
    /* 1699 b */ sal(rax,2);
    /* 1700 b */ mov(rdx,rax);
    /* 1701 b */ lea(rax,btree[rip+4]);
    /* 1702 b */ mov(DWORD,PTR,[rdx+rax],0);
    /* 1703 b */ mov(eax,DWORD,PTR,12[rsp]);
    /* 1704 b */ mov(edi,eax);
    /* 1705 Y */ call($clear);
    /* 1706 b */ mov(eax,DWORD,PTR,12[rsp]);
    /* 1707 b */ add(rsp,24);
    /* 1708 b */ ret();
    $LFE66.set();
    $isLeaf.set();
    $LFB67.set();
    /* 1709 b */ endbr64();
    /* 1710 b */ mov(DWORD,PTR,-4[rsp],edi);
    /* 1711 b */ mov(eax,DWORD,PTR,-4[rsp]);
    /* 1712 b */ movsx(rdx,eax);
    /* 1713 b */ mov(rax,rdx);
    /* 1714 b */ sal(rax,2);
    /* 1715 b */ add(rax,rdx);
    /* 1716 b */ add(rax,rax);
    /* 1717 b */ add(rax,rdx);
    /* 1718 b */ sal(rax,2);
    /* 1719 b */ mov(rdx,rax);
    /* 1720 b */ lea(rax,btree[rip+8]);
    /* 1721 b */ mov(eax,DWORD,PTR,[rdx+rax]);
    /* 1722 b */ ret();
    $LFE67.set();
    $rootIsLeaf.set();
    $LFB68.set();
    /* 1723 b */ endbr64();
    /* 1724 b */ mov(eax,DWORD,PTR,btree[rip+8]);
    /* 1725 b */ ret();
    $LFE68.set();
    $setLeaf.set();
    $LFB69.set();
    /* 1726 b */ endbr64();
    /* 1727 b */ mov(DWORD,PTR,-4[rsp],edi);
    /* 1728 b */ mov(eax,DWORD,PTR,-4[rsp]);
    /* 1729 b */ movsx(rdx,eax);
    /* 1730 b */ mov(rax,rdx);
    /* 1731 b */ sal(rax,2);
    /* 1732 b */ add(rax,rdx);
    /* 1733 b */ add(rax,rax);
    /* 1734 b */ add(rax,rdx);
    /* 1735 b */ sal(rax,2);
    /* 1736 b */ mov(rdx,rax);
    /* 1737 b */ lea(rax,btree[rip+8]);
    /* 1738 b */ mov(DWORD,PTR,[rdx+rax],1);
    /* 1739 b */ nop();
    /* 1740 b */ ret();
    $LFE69.set();
    $setBranch.set();
    $LFB70.set();
    /* 1741 b */ endbr64();
    /* 1742 b */ mov(DWORD,PTR,-4[rsp],edi);
    /* 1743 b */ mov(eax,DWORD,PTR,-4[rsp]);
    /* 1744 b */ movsx(rdx,eax);
    /* 1745 b */ mov(rax,rdx);
    /* 1746 b */ sal(rax,2);
    /* 1747 b */ add(rax,rdx);
    /* 1748 b */ add(rax,rax);
    /* 1749 b */ add(rax,rdx);
    /* 1750 b */ sal(rax,2);
    /* 1751 b */ mov(rdx,rax);
    /* 1752 b */ lea(rax,btree[rip+8]);
    /* 1753 b */ mov(DWORD,PTR,[rdx+rax],0);
    /* 1754 b */ nop();
    /* 1755 b */ ret();
    $LFE70.set();
    $setLeafRoot.set();
    $LFB71.set();
    /* 1756 b */ endbr64();
    /* 1757 b */ mov(DWORD,PTR,btree[rip+8],1);
    /* 1758 b */ nop();
    /* 1759 b */ ret();
    $LFE71.set();
    $setBranchRoot.set();
    $LFB72.set();
    /* 1760 b */ endbr64();
    /* 1761 b */ mov(DWORD,PTR,btree[rip+8],0);
    /* 1762 b */ nop();
    /* 1763 b */ ret();
    $LFE72.set();
    $clear.set();
    $LFB73.set();
    /* 1764 b */ endbr64();
    /* 1765 b */ mov(DWORD,PTR,-36[rsp],edi);
    /* 1766 b */ mov(eax,DWORD,PTR,-36[rsp]);
    /* 1767 b */ movsx(rdx,eax);
    /* 1768 b */ mov(rax,rdx);
    /* 1769 b */ sal(rax,2);
    /* 1770 b */ add(rax,rdx);
    /* 1771 b */ add(rax,rax);
    /* 1772 b */ add(rax,rdx);
    /* 1773 b */ sal(rax,2);
    /* 1774 b */ lea(rdx,btree[rip]);
    /* 1775 b */ add(rax,rdx);
    /* 1776 b */ add(rax,12);
    /* 1777 b */ mov(QWORD,PTR,-8[rsp],rax);
    /* 1778 b */ mov(DWORD,PTR,-20[rsp],16);
    /* 1779 b */ mov(DWORD,PTR,-16[rsp],36);
    /* 1780 b */ mov(edx,DWORD,PTR,-16[rsp]);
    /* 1781 b */ mov(eax,DWORD,PTR,-20[rsp]);
    /* 1782 b */ cmp(edx,eax);
    /* 1783 b */ cmovge(eax,edx);
    /* 1784 b */ mov(DWORD,PTR,-12[rsp],eax);
    /* 1785 b */ mov(DWORD,PTR,-24[rsp],0);
    /* 1786 X */ jmp($L176);
    $L177.set();
    /* 1787 b */ mov(eax,DWORD,PTR,-24[rsp]);
    /* 1788 b */ movsx(rdx,eax);
    /* 1789 b */ mov(rax,QWORD,PTR,-8[rsp]);
    /* 1790 b */ add(rax,rdx);
    /* 1791 b */ mov(BYTE,PTR,[rax],0);
    /* 1792 b */ add(DWORD,PTR,-24[rsp],1);
    $L176.set();
    /* 1793 b */ mov(eax,DWORD,PTR,-24[rsp]);
    /* 1794 b */ cmp(eax,DWORD,PTR,-12[rsp]);
    /* 1795 X */ jl($L177);
    /* 1796 b */ nop();
    /* 1797 b */ nop();
    /* 1798 b */ ret();
    $LFE73.set();
    $erase.set();
    $LFB74.set();
    /* 1799 b */ endbr64();
    /* 1800 b */ mov(DWORD,PTR,-36[rsp],edi);
    /* 1801 b */ mov(eax,DWORD,PTR,-36[rsp]);
    /* 1802 b */ movsx(rdx,eax);
    /* 1803 b */ mov(rax,rdx);
    /* 1804 b */ sal(rax,2);
    /* 1805 b */ add(rax,rdx);
    /* 1806 b */ add(rax,rax);
    /* 1807 b */ add(rax,rdx);
    /* 1808 b */ sal(rax,2);
    /* 1809 b */ lea(rdx,btree[rip]);
    /* 1810 b */ add(rax,rdx);
    /* 1811 b */ add(rax,12);
    /* 1812 b */ mov(QWORD,PTR,-8[rsp],rax);
    /* 1813 b */ mov(DWORD,PTR,-20[rsp],16);
    /* 1814 b */ mov(DWORD,PTR,-16[rsp],36);
    /* 1815 b */ mov(edx,DWORD,PTR,-16[rsp]);
    /* 1816 b */ mov(eax,DWORD,PTR,-20[rsp]);
    /* 1817 b */ cmp(edx,eax);
    /* 1818 b */ cmovge(eax,edx);
    /* 1819 b */ mov(DWORD,PTR,-12[rsp],eax);
    /* 1820 b */ mov(DWORD,PTR,-24[rsp],0);
    /* 1821 X */ jmp($L179);
    $L180.set();
    /* 1822 b */ mov(eax,DWORD,PTR,-24[rsp]);
    /* 1823 b */ movsx(rdx,eax);
    /* 1824 b */ mov(rax,QWORD,PTR,-8[rsp]);
    /* 1825 b */ add(rax,rdx);
    /* 1826 b */ mov(BYTE,PTR,[rax],1);
    /* 1827 b */ add(DWORD,PTR,-24[rsp],1);
    $L179.set();
    /* 1828 b */ mov(eax,DWORD,PTR,-24[rsp]);
    /* 1829 b */ cmp(eax,DWORD,PTR,-12[rsp]);
    /* 1830 X */ jl($L180);
    /* 1831 b */ nop();
    /* 1832 b */ nop();
    /* 1833 b */ ret();
    $LFE74.set();
    $freeNode.set();
    $LFB75.set();
    /* 1834 b */ endbr64();
    /* 1835 b */ sub(rsp,24);
    /* 1836 b */ mov(DWORD,PTR,4[rsp],edi);
    /* 1837 b */ mov(eax,DWORD,PTR,4[rsp]);
    /* 1838 b */ mov(edi,eax);
    /* 1839 Y */ call($erase);
    /* 1840 b */ mov(eax,DWORD,PTR,btree[rip]);
    /* 1841 b */ mov(DWORD,PTR,20[rsp],eax);
    /* 1842 b */ mov(eax,DWORD,PTR,4[rsp]);
    /* 1843 b */ mov(DWORD,PTR,btree[rip],eax);
    /* 1844 b */ mov(eax,DWORD,PTR,4[rsp]);
    /* 1845 b */ movsx(rdx,eax);
    /* 1846 b */ mov(rax,rdx);
    /* 1847 b */ sal(rax,2);
    /* 1848 b */ add(rax,rdx);
    /* 1849 b */ add(rax,rax);
    /* 1850 b */ add(rax,rdx);
    /* 1851 b */ sal(rax,2);
    /* 1852 b */ mov(rcx,rax);
    /* 1853 b */ lea(rdx,btree[rip+4]);
    /* 1854 b */ mov(eax,DWORD,PTR,20[rsp]);
    /* 1855 b */ mov(DWORD,PTR,[rcx+rdx],eax);
    /* 1856 b */ nop();
    /* 1857 b */ add(rsp,24);
    /* 1858 b */ ret();
    $LFE75.set();
    $leaf.set();
    $LFB76.set();
    /* 1859 b */ endbr64();
    /* 1860 b */ mov(DWORD,PTR,-4[rsp],edi);
    /* 1861 b */ mov(eax,DWORD,PTR,-4[rsp]);
    /* 1862 b */ movsx(rdx,eax);
    /* 1863 b */ mov(rax,rdx);
    /* 1864 b */ sal(rax,2);
    /* 1865 b */ add(rax,rdx);
    /* 1866 b */ add(rax,rax);
    /* 1867 b */ add(rax,rdx);
    /* 1868 b */ sal(rax,2);
    /* 1869 b */ lea(rdx,btree[rip]);
    /* 1870 b */ add(rax,rdx);
    /* 1871 b */ add(rax,12);
    /* 1872 b */ ret();
    $LFE76.set();
    $branch.set();
    $LFB77.set();
    /* 1873 b */ endbr64();
    /* 1874 b */ mov(DWORD,PTR,-4[rsp],edi);
    /* 1875 b */ mov(eax,DWORD,PTR,-4[rsp]);
    /* 1876 b */ movsx(rdx,eax);
    /* 1877 b */ mov(rax,rdx);
    /* 1878 b */ sal(rax,2);
    /* 1879 b */ add(rax,rdx);
    /* 1880 b */ add(rax,rax);
    /* 1881 b */ add(rax,rdx);
    /* 1882 b */ sal(rax,2);
    /* 1883 b */ lea(rdx,btree[rip]);
    /* 1884 b */ add(rax,rdx);
    /* 1885 b */ add(rax,12);
    /* 1886 b */ ret();
    $LFE77.set();
    $leafSize.set();
    $LFB78.set();
    /* 1887 b */ endbr64();
    /* 1888 b */ sub(rsp,8);
    /* 1889 b */ mov(DWORD,PTR,4[rsp],edi);
    /* 1890 b */ mov(eax,DWORD,PTR,4[rsp]);
    /* 1891 b */ mov(edi,eax);
    /* 1892 Y */ call($leaf);
    /* 1893 b */ mov(rdi,rax);
    /* 1894 Y */ call($leaf_size);
    /* 1895 b */ add(rsp,8);
    /* 1896 b */ ret();
    $LFE78.set();
    $branchSize.set();
    $LFB79.set();
    /* 1897 b */ endbr64();
    /* 1898 b */ sub(rsp,8);
    /* 1899 b */ mov(DWORD,PTR,4[rsp],edi);
    /* 1900 b */ mov(eax,DWORD,PTR,4[rsp]);
    /* 1901 b */ mov(edi,eax);
    /* 1902 Y */ call($branch);
    /* 1903 b */ mov(rdi,rax);
    /* 1904 Y */ call($branch_size1);
    /* 1905 b */ add(rsp,8);
    /* 1906 b */ ret();
    $LFE79.set();
    $splitLeafSize.set();
    $LFB80.set();
    /* 1907 b */ endbr64();
    /* 1908 b */ mov(eax,1);
    /* 1909 b */ ret();
    $LFE80.set();
    $splitBranchSize.set();
    $LFB81.set();
    /* 1910 b */ endbr64();
    /* 1911 b */ mov(eax,1);
    /* 1912 b */ ret();
    $LFE81.set();
    $isFull.set();
    $LFB82.set();
    /* 1913 b */ endbr64();
    /* 1914 b */ sub(rsp,8);
    /* 1915 b */ mov(DWORD,PTR,4[rsp],edi);
    /* 1916 b */ mov(eax,DWORD,PTR,4[rsp]);
    /* 1917 b */ mov(edi,eax);
    /* 1918 Y */ call($isLeaf);
    /* 1919 b */ test(eax,eax);
    /* 1920 X */ je($L195);
    /* 1921 b */ mov(eax,DWORD,PTR,4[rsp]);
    /* 1922 b */ mov(edi,eax);
    /* 1923 Y */ call($leafSize);
    /* 1924 b */ cmp(eax,1);
    /* 1925 b */ setg(al);
    /* 1926 b */ movzx(eax,al);
    /* 1927 X */ jmp($L197);
    $L195.set();
    /* 1928 b */ mov(eax,DWORD,PTR,4[rsp]);
    /* 1929 b */ mov(edi,eax);
    /* 1930 Y */ call($branchSize);
    /* 1931 b */ cmp(eax,2);
    /* 1932 b */ setg(al);
    /* 1933 b */ movzx(eax,al);
    $L197.set();
    /* 1934 b */ add(rsp,8);
    /* 1935 b */ ret();
    $LFE82.set();
    $isFullRoot.set();
    $LFB83.set();
    /* 1936 b */ endbr64();
    /* 1937 b */ mov(edi,0);
    /* 1938 Y */ call($isFull);
    /* 1939 b */ ret();
    $LFE83.set();
    $isLow.set();
    $LFB84.set();
    /* 1940 b */ endbr64();
    /* 1941 b */ sub(rsp,8);
    /* 1942 b */ mov(DWORD,PTR,4[rsp],edi);
    /* 1943 b */ mov(eax,DWORD,PTR,4[rsp]);
    /* 1944 b */ mov(edi,eax);
    /* 1945 Y */ call($isLeaf);
    /* 1946 b */ test(eax,eax);
    /* 1947 X */ je($L201);
    /* 1948 b */ mov(eax,DWORD,PTR,4[rsp]);
    /* 1949 b */ mov(edi,eax);
    /* 1950 Y */ call($leafSize);
    /* 1951 b */ cmp(eax,1);
    /* 1952 b */ setle(al);
    /* 1953 b */ movzx(eax,al);
    /* 1954 X */ jmp($L203);
    $L201.set();
    /* 1955 b */ mov(eax,DWORD,PTR,4[rsp]);
    /* 1956 b */ mov(edi,eax);
    /* 1957 Y */ call($branchSize);
    /* 1958 b */ cmp(eax,1);
    /* 1959 b */ setle(al);
    /* 1960 b */ movzx(eax,al);
    $L203.set();
    /* 1961 b */ add(rsp,8);
    /* 1962 b */ ret();
    $LFE84.set();
    $hasLeavesForChildren.set();
    $LFB85.set();
    /* 1963 b */ endbr64();
    /* 1964 b */ sub(rsp,72);
    /* 1965 b */ mov(DWORD,PTR,12[rsp],edi);
    /* 1966 b */ mov(rax,QWORD,PTR,fs:40);
    /* 1967 b */ mov(QWORD,PTR,56[rsp],rax);
    /* 1968 b */ xor(eax,eax);
    /* 1969 b */ mov(eax,DWORD,PTR,12[rsp]);
    /* 1970 b */ mov(edi,eax);
    /* 1971 Y */ call($branch);
    /* 1972 b */ mov(QWORD,PTR,24[rsp],rax);
    /* 1973 b */ lea(rax,36[rsp]);
    /* 1974 b */ mov(rdx,QWORD,PTR,24[rsp]);
    /* 1975 b */ mov(rsi,rdx);
    /* 1976 b */ mov(rdi,rax);
    /* 1977 Y */ call($branch_firstElement);
    /* 1978 b */ mov(eax,DWORD,PTR,52[rsp]);
    /* 1979 b */ mov(DWORD,PTR,20[rsp],eax);
    /* 1980 b */ mov(eax,DWORD,PTR,20[rsp]);
    /* 1981 b */ mov(edi,eax);
    /* 1982 Y */ call($isLeaf);
    /* 1983 b */ mov(rdx,QWORD,PTR,56[rsp]);
    /* 1984 b */ sub(rdx,QWORD,PTR,fs:40);
    /* 1985 X */ je($L206);
    /* 1986 Y */ call($__stack_chk_fail@PLT);
    $L206.set();
    /* 1987 b */ add(rsp,72);
    /* 1988 b */ ret();
    $LFE85.set();
    $top.set();
    $LFB86.set();
    /* 1989 b */ endbr64();
    /* 1990 b */ sub(rsp,72);
    /* 1991 b */ mov(DWORD,PTR,12[rsp],edi);
    /* 1992 b */ mov(rax,QWORD,PTR,fs:40);
    /* 1993 b */ mov(QWORD,PTR,56[rsp],rax);
    /* 1994 b */ xor(eax,eax);
    /* 1995 b */ mov(eax,DWORD,PTR,12[rsp]);
    /* 1996 b */ mov(edi,eax);
    /* 1997 Y */ call($branch);
    /* 1998 b */ mov(QWORD,PTR,24[rsp],rax);
    /* 1999 b */ lea(rax,36[rsp]);
    /* 2000 b */ mov(rdx,QWORD,PTR,24[rsp]);
    /* 2001 b */ mov(rsi,rdx);
    /* 2002 b */ mov(rdi,rax);
    /* 2003 Y */ call($branch_lastElement);
    /* 2004 b */ mov(eax,DWORD,PTR,52[rsp]);
    /* 2005 b */ mov(rdx,QWORD,PTR,56[rsp]);
    /* 2006 b */ sub(rdx,QWORD,PTR,fs:40);
    /* 2007 X */ je($L209);
    /* 2008 Y */ call($__stack_chk_fail@PLT);
    $L209.set();
    /* 2009 b */ add(rsp,72);
    /* 2010 b */ ret();
    $LFE86.set();
    $allocLeaf.set();
    $LFB87.set();
    /* 2011 b */ endbr64();
    /* 2012 b */ sub(rsp,24);
    /* 2013 b */ mov(eax,0);
    /* 2014 Y */ call($allocate);
    /* 2015 b */ mov(DWORD,PTR,12[rsp],eax);
    /* 2016 b */ mov(eax,DWORD,PTR,12[rsp]);
    /* 2017 b */ mov(edi,eax);
    /* 2018 Y */ call($setLeaf);
    /* 2019 b */ mov(eax,DWORD,PTR,12[rsp]);
    /* 2020 b */ add(rsp,24);
    /* 2021 b */ ret();
    $LFE87.set();
    $allocBranch.set();
    $LFB88.set();
    /* 2022 b */ endbr64();
    /* 2023 b */ sub(rsp,24);
    /* 2024 b */ mov(eax,0);
    /* 2025 Y */ call($allocate);
    /* 2026 b */ mov(DWORD,PTR,12[rsp],eax);
    /* 2027 b */ mov(eax,DWORD,PTR,12[rsp]);
    /* 2028 b */ mov(edi,eax);
    /* 2029 Y */ call($setBranch);
    /* 2030 b */ mov(eax,DWORD,PTR,12[rsp]);
    /* 2031 b */ add(rsp,24);
    /* 2032 b */ ret();
    $LFE88.set();
   }
  void test_btree2() {
    $splitLeafRoot.set();
    $LFB89.set();
    /* 2033 b */ endbr64();
    /* 2034 b */ sub(rsp,120);
    /* 2035 b */ mov(rax,QWORD,PTR,fs:40);
    /* 2036 b */ mov(QWORD,PTR,104[rsp],rax);
    /* 2037 b */ xor(eax,eax);
    /* 2038 b */ mov(eax,0);
    /* 2039 Y */ call($allocLeaf);
    /* 2040 b */ mov(DWORD,PTR,16[rsp],eax);
    /* 2041 b */ mov(eax,DWORD,PTR,16[rsp]);
    /* 2042 b */ mov(edi,eax);
    /* 2043 Y */ call($leaf);
    /* 2044 b */ mov(QWORD,PTR,40[rsp],rax);
    /* 2045 b */ mov(eax,0);
    /* 2046 Y */ call($allocLeaf);
    /* 2047 b */ mov(DWORD,PTR,20[rsp],eax);
    /* 2048 b */ mov(eax,DWORD,PTR,20[rsp]);
    /* 2049 b */ mov(edi,eax);
    /* 2050 Y */ call($leaf);
    /* 2051 b */ mov(QWORD,PTR,48[rsp],rax);
    /* 2052 b */ mov(edi,0);
    /* 2053 Y */ call($leaf);
    /* 2054 b */ mov(QWORD,PTR,56[rsp],rax);
    /* 2055 b */ mov(eax,0);
    /* 2056 Y */ call($splitLeafSize);
    /* 2057 b */ mov(DWORD,PTR,24[rsp],eax);
    /* 2058 b */ mov(DWORD,PTR,8[rsp],0);
    /* 2059 X */ jmp($L215);
    $L216.set();
    /* 2060 b */ lea(rax,84[rsp]);
    /* 2061 b */ mov(rdx,QWORD,PTR,56[rsp]);
    /* 2062 b */ mov(rsi,rdx);
    /* 2063 b */ mov(rdi,rax);
    /* 2064 Y */ call($leaf_shift);
    /* 2065 b */ movzx(eax,BYTE,PTR,100[rsp]);
    /* 2066 b */ movsx(edx,al);
    /* 2067 b */ mov(ecx,DWORD,PTR,96[rsp]);
    /* 2068 b */ mov(rax,QWORD,PTR,40[rsp]);
    /* 2069 b */ mov(esi,ecx);
    /* 2070 b */ mov(rdi,rax);
    /* 2071 Y */ call($leaf_push);
    /* 2072 b */ add(DWORD,PTR,8[rsp],1);
    $L215.set();
    /* 2073 b */ mov(eax,DWORD,PTR,8[rsp]);
    /* 2074 b */ cmp(eax,DWORD,PTR,24[rsp]);
    /* 2075 X */ jl($L216);
    /* 2076 b */ mov(DWORD,PTR,12[rsp],0);
    /* 2077 X */ jmp($L217);
    $L218.set();
    /* 2078 b */ lea(rax,84[rsp]);
    /* 2079 b */ mov(rdx,QWORD,PTR,56[rsp]);
    /* 2080 b */ mov(rsi,rdx);
    /* 2081 b */ mov(rdi,rax);
    /* 2082 Y */ call($leaf_shift);
    /* 2083 b */ movzx(eax,BYTE,PTR,100[rsp]);
    /* 2084 b */ movsx(edx,al);
    /* 2085 b */ mov(ecx,DWORD,PTR,96[rsp]);
    /* 2086 b */ mov(rax,QWORD,PTR,48[rsp]);
    /* 2087 b */ mov(esi,ecx);
    /* 2088 b */ mov(rdi,rax);
    /* 2089 Y */ call($leaf_push);
    /* 2090 b */ add(DWORD,PTR,12[rsp],1);
    $L217.set();
    /* 2091 b */ mov(eax,DWORD,PTR,12[rsp]);
    /* 2092 b */ cmp(eax,DWORD,PTR,24[rsp]);
    /* 2093 X */ jl($L218);
    /* 2094 b */ lea(rax,64[rsp]);
    /* 2095 b */ mov(rdx,QWORD,PTR,48[rsp]);
    /* 2096 b */ mov(rsi,rdx);
    /* 2097 b */ mov(rdi,rax);
    /* 2098 Y */ call($leaf_firstElement);
    /* 2099 b */ mov(eax,DWORD,PTR,76[rsp]);
    /* 2100 b */ mov(DWORD,PTR,28[rsp],eax);
    /* 2101 b */ lea(rax,84[rsp]);
    /* 2102 b */ mov(rdx,QWORD,PTR,40[rsp]);
    /* 2103 b */ mov(rsi,rdx);
    /* 2104 b */ mov(rdi,rax);
    /* 2105 Y */ call($leaf_lastElement);
    /* 2106 b */ mov(eax,DWORD,PTR,96[rsp]);
    /* 2107 b */ mov(DWORD,PTR,32[rsp],eax);
    /* 2108 b */ mov(edx,DWORD,PTR,32[rsp]);
    /* 2109 b */ mov(eax,DWORD,PTR,28[rsp]);
    /* 2110 b */ add(eax,edx);
    /* 2111 b */ mov(edx,eax);
    /* 2112 b */ shr(edx,31);
    /* 2113 b */ add(eax,edx);
    /* 2114 b */ sar(eax);
    /* 2115 b */ mov(DWORD,PTR,36[rsp],eax);
    /* 2116 b */ mov(eax,0);
    /* 2117 Y */ call($setBranchRoot);
    /* 2118 b */ mov(edi,0);
    /* 2119 Y */ call($branch);
    /* 2120 b */ mov(rdi,rax);
    /* 2121 Y */ call($branch_clear);
    /* 2122 b */ mov(edi,0);
    /* 2123 Y */ call($branch);
    /* 2124 b */ mov(rcx,rax);
    /* 2125 b */ mov(edx,DWORD,PTR,16[rsp]);
    /* 2126 b */ mov(eax,DWORD,PTR,36[rsp]);
    /* 2127 b */ mov(esi,eax);
    /* 2128 b */ mov(rdi,rcx);
    /* 2129 Y */ call($branch_push);
    /* 2130 b */ mov(edi,0);
    /* 2131 Y */ call($branch);
    /* 2132 b */ mov(rcx,rax);
    /* 2133 b */ mov(eax,DWORD,PTR,20[rsp]);
    /* 2134 b */ mov(edx,eax);
    /* 2135 b */ mov(esi,0);
    /* 2136 b */ mov(rdi,rcx);
    /* 2137 Y */ call($branch_push);
    /* 2138 b */ nop();
    /* 2139 b */ mov(rax,QWORD,PTR,104[rsp]);
    /* 2140 b */ sub(rax,QWORD,PTR,fs:40);
    /* 2141 X */ je($L219);
    /* 2142 Y */ call($__stack_chk_fail@PLT);
    $L219.set();
    /* 2143 b */ add(rsp,120);
    /* 2144 b */ ret();
    $LFE89.set();
    $splitBranchRoot.set();
    $LFB90.set();
    /* 2145 b */ endbr64();
    /* 2146 b */ sub(rsp,104);
    /* 2147 b */ mov(rax,QWORD,PTR,fs:40);
    /* 2148 b */ mov(QWORD,PTR,88[rsp],rax);
    /* 2149 b */ xor(eax,eax);
    /* 2150 b */ mov(eax,0);
    /* 2151 Y */ call($allocBranch);
    /* 2152 b */ mov(DWORD,PTR,12[rsp],eax);
    /* 2153 b */ mov(eax,DWORD,PTR,12[rsp]);
    /* 2154 b */ mov(edi,eax);
    /* 2155 Y */ call($branch);
    /* 2156 b */ mov(QWORD,PTR,24[rsp],rax);
    /* 2157 b */ mov(eax,0);
    /* 2158 Y */ call($allocBranch);
    /* 2159 b */ mov(DWORD,PTR,16[rsp],eax);
    /* 2160 b */ mov(eax,DWORD,PTR,16[rsp]);
    /* 2161 b */ mov(edi,eax);
    /* 2162 Y */ call($branch);
    /* 2163 b */ mov(QWORD,PTR,32[rsp],rax);
    /* 2164 b */ mov(edi,0);
    /* 2165 Y */ call($branch);
    /* 2166 b */ mov(QWORD,PTR,40[rsp],rax);
    /* 2167 b */ mov(eax,0);
    /* 2168 Y */ call($splitBranchSize);
    /* 2169 b */ mov(DWORD,PTR,20[rsp],eax);
    /* 2170 b */ mov(DWORD,PTR,4[rsp],0);
    /* 2171 X */ jmp($L221);
    $L222.set();
    /* 2172 b */ lea(rax,68[rsp]);
    /* 2173 b */ mov(rdx,QWORD,PTR,40[rsp]);
    /* 2174 b */ mov(rsi,rdx);
    /* 2175 b */ mov(rdi,rax);
    /* 2176 Y */ call($branch_shift);
    /* 2177 b */ mov(edx,DWORD,PTR,84[rsp]);
    /* 2178 b */ mov(ecx,DWORD,PTR,80[rsp]);
    /* 2179 b */ mov(rax,QWORD,PTR,24[rsp]);
    /* 2180 b */ mov(esi,ecx);
    /* 2181 b */ mov(rdi,rax);
    /* 2182 Y */ call($branch_push);
    /* 2183 b */ add(DWORD,PTR,4[rsp],1);
    $L221.set();
    /* 2184 b */ mov(eax,DWORD,PTR,4[rsp]);
    /* 2185 b */ cmp(eax,DWORD,PTR,20[rsp]);
    /* 2186 X */ jl($L222);
    /* 2187 b */ lea(rax,48[rsp]);
    /* 2188 b */ mov(rdx,QWORD,PTR,40[rsp]);
    /* 2189 b */ mov(rsi,rdx);
    /* 2190 b */ mov(rdi,rax);
    /* 2191 Y */ call($branch_shift);
    /* 2192 b */ mov(edx,DWORD,PTR,64[rsp]);
    /* 2193 b */ mov(rax,QWORD,PTR,24[rsp]);
    /* 2194 b */ mov(esi,0);
    /* 2195 b */ mov(rdi,rax);
    /* 2196 Y */ call($branch_push);
    /* 2197 b */ mov(DWORD,PTR,8[rsp],0);
    /* 2198 X */ jmp($L223);
    $L224.set();
    /* 2199 b */ lea(rax,68[rsp]);
    /* 2200 b */ mov(rdx,QWORD,PTR,40[rsp]);
    /* 2201 b */ mov(rsi,rdx);
    /* 2202 b */ mov(rdi,rax);
    /* 2203 Y */ call($branch_shift);
    /* 2204 b */ mov(edx,DWORD,PTR,84[rsp]);
    /* 2205 b */ mov(ecx,DWORD,PTR,80[rsp]);
    /* 2206 b */ mov(rax,QWORD,PTR,32[rsp]);
    /* 2207 b */ mov(esi,ecx);
    /* 2208 b */ mov(rdi,rax);
    /* 2209 Y */ call($branch_push);
    /* 2210 b */ add(DWORD,PTR,8[rsp],1);
    $L223.set();
    /* 2211 b */ mov(eax,DWORD,PTR,8[rsp]);
    /* 2212 b */ cmp(eax,DWORD,PTR,20[rsp]);
    /* 2213 X */ jl($L224);
    /* 2214 b */ lea(rax,68[rsp]);
    /* 2215 b */ mov(rdx,QWORD,PTR,40[rsp]);
    /* 2216 b */ mov(rsi,rdx);
    /* 2217 b */ mov(rdi,rax);
    /* 2218 Y */ call($branch_shift);
    /* 2219 b */ mov(edx,DWORD,PTR,84[rsp]);
    /* 2220 b */ mov(rax,QWORD,PTR,32[rsp]);
    /* 2221 b */ mov(esi,0);
    /* 2222 b */ mov(rdi,rax);
    /* 2223 Y */ call($branch_push);
    /* 2224 b */ mov(edi,0);
    /* 2225 Y */ call($branch);
    /* 2226 b */ mov(rdi,rax);
    /* 2227 Y */ call($branch_clear);
    /* 2228 b */ mov(ecx,DWORD,PTR,60[rsp]);
    /* 2229 b */ mov(edx,DWORD,PTR,12[rsp]);
    /* 2230 b */ mov(rax,QWORD,PTR,40[rsp]);
    /* 2231 b */ mov(esi,ecx);
    /* 2232 b */ mov(rdi,rax);
    /* 2233 Y */ call($branch_push);
    /* 2234 b */ mov(edx,DWORD,PTR,16[rsp]);
    /* 2235 b */ mov(rax,QWORD,PTR,40[rsp]);
    /* 2236 b */ mov(esi,0);
    /* 2237 b */ mov(rdi,rax);
    /* 2238 Y */ call($branch_push);
    /* 2239 b */ nop();
    /* 2240 b */ mov(rax,QWORD,PTR,88[rsp]);
    /* 2241 b */ sub(rax,QWORD,PTR,fs:40);
    /* 2242 X */ je($L225);
    /* 2243 Y */ call($__stack_chk_fail@PLT);
    $L225.set();
    /* 2244 b */ add(rsp,104);
    /* 2245 b */ ret();
    $LFE90.set();
    $splitLeaf.set();
    $LFB91.set();
    /* 2246 b */ endbr64();
    /* 2247 b */ push(rbp);
    /* 2248 b */ push(rbx);
    /* 2249 b */ sub(rsp,104);
    /* 2250 b */ mov(DWORD,PTR,12[rsp],edi);
    /* 2251 b */ mov(DWORD,PTR,8[rsp],esi);
    /* 2252 b */ mov(DWORD,PTR,4[rsp],edx);
    /* 2253 b */ mov(rax,QWORD,PTR,fs:40);
    /* 2254 b */ mov(QWORD,PTR,88[rsp],rax);
    /* 2255 b */ xor(eax,eax);
    /* 2256 b */ mov(eax,DWORD,PTR,8[rsp]);
    /* 2257 b */ mov(DWORD,PTR,20[rsp],eax);
    /* 2258 b */ mov(eax,0);
    /* 2259 Y */ call($allocLeaf);
    /* 2260 b */ mov(DWORD,PTR,24[rsp],eax);
    /* 2261 b */ mov(eax,DWORD,PTR,12[rsp]);
    /* 2262 b */ mov(DWORD,PTR,28[rsp],eax);
    /* 2263 b */ mov(eax,0);
    /* 2264 Y */ call($splitLeafSize);
    /* 2265 b */ mov(DWORD,PTR,32[rsp],eax);
    /* 2266 b */ mov(DWORD,PTR,16[rsp],0);
    /* 2267 X */ jmp($L227);
    $L228.set();
    /* 2268 b */ mov(eax,DWORD,PTR,28[rsp]);
    /* 2269 b */ mov(edi,eax);
    /* 2270 Y */ call($leaf);
    /* 2271 b */ mov(rdx,rax);
    /* 2272 b */ lea(rax,68[rsp]);
    /* 2273 b */ mov(rsi,rdx);
    /* 2274 b */ mov(rdi,rax);
    /* 2275 Y */ call($leaf_shift);
    /* 2276 b */ movzx(eax,BYTE,PTR,84[rsp]);
    /* 2277 b */ movsx(ebp,al);
    /* 2278 b */ mov(ebx,DWORD,PTR,80[rsp]);
    /* 2279 b */ mov(eax,DWORD,PTR,24[rsp]);
    /* 2280 b */ mov(edi,eax);
    /* 2281 Y */ call($leaf);
    /* 2282 b */ mov(edx,ebp);
    /* 2283 b */ mov(esi,ebx);
    /* 2284 b */ mov(rdi,rax);
    /* 2285 Y */ call($leaf_push);
    /* 2286 b */ add(DWORD,PTR,16[rsp],1);
    $L227.set();
    /* 2287 b */ mov(eax,DWORD,PTR,16[rsp]);
    /* 2288 b */ cmp(eax,DWORD,PTR,32[rsp]);
    /* 2289 X */ jl($L228);
    /* 2290 b */ mov(eax,DWORD,PTR,28[rsp]);
    /* 2291 b */ mov(edi,eax);
    /* 2292 Y */ call($leaf);
    /* 2293 b */ mov(rdx,rax);
    /* 2294 b */ lea(rax,48[rsp]);
    /* 2295 b */ mov(rsi,rdx);
    /* 2296 b */ mov(rdi,rax);
    /* 2297 Y */ call($leaf_firstElement);
    /* 2298 b */ mov(eax,DWORD,PTR,60[rsp]);
    /* 2299 b */ mov(DWORD,PTR,36[rsp],eax);
    /* 2300 b */ mov(eax,DWORD,PTR,24[rsp]);
    /* 2301 b */ mov(edi,eax);
    /* 2302 Y */ call($leaf);
    /* 2303 b */ mov(rdx,rax);
    /* 2304 b */ lea(rax,68[rsp]);
    /* 2305 b */ mov(rsi,rdx);
    /* 2306 b */ mov(rdi,rax);
    /* 2307 Y */ call($leaf_lastElement);
    /* 2308 b */ mov(eax,DWORD,PTR,80[rsp]);
    /* 2309 b */ mov(DWORD,PTR,40[rsp],eax);
    /* 2310 b */ mov(edx,DWORD,PTR,36[rsp]);
    /* 2311 b */ mov(eax,DWORD,PTR,40[rsp]);
    /* 2312 b */ add(eax,edx);
    /* 2313 b */ mov(edx,eax);
    /* 2314 b */ shr(edx,31);
    /* 2315 b */ add(eax,edx);
    /* 2316 b */ sar(eax);
    /* 2317 b */ mov(DWORD,PTR,44[rsp],eax);
    /* 2318 b */ mov(eax,DWORD,PTR,20[rsp]);
    /* 2319 b */ mov(edi,eax);
    /* 2320 Y */ call($branch);
    /* 2321 b */ mov(rdi,rax);
    /* 2322 b */ mov(ecx,DWORD,PTR,4[rsp]);
    /* 2323 b */ mov(edx,DWORD,PTR,24[rsp]);
    /* 2324 b */ mov(eax,DWORD,PTR,44[rsp]);
    /* 2325 b */ mov(esi,eax);
    /* 2326 Y */ call($branch_insertElementAt);
    /* 2327 b */ nop();
    /* 2328 b */ mov(rax,QWORD,PTR,88[rsp]);
    /* 2329 b */ sub(rax,QWORD,PTR,fs:40);
    /* 2330 X */ je($L229);
    /* 2331 Y */ call($__stack_chk_fail@PLT);
    $L229.set();
    /* 2332 b */ add(rsp,104);
    /* 2333 b */ pop(rbx);
    /* 2334 b */ pop(rbp);
    /* 2335 b */ ret();
    $LFE91.set();
    $splitBranch.set();
    $LFB92.set();
    /* 2336 b */ endbr64();
    /* 2337 b */ push(rbp);
    /* 2338 b */ push(rbx);
    /* 2339 b */ sub(rsp,72);
    /* 2340 b */ mov(DWORD,PTR,12[rsp],edi);
    /* 2341 b */ mov(DWORD,PTR,8[rsp],esi);
    /* 2342 b */ mov(DWORD,PTR,4[rsp],edx);
    /* 2343 b */ mov(rax,QWORD,PTR,fs:40);
    /* 2344 b */ mov(QWORD,PTR,56[rsp],rax);
    /* 2345 b */ xor(eax,eax);
    /* 2346 b */ mov(eax,DWORD,PTR,8[rsp]);
    /* 2347 b */ mov(DWORD,PTR,20[rsp],eax);
    /* 2348 b */ mov(eax,0);
    /* 2349 Y */ call($allocBranch);
    /* 2350 b */ mov(DWORD,PTR,24[rsp],eax);
    /* 2351 b */ mov(eax,DWORD,PTR,12[rsp]);
    /* 2352 b */ mov(DWORD,PTR,28[rsp],eax);
    /* 2353 b */ mov(eax,0);
    /* 2354 Y */ call($splitBranchSize);
    /* 2355 b */ mov(DWORD,PTR,32[rsp],eax);
    /* 2356 b */ mov(DWORD,PTR,16[rsp],0);
    /* 2357 X */ jmp($L231);
    $L232.set();
    /* 2358 b */ mov(eax,DWORD,PTR,28[rsp]);
    /* 2359 b */ mov(edi,eax);
    /* 2360 Y */ call($branch);
    /* 2361 b */ mov(rdx,rax);
    /* 2362 b */ lea(rax,36[rsp]);
    /* 2363 b */ mov(rsi,rdx);
    /* 2364 b */ mov(rdi,rax);
    /* 2365 Y */ call($branch_shift);
    /* 2366 b */ mov(ebp,DWORD,PTR,52[rsp]);
    /* 2367 b */ mov(ebx,DWORD,PTR,48[rsp]);
    /* 2368 b */ mov(eax,DWORD,PTR,24[rsp]);
    /* 2369 b */ mov(edi,eax);
    /* 2370 Y */ call($branch);
    /* 2371 b */ mov(edx,ebp);
    /* 2372 b */ mov(esi,ebx);
    /* 2373 b */ mov(rdi,rax);
    /* 2374 Y */ call($branch_push);
    /* 2375 b */ add(DWORD,PTR,16[rsp],1);
    $L231.set();
    /* 2376 b */ mov(eax,DWORD,PTR,16[rsp]);
    /* 2377 b */ cmp(eax,DWORD,PTR,32[rsp]);
    /* 2378 X */ jl($L232);
    /* 2379 b */ mov(eax,DWORD,PTR,28[rsp]);
    /* 2380 b */ mov(edi,eax);
    /* 2381 Y */ call($branch);
    /* 2382 b */ mov(rdx,rax);
    /* 2383 b */ lea(rax,36[rsp]);
    /* 2384 b */ mov(rsi,rdx);
    /* 2385 b */ mov(rdi,rax);
    /* 2386 Y */ call($branch_shift);
    /* 2387 b */ mov(ebx,DWORD,PTR,52[rsp]);
    /* 2388 b */ mov(eax,DWORD,PTR,24[rsp]);
    /* 2389 b */ mov(edi,eax);
    /* 2390 Y */ call($branch);
    /* 2391 b */ mov(edx,ebx);
    /* 2392 b */ mov(esi,0);
    /* 2393 b */ mov(rdi,rax);
    /* 2394 Y */ call($branch_push);
    /* 2395 b */ mov(ebx,DWORD,PTR,48[rsp]);
    /* 2396 b */ mov(eax,DWORD,PTR,20[rsp]);
    /* 2397 b */ mov(edi,eax);
    /* 2398 Y */ call($branch);
    /* 2399 b */ mov(rdi,rax);
    /* 2400 b */ mov(edx,DWORD,PTR,4[rsp]);
    /* 2401 b */ mov(eax,DWORD,PTR,24[rsp]);
    /* 2402 b */ mov(ecx,edx);
    /* 2403 b */ mov(edx,eax);
    /* 2404 b */ mov(esi,ebx);
    /* 2405 Y */ call($branch_insertElementAt);
    /* 2406 b */ nop();
    /* 2407 b */ mov(rax,QWORD,PTR,56[rsp]);
    /* 2408 b */ sub(rax,QWORD,PTR,fs:40);
    /* 2409 X */ je($L233);
    /* 2410 Y */ call($__stack_chk_fail@PLT);
    $L233.set();
    /* 2411 b */ add(rsp,72);
    /* 2412 b */ pop(rbx);
    /* 2413 b */ pop(rbp);
    /* 2414 b */ ret();
    $LFE92.set();
    $stealFromLeft.set();
    $LFB93.set();
    /* 2415 b */ endbr64();
    /* 2416 b */ push(rbp);
    /* 2417 b */ push(rbx);
    /* 2418 b */ sub(rsp,248);
    /* 2419 b */ mov(DWORD,PTR,44[rsp],edi);
    /* 2420 b */ mov(DWORD,PTR,40[rsp],esi);
    /* 2421 b */ mov(rax,QWORD,PTR,fs:40);
    /* 2422 b */ mov(QWORD,PTR,232[rsp],rax);
    /* 2423 b */ xor(eax,eax);
    /* 2424 b */ mov(eax,DWORD,PTR,44[rsp]);
    /* 2425 b */ mov(DWORD,PTR,48[rsp],eax);
    /* 2426 b */ mov(eax,DWORD,PTR,40[rsp]);
    /* 2427 b */ lea(ebx,-1[rax]);
    /* 2428 b */ mov(eax,DWORD,PTR,48[rsp]);
    /* 2429 b */ mov(edi,eax);
    /* 2430 Y */ call($branch);
    /* 2431 b */ mov(rcx,rax);
    /* 2432 b */ lea(rax,112[rsp]);
    /* 2433 b */ mov(edx,ebx);
    /* 2434 b */ mov(rsi,rcx);
    /* 2435 b */ mov(rdi,rax);
    /* 2436 Y */ call($branch_elementAt);
    /* 2437 b */ mov(eax,DWORD,PTR,128[rsp]);
    /* 2438 b */ mov(DWORD,PTR,52[rsp],eax);
    /* 2439 b */ mov(eax,DWORD,PTR,48[rsp]);
    /* 2440 b */ mov(edi,eax);
    /* 2441 Y */ call($branch);
    /* 2442 b */ mov(rcx,rax);
    /* 2443 b */ lea(rax,132[rsp]);
    /* 2444 b */ mov(edx,DWORD,PTR,40[rsp]);
    /* 2445 b */ mov(rsi,rcx);
    /* 2446 b */ mov(rdi,rax);
    /* 2447 Y */ call($branch_elementAt);
    /* 2448 b */ mov(eax,DWORD,PTR,148[rsp]);
    /* 2449 b */ mov(DWORD,PTR,56[rsp],eax);
    /* 2450 b */ mov(eax,DWORD,PTR,44[rsp]);
    /* 2451 b */ mov(edi,eax);
    /* 2452 Y */ call($hasLeavesForChildren);
    /* 2453 b */ test(eax,eax);
    /* 2454 X */ je($L235);
    /* 2455 b */ mov(eax,DWORD,PTR,52[rsp]);
    /* 2456 b */ mov(edi,eax);
    /* 2457 Y */ call($leafSize);
    /* 2458 b */ mov(DWORD,PTR,80[rsp],eax);
    /* 2459 b */ mov(eax,DWORD,PTR,56[rsp]);
    /* 2460 b */ mov(edi,eax);
    /* 2461 Y */ call($leafSize);
    /* 2462 b */ mov(DWORD,PTR,84[rsp],eax);
    /* 2463 b */ cmp(DWORD,PTR,84[rsp],1);
    /* 2464 X */ jle($L236);
    /* 2465 b */ mov(eax,0);
    /* 2466 X */ jmp($L240);
    $L236.set();
    /* 2467 b */ cmp(DWORD,PTR,80[rsp],1);
    /* 2468 X */ jg($L238);
    /* 2469 b */ mov(eax,0);
    /* 2470 X */ jmp($L240);
    $L238.set();
    /* 2471 b */ mov(eax,DWORD,PTR,52[rsp]);
    /* 2472 b */ mov(edi,eax);
    /* 2473 Y */ call($leaf);
    /* 2474 b */ mov(rdx,rax);
    /* 2475 b */ lea(rax,212[rsp]);
    /* 2476 b */ mov(rsi,rdx);
    /* 2477 b */ mov(rdi,rax);
    /* 2478 Y */ call($leaf_lastElement);
    /* 2479 b */ movzx(eax,BYTE,PTR,228[rsp]);
    /* 2480 b */ movsx(ebp,al);
    /* 2481 b */ mov(ebx,DWORD,PTR,224[rsp]);
    /* 2482 b */ mov(eax,DWORD,PTR,56[rsp]);
    /* 2483 b */ mov(edi,eax);
    /* 2484 Y */ call($leaf);
    /* 2485 b */ mov(ecx,0);
    /* 2486 b */ mov(edx,ebp);
    /* 2487 b */ mov(esi,ebx);
    /* 2488 b */ mov(rdi,rax);
    /* 2489 Y */ call($leaf_insertElementAt);
    /* 2490 b */ mov(eax,DWORD,PTR,52[rsp]);
    /* 2491 b */ mov(edi,eax);
    /* 2492 Y */ call($leaf);
    /* 2493 b */ mov(rdx,rax);
    /* 2494 b */ mov(rax,rsp);
    /* 2495 b */ mov(rsi,rdx);
    /* 2496 b */ mov(rdi,rax);
    /* 2497 Y */ call($leaf_pop);
    /* 2498 b */ mov(eax,DWORD,PTR,80[rsp]);
    /* 2499 b */ lea(ebx,-2[rax]);
    /* 2500 b */ mov(eax,DWORD,PTR,52[rsp]);
    /* 2501 b */ mov(edi,eax);
    /* 2502 Y */ call($leaf);
    /* 2503 b */ mov(rcx,rax);
    /* 2504 b */ lea(rax,152[rsp]);
    /* 2505 b */ mov(edx,ebx);
    /* 2506 b */ mov(rsi,rcx);
    /* 2507 b */ mov(rdi,rax);
    /* 2508 Y */ call($leaf_elementAt);
    /* 2509 b */ mov(eax,DWORD,PTR,164[rsp]);
    /* 2510 b */ mov(DWORD,PTR,88[rsp],eax);
    /* 2511 b */ mov(eax,DWORD,PTR,40[rsp]);
    /* 2512 b */ lea(ebx,-1[rax]);
    /* 2513 b */ mov(eax,DWORD,PTR,48[rsp]);
    /* 2514 b */ mov(edi,eax);
    /* 2515 Y */ call($branch);
    /* 2516 b */ mov(rdi,rax);
    /* 2517 b */ mov(edx,DWORD,PTR,52[rsp]);
    /* 2518 b */ mov(eax,DWORD,PTR,88[rsp]);
    /* 2519 b */ mov(ecx,ebx);
    /* 2520 b */ mov(esi,eax);
    /* 2521 Y */ call($branch_setElementAt);
    /* 2522 X */ jmp($L239);
    $L235.set();
    /* 2523 b */ mov(eax,DWORD,PTR,52[rsp]);
    /* 2524 b */ mov(edi,eax);
    /* 2525 Y */ call($branchSize);
    /* 2526 b */ mov(DWORD,PTR,60[rsp],eax);
    /* 2527 b */ mov(eax,DWORD,PTR,56[rsp]);
    /* 2528 b */ mov(edi,eax);
    /* 2529 Y */ call($branchSize);
    /* 2530 b */ mov(DWORD,PTR,64[rsp],eax);
    /* 2531 b */ cmp(DWORD,PTR,64[rsp],2);
    /* 2532 X */ jle($L241);
    /* 2533 b */ mov(eax,0);
    /* 2534 X */ jmp($L240);
    $L241.set();
    /* 2535 b */ cmp(DWORD,PTR,60[rsp],1);
    /* 2536 X */ jg($L243);
    /* 2537 b */ mov(eax,0);
    /* 2538 X */ jmp($L240);
    $L243.set();
    /* 2539 b */ mov(eax,DWORD,PTR,52[rsp]);
    /* 2540 b */ mov(edi,eax);
    /* 2541 Y */ call($branch);
    /* 2542 b */ mov(rdx,rax);
    /* 2543 b */ lea(rax,92[rsp]);
    /* 2544 b */ mov(rsi,rdx);
    /* 2545 b */ mov(rdi,rax);
    /* 2546 Y */ call($branch_lastElement);
    /* 2547 b */ mov(eax,DWORD,PTR,48[rsp]);
    /* 2548 b */ mov(edi,eax);
    /* 2549 Y */ call($branch);
    /* 2550 b */ mov(rcx,rax);
    /* 2551 b */ lea(rax,172[rsp]);
    /* 2552 b */ mov(edx,DWORD,PTR,40[rsp]);
    /* 2553 b */ mov(rsi,rcx);
    /* 2554 b */ mov(rdi,rax);
    /* 2555 Y */ call($branch_elementAt);
    /* 2556 b */ mov(eax,DWORD,PTR,184[rsp]);
    /* 2557 b */ mov(DWORD,PTR,68[rsp],eax);
    /* 2558 b */ mov(ebx,DWORD,PTR,108[rsp]);
    /* 2559 b */ mov(eax,DWORD,PTR,56[rsp]);
    /* 2560 b */ mov(edi,eax);
    /* 2561 Y */ call($branch);
    /* 2562 b */ mov(rdi,rax);
    /* 2563 b */ mov(eax,DWORD,PTR,68[rsp]);
    /* 2564 b */ mov(ecx,0);
    /* 2565 b */ mov(edx,ebx);
    /* 2566 b */ mov(esi,eax);
    /* 2567 Y */ call($branch_insertElementAt);
    /* 2568 b */ mov(eax,DWORD,PTR,52[rsp]);
    /* 2569 b */ mov(edi,eax);
    /* 2570 Y */ call($branch);
    /* 2571 b */ mov(rdx,rax);
    /* 2572 b */ mov(rax,rsp);
    /* 2573 b */ mov(rsi,rdx);
    /* 2574 b */ mov(rdi,rax);
    /* 2575 Y */ call($branch_pop);
    /* 2576 b */ mov(eax,DWORD,PTR,56[rsp]);
    /* 2577 b */ mov(edi,eax);
    /* 2578 Y */ call($branch);
    /* 2579 b */ mov(rdx,rax);
    /* 2580 b */ lea(rax,152[rsp]);
    /* 2581 b */ mov(rsi,rdx);
    /* 2582 b */ mov(rdi,rax);
    /* 2583 Y */ call($branch_firstElement);
    /* 2584 b */ mov(eax,DWORD,PTR,40[rsp]);
    /* 2585 b */ lea(ebx,-1[rax]);
    /* 2586 b */ mov(eax,DWORD,PTR,48[rsp]);
    /* 2587 b */ mov(edi,eax);
    /* 2588 Y */ call($branch);
    /* 2589 b */ mov(rcx,rax);
    /* 2590 b */ lea(rax,192[rsp]);
    /* 2591 b */ mov(edx,ebx);
    /* 2592 b */ mov(rsi,rcx);
    /* 2593 b */ mov(rdi,rax);
    /* 2594 Y */ call($branch_elementAt);
    /* 2595 b */ mov(eax,DWORD,PTR,204[rsp]);
    /* 2596 b */ mov(DWORD,PTR,72[rsp],eax);
    /* 2597 b */ mov(ebx,DWORD,PTR,168[rsp]);
    /* 2598 b */ mov(eax,DWORD,PTR,56[rsp]);
    /* 2599 b */ mov(edi,eax);
    /* 2600 Y */ call($branch);
    /* 2601 b */ mov(rdi,rax);
    /* 2602 b */ mov(eax,DWORD,PTR,72[rsp]);
    /* 2603 b */ mov(ecx,0);
    /* 2604 b */ mov(edx,ebx);
    /* 2605 b */ mov(esi,eax);
    /* 2606 Y */ call($branch_setElementAt);
    /* 2607 b */ mov(eax,DWORD,PTR,52[rsp]);
    /* 2608 b */ mov(edi,eax);
    /* 2609 Y */ call($branch);
    /* 2610 b */ mov(rdx,rax);
    /* 2611 b */ lea(rax,212[rsp]);
    /* 2612 b */ mov(rsi,rdx);
    /* 2613 b */ mov(rdi,rax);
    /* 2614 Y */ call($branch_lastElement);
    /* 2615 b */ mov(eax,DWORD,PTR,224[rsp]);
    /* 2616 b */ mov(DWORD,PTR,76[rsp],eax);
    /* 2617 b */ mov(eax,DWORD,PTR,40[rsp]);
    /* 2618 b */ lea(ebx,-1[rax]);
    /* 2619 b */ mov(eax,DWORD,PTR,48[rsp]);
    /* 2620 b */ mov(edi,eax);
    /* 2621 Y */ call($branch);
    /* 2622 b */ mov(rdi,rax);
    /* 2623 b */ mov(edx,DWORD,PTR,52[rsp]);
    /* 2624 b */ mov(eax,DWORD,PTR,76[rsp]);
    /* 2625 b */ mov(ecx,ebx);
    /* 2626 b */ mov(esi,eax);
    /* 2627 Y */ call($branch_setElementAt);
    $L239.set();
    /* 2628 b */ mov(eax,1);
    $L240.set();
    /* 2629 b */ mov(rdx,QWORD,PTR,232[rsp]);
    /* 2630 b */ sub(rdx,QWORD,PTR,fs:40);
    /* 2631 X */ je($L244);
    /* 2632 Y */ call($__stack_chk_fail@PLT);
    $L244.set();
    /* 2633 b */ add(rsp,248);
    /* 2634 b */ pop(rbx);
    /* 2635 b */ pop(rbp);
    /* 2636 b */ ret();
    $LFE93.set();
    $stealFromRight.set();
    $LFB94.set();
    /* 2637 b */ endbr64();
    /* 2638 b */ push(rbp);
    /* 2639 b */ push(rbx);
    /* 2640 b */ sub(rsp,168);
    /* 2641 b */ mov(DWORD,PTR,44[rsp],edi);
    /* 2642 b */ mov(DWORD,PTR,40[rsp],esi);
    /* 2643 b */ mov(rax,QWORD,PTR,fs:40);
    /* 2644 b */ mov(QWORD,PTR,152[rsp],rax);
    /* 2645 b */ xor(eax,eax);
    /* 2646 b */ mov(eax,DWORD,PTR,44[rsp]);
    /* 2647 b */ mov(edi,eax);
    /* 2648 Y */ call($branch);
    /* 2649 b */ mov(rcx,rax);
    /* 2650 b */ lea(rax,72[rsp]);
    /* 2651 b */ mov(edx,DWORD,PTR,40[rsp]);
    /* 2652 b */ mov(rsi,rcx);
    /* 2653 b */ mov(rdi,rax);
    /* 2654 Y */ call($branch_elementAt);
    /* 2655 b */ mov(eax,DWORD,PTR,88[rsp]);
    /* 2656 b */ mov(DWORD,PTR,48[rsp],eax);
    /* 2657 b */ mov(eax,DWORD,PTR,40[rsp]);
    /* 2658 b */ lea(ebx,1[rax]);
    /* 2659 b */ mov(eax,DWORD,PTR,44[rsp]);
    /* 2660 b */ mov(edi,eax);
    /* 2661 Y */ call($branch);
    /* 2662 b */ mov(rcx,rax);
    /* 2663 b */ lea(rax,92[rsp]);
    /* 2664 b */ mov(edx,ebx);
    /* 2665 b */ mov(rsi,rcx);
    /* 2666 b */ mov(rdi,rax);
    /* 2667 Y */ call($branch_elementAt);
    /* 2668 b */ mov(eax,DWORD,PTR,108[rsp]);
    /* 2669 b */ mov(DWORD,PTR,52[rsp],eax);
    /* 2670 b */ mov(eax,DWORD,PTR,44[rsp]);
    /* 2671 b */ mov(edi,eax);
    /* 2672 Y */ call($hasLeavesForChildren);
    /* 2673 b */ test(eax,eax);
    /* 2674 X */ je($L246);
    /* 2675 b */ mov(eax,DWORD,PTR,48[rsp]);
    /* 2676 b */ mov(edi,eax);
    /* 2677 Y */ call($leafSize);
    /* 2678 b */ mov(DWORD,PTR,64[rsp],eax);
    /* 2679 b */ mov(eax,DWORD,PTR,52[rsp]);
    /* 2680 b */ mov(edi,eax);
    /* 2681 Y */ call($leafSize);
    /* 2682 b */ mov(DWORD,PTR,68[rsp],eax);
    /* 2683 b */ cmp(DWORD,PTR,64[rsp],1);
    /* 2684 X */ jle($L247);
    /* 2685 b */ mov(eax,0);
    /* 2686 X */ jmp($L255);
    $L247.set();
    /* 2687 b */ cmp(DWORD,PTR,68[rsp],1);
    /* 2688 X */ jg($L249);
    /* 2689 b */ mov(eax,0);
    /* 2690 X */ jmp($L255);
    $L249.set();
    /* 2691 b */ mov(eax,DWORD,PTR,52[rsp]);
    /* 2692 b */ mov(edi,eax);
    /* 2693 Y */ call($leaf);
    /* 2694 b */ mov(rdx,rax);
    /* 2695 b */ lea(rax,132[rsp]);
    /* 2696 b */ mov(rsi,rdx);
    /* 2697 b */ mov(rdi,rax);
    /* 2698 Y */ call($leaf_firstElement);
    /* 2699 b */ movzx(eax,BYTE,PTR,148[rsp]);
    /* 2700 b */ movsx(ebp,al);
    /* 2701 b */ mov(ebx,DWORD,PTR,144[rsp]);
    /* 2702 b */ mov(eax,DWORD,PTR,48[rsp]);
    /* 2703 b */ mov(edi,eax);
    /* 2704 Y */ call($leaf);
    /* 2705 b */ mov(edx,ebp);
    /* 2706 b */ mov(esi,ebx);
    /* 2707 b */ mov(rdi,rax);
    /* 2708 Y */ call($leaf_push);
    /* 2709 b */ mov(ebx,DWORD,PTR,144[rsp]);
    /* 2710 b */ mov(eax,DWORD,PTR,44[rsp]);
    /* 2711 b */ mov(edi,eax);
    /* 2712 Y */ call($branch);
    /* 2713 b */ mov(rdi,rax);
    /* 2714 b */ mov(edx,DWORD,PTR,40[rsp]);
    /* 2715 b */ mov(eax,DWORD,PTR,48[rsp]);
    /* 2716 b */ mov(ecx,edx);
    /* 2717 b */ mov(edx,eax);
    /* 2718 b */ mov(esi,ebx);
    /* 2719 Y */ call($branch_setElementAt);
    /* 2720 b */ mov(eax,DWORD,PTR,52[rsp]);
    /* 2721 b */ mov(edi,eax);
    /* 2722 Y */ call($leaf);
    /* 2723 b */ mov(rcx,rax);
    /* 2724 b */ mov(rax,rsp);
    /* 2725 b */ mov(edx,0);
    /* 2726 b */ mov(rsi,rcx);
    /* 2727 b */ mov(rdi,rax);
    /* 2728 Y */ call($leaf_removeElementAt);
    /* 2729 X */ jmp($L250);
    $L246.set();
    /* 2730 b */ mov(eax,DWORD,PTR,48[rsp]);
    /* 2731 b */ mov(edi,eax);
    /* 2732 Y */ call($branchSize);
    /* 2733 b */ mov(DWORD,PTR,56[rsp],eax);
    /* 2734 b */ mov(eax,DWORD,PTR,52[rsp]);
    /* 2735 b */ mov(edi,eax);
    /* 2736 Y */ call($branchSize);
    /* 2737 b */ mov(DWORD,PTR,60[rsp],eax);
    /* 2738 b */ cmp(DWORD,PTR,56[rsp],2);
    /* 2739 X */ jle($L252);
    /* 2740 b */ mov(eax,0);
    /* 2741 X */ jmp($L255);
    $L252.set();
    /* 2742 b */ cmp(DWORD,PTR,60[rsp],1);
    /* 2743 X */ jg($L254);
    /* 2744 b */ mov(eax,0);
    /* 2745 X */ jmp($L255);
    $L254.set();
    /* 2746 b */ mov(eax,DWORD,PTR,48[rsp]);
    /* 2747 b */ mov(edi,eax);
    /* 2748 Y */ call($branch);
    /* 2749 b */ mov(rdx,rax);
    /* 2750 b */ lea(rax,112[rsp]);
    /* 2751 b */ mov(rsi,rdx);
    /* 2752 b */ mov(rdi,rax);
    /* 2753 Y */ call($branch_lastElement);
    /* 2754 b */ mov(ebp,DWORD,PTR,128[rsp]);
    /* 2755 b */ mov(ebx,DWORD,PTR,84[rsp]);
    /* 2756 b */ mov(eax,DWORD,PTR,48[rsp]);
    /* 2757 b */ mov(edi,eax);
    /* 2758 Y */ call($branch);
    /* 2759 b */ mov(rdi,rax);
    /* 2760 b */ mov(eax,DWORD,PTR,56[rsp]);
    /* 2761 b */ mov(ecx,eax);
    /* 2762 b */ mov(edx,ebp);
    /* 2763 b */ mov(esi,ebx);
    /* 2764 Y */ call($branch_setElementAt);
    /* 2765 b */ mov(eax,DWORD,PTR,52[rsp]);
    /* 2766 b */ mov(edi,eax);
    /* 2767 Y */ call($branch);
    /* 2768 b */ mov(rdx,rax);
    /* 2769 b */ lea(rax,132[rsp]);
    /* 2770 b */ mov(rsi,rdx);
    /* 2771 b */ mov(rdi,rax);
    /* 2772 Y */ call($branch_firstElement);
    /* 2773 b */ mov(ebx,DWORD,PTR,148[rsp]);
    /* 2774 b */ mov(eax,DWORD,PTR,48[rsp]);
    /* 2775 b */ mov(edi,eax);
    /* 2776 Y */ call($branch);
    /* 2777 b */ mov(edx,ebx);
    /* 2778 b */ mov(esi,0);
    /* 2779 b */ mov(rdi,rax);
    /* 2780 Y */ call($branch_push);
    /* 2781 b */ mov(ebx,DWORD,PTR,144[rsp]);
    /* 2782 b */ mov(eax,DWORD,PTR,44[rsp]);
    /* 2783 b */ mov(edi,eax);
    /* 2784 Y */ call($branch);
    /* 2785 b */ mov(rdi,rax);
    /* 2786 b */ mov(edx,DWORD,PTR,40[rsp]);
    /* 2787 b */ mov(eax,DWORD,PTR,48[rsp]);
    /* 2788 b */ mov(ecx,edx);
    /* 2789 b */ mov(edx,eax);
    /* 2790 b */ mov(esi,ebx);
    /* 2791 Y */ call($branch_setElementAt);
    /* 2792 b */ mov(eax,DWORD,PTR,52[rsp]);
    /* 2793 b */ mov(edi,eax);
    /* 2794 Y */ call($branch);
    /* 2795 b */ mov(rcx,rax);
    /* 2796 b */ mov(rax,rsp);
    /* 2797 b */ mov(edx,0);
    /* 2798 b */ mov(rsi,rcx);
    /* 2799 b */ mov(rdi,rax);
    /* 2800 Y */ call($branch_removeElementAt);
    $L250.set();
    /* 2801 b */ mov(eax,1);
    $L255.set();
    /* 2802 b */ mov(rdx,QWORD,PTR,152[rsp]);
    /* 2803 b */ sub(rdx,QWORD,PTR,fs:40);
    /* 2804 X */ je($L256);
    /* 2805 Y */ call($__stack_chk_fail@PLT);
    $L256.set();
    /* 2806 b */ add(rsp,168);
    /* 2807 b */ pop(rbx);
    /* 2808 b */ pop(rbp);
    /* 2809 b */ ret();
    $LFE94.set();
    $mergeRoot.set();
    $LFB95.set();
    /* 2810 b */ endbr64();
    /* 2811 b */ push(rbp);
    /* 2812 b */ push(rbx);
    /* 2813 b */ sub(rsp,168);
    /* 2814 b */ mov(rax,QWORD,PTR,fs:40);
    /* 2815 b */ mov(QWORD,PTR,152[rsp],rax);
    /* 2816 b */ xor(eax,eax);
    /* 2817 b */ mov(eax,0);
    /* 2818 Y */ call($rootIsLeaf);
    /* 2819 b */ test(eax,eax);
    /* 2820 X */ jne($L258);
    /* 2821 b */ mov(edi,0);
    /* 2822 Y */ call($branchSize);
    /* 2823 b */ cmp(eax,1);
    /* 2824 X */ jle($L259);
    $L258.set();
    /* 2825 b */ mov(eax,0);
    /* 2826 X */ jmp($L260);
    $L259.set();
    /* 2827 b */ mov(DWORD,PTR,16[rsp],0);
    /* 2828 b */ mov(eax,DWORD,PTR,16[rsp]);
    /* 2829 b */ mov(edi,eax);
    /* 2830 Y */ call($branch);
    /* 2831 b */ mov(rdx,rax);
    /* 2832 b */ lea(rax,72[rsp]);
    /* 2833 b */ mov(rsi,rdx);
    /* 2834 b */ mov(rdi,rax);
    /* 2835 Y */ call($branch_firstElement);
    /* 2836 b */ mov(eax,DWORD,PTR,88[rsp]);
    /* 2837 b */ mov(DWORD,PTR,20[rsp],eax);
    /* 2838 b */ mov(eax,DWORD,PTR,16[rsp]);
    /* 2839 b */ mov(edi,eax);
    /* 2840 Y */ call($branch);
    /* 2841 b */ mov(rdx,rax);
    /* 2842 b */ lea(rax,92[rsp]);
    /* 2843 b */ mov(rsi,rdx);
    /* 2844 b */ mov(rdi,rax);
    /* 2845 Y */ call($branch_lastElement);
    /* 2846 b */ mov(eax,DWORD,PTR,108[rsp]);
    /* 2847 b */ mov(DWORD,PTR,24[rsp],eax);
    /* 2848 b */ mov(eax,DWORD,PTR,16[rsp]);
    /* 2849 b */ mov(edi,eax);
    /* 2850 Y */ call($hasLeavesForChildren);
    /* 2851 b */ test(eax,eax);
    /* 2852 X */ je($L261);
    /* 2853 b */ mov(eax,DWORD,PTR,20[rsp]);
    /* 2854 b */ mov(edi,eax);
    /* 2855 Y */ call($leafSize);
    /* 2856 b */ mov(ebx,eax);
    /* 2857 b */ mov(eax,DWORD,PTR,24[rsp]);
    /* 2858 b */ mov(edi,eax);
    /* 2859 Y */ call($leafSize);
    /* 2860 b */ add(eax,ebx);
    /* 2861 b */ cmp(eax,2);
    /* 2862 X */ jg($L262);
    /* 2863 b */ mov(eax,DWORD,PTR,16[rsp]);
    /* 2864 b */ mov(edi,eax);
    /* 2865 Y */ call($clear);
    /* 2866 b */ mov(eax,DWORD,PTR,20[rsp]);
    /* 2867 b */ mov(edi,eax);
    /* 2868 Y */ call($leafSize);
    /* 2869 b */ mov(DWORD,PTR,44[rsp],eax);
    /* 2870 b */ mov(DWORD,PTR,[rsp],0);
    /* 2871 X */ jmp($L263);
    $L264.set();
    /* 2872 b */ mov(eax,DWORD,PTR,20[rsp]);
    /* 2873 b */ mov(edi,eax);
    /* 2874 Y */ call($leaf);
    /* 2875 b */ mov(rdx,rax);
    /* 2876 b */ lea(rax,132[rsp]);
    /* 2877 b */ mov(rsi,rdx);
    /* 2878 b */ mov(rdi,rax);
    /* 2879 Y */ call($leaf_shift);
    /* 2880 b */ movzx(eax,BYTE,PTR,148[rsp]);
    /* 2881 b */ movsx(ebp,al);
    /* 2882 b */ mov(ebx,DWORD,PTR,144[rsp]);
    /* 2883 b */ mov(eax,DWORD,PTR,16[rsp]);
    /* 2884 b */ mov(edi,eax);
    /* 2885 Y */ call($leaf);
    /* 2886 b */ mov(edx,ebp);
    /* 2887 b */ mov(esi,ebx);
    /* 2888 b */ mov(rdi,rax);
    /* 2889 Y */ call($leaf_push);
    /* 2890 b */ add(DWORD,PTR,[rsp],1);
    $L263.set();
    /* 2891 b */ mov(eax,DWORD,PTR,[rsp]);
    /* 2892 b */ cmp(eax,DWORD,PTR,44[rsp]);
    /* 2893 X */ jl($L264);
    /* 2894 b */ mov(eax,DWORD,PTR,24[rsp]);
    /* 2895 b */ mov(edi,eax);
    /* 2896 Y */ call($leafSize);
    /* 2897 b */ mov(DWORD,PTR,48[rsp],eax);
    /* 2898 b */ mov(DWORD,PTR,4[rsp],0);
    /* 2899 X */ jmp($L265);
    $L266.set();
    /* 2900 b */ mov(eax,DWORD,PTR,24[rsp]);
    /* 2901 b */ mov(edi,eax);
    /* 2902 Y */ call($leaf);
    /* 2903 b */ mov(rdx,rax);
    /* 2904 b */ lea(rax,132[rsp]);
    /* 2905 b */ mov(rsi,rdx);
    /* 2906 b */ mov(rdi,rax);
    /* 2907 Y */ call($leaf_shift);
    /* 2908 b */ movzx(eax,BYTE,PTR,148[rsp]);
    /* 2909 b */ movsx(ebp,al);
    /* 2910 b */ mov(ebx,DWORD,PTR,144[rsp]);
    /* 2911 b */ mov(eax,DWORD,PTR,16[rsp]);
    /* 2912 b */ mov(edi,eax);
    /* 2913 Y */ call($leaf);
    /* 2914 b */ mov(edx,ebp);
    /* 2915 b */ mov(esi,ebx);
    /* 2916 b */ mov(rdi,rax);
    /* 2917 Y */ call($leaf_push);
    /* 2918 b */ add(DWORD,PTR,4[rsp],1);
    $L265.set();
    /* 2919 b */ mov(eax,DWORD,PTR,4[rsp]);
    /* 2920 b */ cmp(eax,DWORD,PTR,48[rsp]);
    /* 2921 X */ jl($L266);
    /* 2922 b */ mov(eax,DWORD,PTR,16[rsp]);
    /* 2923 b */ mov(edi,eax);
    /* 2924 Y */ call($setLeaf);
    /* 2925 b */ mov(eax,DWORD,PTR,20[rsp]);
    /* 2926 b */ mov(edi,eax);
    /* 2927 Y */ call($freeNode);
    /* 2928 b */ mov(eax,DWORD,PTR,24[rsp]);
    /* 2929 b */ mov(edi,eax);
    /* 2930 Y */ call($freeNode);
    /* 2931 b */ mov(eax,1);
    /* 2932 X */ jmp($L260);
    $L261.set();
    /* 2933 b */ mov(eax,DWORD,PTR,20[rsp]);
    /* 2934 b */ mov(edi,eax);
    /* 2935 Y */ call($branchSize);
    /* 2936 b */ lea(ebx,1[rax]);
    /* 2937 b */ mov(eax,DWORD,PTR,24[rsp]);
    /* 2938 b */ mov(edi,eax);
    /* 2939 Y */ call($branchSize);
    /* 2940 b */ add(eax,ebx);
    /* 2941 b */ cmp(eax,3);
    /* 2942 X */ jg($L262);
    /* 2943 b */ mov(eax,DWORD,PTR,16[rsp]);
    /* 2944 b */ mov(edi,eax);
    /* 2945 Y */ call($branch);
    /* 2946 b */ mov(rdx,rax);
    /* 2947 b */ lea(rax,52[rsp]);
    /* 2948 b */ mov(rsi,rdx);
    /* 2949 b */ mov(rdi,rax);
    /* 2950 Y */ call($branch_firstElement);
    /* 2951 b */ mov(eax,DWORD,PTR,16[rsp]);
    /* 2952 b */ mov(edi,eax);
    /* 2953 Y */ call($clear);
    /* 2954 b */ mov(eax,DWORD,PTR,20[rsp]);
    /* 2955 b */ mov(edi,eax);
    /* 2956 Y */ call($branchSize);
    /* 2957 b */ mov(DWORD,PTR,28[rsp],eax);
    /* 2958 b */ mov(DWORD,PTR,8[rsp],0);
    /* 2959 X */ jmp($L267);
    $L268.set();
    /* 2960 b */ mov(eax,DWORD,PTR,20[rsp]);
    /* 2961 b */ mov(edi,eax);
    /* 2962 Y */ call($branch);
    /* 2963 b */ mov(rdx,rax);
    /* 2964 b */ lea(rax,132[rsp]);
    /* 2965 b */ mov(rsi,rdx);
    /* 2966 b */ mov(rdi,rax);
    /* 2967 Y */ call($branch_shift);
    /* 2968 b */ mov(ebp,DWORD,PTR,148[rsp]);
    /* 2969 b */ mov(ebx,DWORD,PTR,144[rsp]);
    /* 2970 b */ mov(eax,DWORD,PTR,16[rsp]);
    /* 2971 b */ mov(edi,eax);
    /* 2972 Y */ call($branch);
    /* 2973 b */ mov(edx,ebp);
    /* 2974 b */ mov(esi,ebx);
    /* 2975 b */ mov(rdi,rax);
    /* 2976 Y */ call($branch_push);
    /* 2977 b */ add(DWORD,PTR,8[rsp],1);
    $L267.set();
    /* 2978 b */ mov(eax,DWORD,PTR,8[rsp]);
    /* 2979 b */ cmp(eax,DWORD,PTR,28[rsp]);
    /* 2980 X */ jl($L268);
    /* 2981 b */ mov(eax,DWORD,PTR,20[rsp]);
    /* 2982 b */ mov(edi,eax);
    /* 2983 Y */ call($branch);
    /* 2984 b */ mov(rdx,rax);
    /* 2985 b */ lea(rax,112[rsp]);
    /* 2986 b */ mov(rsi,rdx);
    /* 2987 b */ mov(rdi,rax);
    /* 2988 Y */ call($branch_lastElement);
    /* 2989 b */ mov(eax,DWORD,PTR,128[rsp]);
    /* 2990 b */ mov(DWORD,PTR,32[rsp],eax);
    /* 2991 b */ mov(ebx,DWORD,PTR,64[rsp]);
    /* 2992 b */ mov(eax,DWORD,PTR,16[rsp]);
    /* 2993 b */ mov(edi,eax);
    /* 2994 Y */ call($branch);
    /* 2995 b */ mov(rcx,rax);
    /* 2996 b */ mov(eax,DWORD,PTR,32[rsp]);
    /* 2997 b */ mov(edx,eax);
    /* 2998 b */ mov(esi,ebx);
    /* 2999 b */ mov(rdi,rcx);
    /* 3000 Y */ call($branch_push);
    /* 3001 b */ mov(eax,DWORD,PTR,24[rsp]);
    /* 3002 b */ mov(edi,eax);
    /* 3003 Y */ call($branchSize);
    /* 3004 b */ mov(DWORD,PTR,36[rsp],eax);
    /* 3005 b */ mov(DWORD,PTR,12[rsp],0);
    /* 3006 X */ jmp($L269);
    $L270.set();
    /* 3007 b */ mov(eax,DWORD,PTR,24[rsp]);
    /* 3008 b */ mov(edi,eax);
    /* 3009 Y */ call($branch);
    /* 3010 b */ mov(rdx,rax);
    /* 3011 b */ lea(rax,132[rsp]);
    /* 3012 b */ mov(rsi,rdx);
    /* 3013 b */ mov(rdi,rax);
    /* 3014 Y */ call($branch_shift);
    /* 3015 b */ mov(ebp,DWORD,PTR,148[rsp]);
    /* 3016 b */ mov(ebx,DWORD,PTR,144[rsp]);
    /* 3017 b */ mov(eax,DWORD,PTR,16[rsp]);
    /* 3018 b */ mov(edi,eax);
    /* 3019 Y */ call($branch);
    /* 3020 b */ mov(edx,ebp);
    /* 3021 b */ mov(esi,ebx);
    /* 3022 b */ mov(rdi,rax);
    /* 3023 Y */ call($branch_push);
    /* 3024 b */ add(DWORD,PTR,12[rsp],1);
    $L269.set();
    /* 3025 b */ mov(eax,DWORD,PTR,12[rsp]);
    /* 3026 b */ cmp(eax,DWORD,PTR,36[rsp]);
    /* 3027 X */ jl($L270);
    /* 3028 b */ mov(eax,DWORD,PTR,24[rsp]);
    /* 3029 b */ mov(edi,eax);
    /* 3030 Y */ call($branch);
    /* 3031 b */ mov(rdx,rax);
    /* 3032 b */ lea(rax,132[rsp]);
    /* 3033 b */ mov(rsi,rdx);
    /* 3034 b */ mov(rdi,rax);
    /* 3035 Y */ call($branch_lastElement);
    /* 3036 b */ mov(eax,DWORD,PTR,148[rsp]);
    /* 3037 b */ mov(DWORD,PTR,40[rsp],eax);
    /* 3038 b */ mov(eax,DWORD,PTR,16[rsp]);
    /* 3039 b */ mov(edi,eax);
    /* 3040 Y */ call($branch);
    /* 3041 b */ mov(rcx,rax);
    /* 3042 b */ mov(eax,DWORD,PTR,40[rsp]);
    /* 3043 b */ mov(edx,eax);
    /* 3044 b */ mov(esi,0);
    /* 3045 b */ mov(rdi,rcx);
    /* 3046 Y */ call($branch_push);
    /* 3047 b */ mov(eax,DWORD,PTR,20[rsp]);
    /* 3048 b */ mov(edi,eax);
    /* 3049 Y */ call($freeNode);
    /* 3050 b */ mov(eax,DWORD,PTR,24[rsp]);
    /* 3051 b */ mov(edi,eax);
    /* 3052 Y */ call($freeNode);
    /* 3053 b */ mov(eax,1);
    /* 3054 X */ jmp($L260);
    $L262.set();
    /* 3055 b */ mov(eax,0);
    $L260.set();
    /* 3056 b */ mov(rdx,QWORD,PTR,152[rsp]);
    /* 3057 b */ sub(rdx,QWORD,PTR,fs:40);
    /* 3058 X */ je($L271);
    /* 3059 Y */ call($__stack_chk_fail@PLT);
    $L271.set();
    /* 3060 b */ add(rsp,168);
    /* 3061 b */ pop(rbx);
    /* 3062 b */ pop(rbp);
    /* 3063 b */ ret();
    $LFE95.set();
    $mergeLeftSibling.set();
    $LFB96.set();
    /* 3064 b */ endbr64();
    /* 3065 b */ push(rbp);
    /* 3066 b */ push(rbx);
    /* 3067 b */ sub(rsp,232);
    /* 3068 b */ mov(DWORD,PTR,44[rsp],edi);
    /* 3069 b */ mov(DWORD,PTR,40[rsp],esi);
    /* 3070 b */ mov(rax,QWORD,PTR,fs:40);
    /* 3071 b */ mov(QWORD,PTR,216[rsp],rax);
    /* 3072 b */ xor(eax,eax);
    /* 3073 b */ cmp(DWORD,PTR,40[rsp],0);
    /* 3074 X */ jne($L273);
    /* 3075 b */ mov(eax,0);
    /* 3076 X */ jmp($L285);
    $L273.set();
    /* 3077 b */ mov(eax,DWORD,PTR,44[rsp]);
    /* 3078 b */ mov(edi,eax);
    /* 3079 Y */ call($branchSize);
    /* 3080 b */ mov(DWORD,PTR,68[rsp],eax);
    /* 3081 b */ cmp(DWORD,PTR,68[rsp],1);
    /* 3082 X */ jg($L275);
    /* 3083 b */ mov(eax,0);
    /* 3084 X */ jmp($L285);
    $L275.set();
    /* 3085 b */ mov(eax,DWORD,PTR,40[rsp]);
    /* 3086 b */ lea(ebx,-1[rax]);
    /* 3087 b */ mov(eax,DWORD,PTR,44[rsp]);
    /* 3088 b */ mov(edi,eax);
    /* 3089 Y */ call($branch);
    /* 3090 b */ mov(rcx,rax);
    /* 3091 b */ lea(rax,116[rsp]);
    /* 3092 b */ mov(edx,ebx);
    /* 3093 b */ mov(rsi,rcx);
    /* 3094 b */ mov(rdi,rax);
    /* 3095 Y */ call($branch_elementAt);
    /* 3096 b */ mov(eax,DWORD,PTR,44[rsp]);
    /* 3097 b */ mov(edi,eax);
    /* 3098 Y */ call($branch);
    /* 3099 b */ mov(rcx,rax);
    /* 3100 b */ lea(rax,136[rsp]);
    /* 3101 b */ mov(edx,DWORD,PTR,40[rsp]);
    /* 3102 b */ mov(rsi,rcx);
    /* 3103 b */ mov(rdi,rax);
    /* 3104 Y */ call($branch_elementAt);
    /* 3105 b */ mov(eax,DWORD,PTR,44[rsp]);
    /* 3106 b */ mov(edi,eax);
    /* 3107 Y */ call($hasLeavesForChildren);
    /* 3108 b */ test(eax,eax);
    /* 3109 X */ je($L276);
    /* 3110 b */ mov(eax,DWORD,PTR,132[rsp]);
    /* 3111 b */ mov(DWORD,PTR,96[rsp],eax);
    /* 3112 b */ mov(eax,DWORD,PTR,152[rsp]);
    /* 3113 b */ mov(DWORD,PTR,100[rsp],eax);
    /* 3114 b */ mov(eax,DWORD,PTR,96[rsp]);
    /* 3115 b */ mov(edi,eax);
    /* 3116 Y */ call($leafSize);
    /* 3117 b */ mov(DWORD,PTR,104[rsp],eax);
    /* 3118 b */ mov(eax,DWORD,PTR,100[rsp]);
    /* 3119 b */ mov(edi,eax);
    /* 3120 Y */ call($leafSize);
    /* 3121 b */ mov(DWORD,PTR,108[rsp],eax);
    /* 3122 b */ mov(edx,DWORD,PTR,104[rsp]);
    /* 3123 b */ mov(eax,DWORD,PTR,108[rsp]);
    /* 3124 b */ add(eax,edx);
    /* 3125 b */ cmp(eax,1);
    /* 3126 X */ jle($L277);
    /* 3127 b */ mov(eax,0);
    /* 3128 X */ jmp($L285);
    $L277.set();
    /* 3129 b */ mov(eax,DWORD,PTR,96[rsp]);
    /* 3130 b */ mov(edi,eax);
    /* 3131 Y */ call($leaf);
    /* 3132 b */ mov(rdi,rax);
    /* 3133 Y */ call($leaf_size);
    /* 3134 b */ mov(DWORD,PTR,112[rsp],eax);
    /* 3135 b */ mov(DWORD,PTR,60[rsp],0);
    /* 3136 X */ jmp($L278);
    $L279.set();
    /* 3137 b */ mov(eax,DWORD,PTR,96[rsp]);
    /* 3138 b */ mov(edi,eax);
    /* 3139 Y */ call($leaf);
    /* 3140 b */ mov(rdx,rax);
    /* 3141 b */ lea(rax,196[rsp]);
    /* 3142 b */ mov(rsi,rdx);
    /* 3143 b */ mov(rdi,rax);
    /* 3144 Y */ call($leaf_pop);
    /* 3145 b */ movzx(eax,BYTE,PTR,212[rsp]);
    /* 3146 b */ movsx(ebp,al);
    /* 3147 b */ mov(ebx,DWORD,PTR,208[rsp]);
    /* 3148 b */ mov(eax,DWORD,PTR,100[rsp]);
    /* 3149 b */ mov(edi,eax);
    /* 3150 Y */ call($leaf);
    /* 3151 b */ mov(ecx,0);
    /* 3152 b */ mov(edx,ebp);
    /* 3153 b */ mov(esi,ebx);
    /* 3154 b */ mov(rdi,rax);
    /* 3155 Y */ call($leaf_insertElementAt);
    /* 3156 b */ add(DWORD,PTR,60[rsp],1);
    $L278.set();
    /* 3157 b */ mov(eax,DWORD,PTR,60[rsp]);
    /* 3158 b */ cmp(eax,DWORD,PTR,112[rsp]);
    /* 3159 X */ jl($L279);
    /* 3160 b */ mov(eax,DWORD,PTR,96[rsp]);
    /* 3161 b */ mov(edi,eax);
    /* 3162 Y */ call($freeNode);
    /* 3163 X */ jmp($L280);
    $L276.set();
    /* 3164 b */ mov(eax,DWORD,PTR,132[rsp]);
    /* 3165 b */ mov(DWORD,PTR,72[rsp],eax);
    /* 3166 b */ mov(eax,DWORD,PTR,152[rsp]);
    /* 3167 b */ mov(DWORD,PTR,76[rsp],eax);
    /* 3168 b */ mov(eax,DWORD,PTR,72[rsp]);
    /* 3169 b */ mov(edi,eax);
    /* 3170 Y */ call($branchSize);
    /* 3171 b */ mov(DWORD,PTR,80[rsp],eax);
    /* 3172 b */ mov(eax,DWORD,PTR,76[rsp]);
    /* 3173 b */ mov(edi,eax);
    /* 3174 Y */ call($branchSize);
    /* 3175 b */ mov(DWORD,PTR,84[rsp],eax);
    /* 3176 b */ mov(eax,DWORD,PTR,80[rsp]);
    /* 3177 b */ lea(edx,1[rax]);
    /* 3178 b */ mov(eax,DWORD,PTR,84[rsp]);
    /* 3179 b */ add(eax,edx);
    /* 3180 b */ cmp(eax,2);
    /* 3181 X */ jle($L281);
    /* 3182 b */ mov(eax,0);
    /* 3183 X */ jmp($L285);
    $L281.set();
    /* 3184 b */ mov(eax,DWORD,PTR,40[rsp]);
    /* 3185 b */ lea(ebx,-1[rax]);
    /* 3186 b */ mov(eax,DWORD,PTR,44[rsp]);
    /* 3187 b */ mov(edi,eax);
    /* 3188 Y */ call($branch);
    /* 3189 b */ mov(rcx,rax);
    /* 3190 b */ lea(rax,196[rsp]);
    /* 3191 b */ mov(edx,ebx);
    /* 3192 b */ mov(rsi,rcx);
    /* 3193 b */ mov(rdi,rax);
    /* 3194 Y */ call($branch_elementAt);
    /* 3195 b */ mov(eax,DWORD,PTR,208[rsp]);
    /* 3196 b */ mov(DWORD,PTR,88[rsp],eax);
    /* 3197 b */ mov(eax,DWORD,PTR,72[rsp]);
    /* 3198 b */ mov(edi,eax);
    /* 3199 Y */ call($branch);
    /* 3200 b */ mov(rdx,rax);
    /* 3201 b */ lea(rax,156[rsp]);
    /* 3202 b */ mov(rsi,rdx);
    /* 3203 b */ mov(rdi,rax);
    /* 3204 Y */ call($branch_lastElement);
    /* 3205 b */ mov(ebx,DWORD,PTR,172[rsp]);
    /* 3206 b */ mov(eax,DWORD,PTR,76[rsp]);
    /* 3207 b */ mov(edi,eax);
    /* 3208 Y */ call($branch);
    /* 3209 b */ mov(rdi,rax);
    /* 3210 b */ mov(eax,DWORD,PTR,88[rsp]);
    /* 3211 b */ mov(ecx,0);
    /* 3212 b */ mov(edx,ebx);
    /* 3213 b */ mov(esi,eax);
    /* 3214 Y */ call($branch_insertElementAt);
    /* 3215 b */ mov(eax,DWORD,PTR,72[rsp]);
    /* 3216 b */ mov(edi,eax);
    /* 3217 Y */ call($branch);
    /* 3218 b */ mov(rdx,rax);
    /* 3219 b */ mov(rax,rsp);
    /* 3220 b */ mov(rsi,rdx);
    /* 3221 b */ mov(rdi,rax);
    /* 3222 Y */ call($branch_pop);
    /* 3223 b */ mov(eax,DWORD,PTR,72[rsp]);
    /* 3224 b */ mov(edi,eax);
    /* 3225 Y */ call($branchSize);
    /* 3226 b */ mov(DWORD,PTR,92[rsp],eax);
    /* 3227 b */ mov(DWORD,PTR,64[rsp],0);
    /* 3228 X */ jmp($L283);
    $L284.set();
    /* 3229 b */ mov(eax,DWORD,PTR,72[rsp]);
    /* 3230 b */ mov(edi,eax);
    /* 3231 Y */ call($branch);
    /* 3232 b */ mov(rdx,rax);
    /* 3233 b */ lea(rax,176[rsp]);
    /* 3234 b */ mov(rsi,rdx);
    /* 3235 b */ mov(rdi,rax);
    /* 3236 Y */ call($branch_pop);
    /* 3237 b */ mov(ebp,DWORD,PTR,192[rsp]);
    /* 3238 b */ mov(ebx,DWORD,PTR,188[rsp]);
    /* 3239 b */ mov(eax,DWORD,PTR,76[rsp]);
    /* 3240 b */ mov(edi,eax);
    /* 3241 Y */ call($branch);
    /* 3242 b */ mov(ecx,0);
    /* 3243 b */ mov(edx,ebp);
    /* 3244 b */ mov(esi,ebx);
    /* 3245 b */ mov(rdi,rax);
    /* 3246 Y */ call($branch_insertElementAt);
    /* 3247 b */ add(DWORD,PTR,64[rsp],1);
    $L283.set();
    /* 3248 b */ mov(eax,DWORD,PTR,64[rsp]);
    /* 3249 b */ cmp(eax,DWORD,PTR,92[rsp]);
    /* 3250 X */ jl($L284);
    /* 3251 b */ mov(eax,DWORD,PTR,72[rsp]);
    /* 3252 b */ mov(edi,eax);
    /* 3253 Y */ call($freeNode);
    $L280.set();
    /* 3254 b */ mov(eax,DWORD,PTR,40[rsp]);
    /* 3255 b */ lea(ebx,-1[rax]);
    /* 3256 b */ mov(eax,DWORD,PTR,44[rsp]);
    /* 3257 b */ mov(edi,eax);
    /* 3258 Y */ call($branch);
    /* 3259 b */ mov(rcx,rax);
    /* 3260 b */ mov(rax,rsp);
    /* 3261 b */ mov(edx,ebx);
    /* 3262 b */ mov(rsi,rcx);
    /* 3263 b */ mov(rdi,rax);
    /* 3264 Y */ call($branch_removeElementAt);
    /* 3265 b */ mov(eax,1);
    $L285.set();
    /* 3266 b */ mov(rdx,QWORD,PTR,216[rsp]);
    /* 3267 b */ sub(rdx,QWORD,PTR,fs:40);
    /* 3268 X */ je($L286);
    /* 3269 Y */ call($__stack_chk_fail@PLT);
    $L286.set();
    /* 3270 b */ add(rsp,232);
    /* 3271 b */ pop(rbx);
    /* 3272 b */ pop(rbp);
    /* 3273 b */ ret();
    $LFE96.set();
    $mergeRightSibling.set();
    $LFB97.set();
    /* 3274 b */ endbr64();
    /* 3275 b */ push(rbp);
    /* 3276 b */ push(rbx);
    /* 3277 b */ sub(rsp,216);
    /* 3278 b */ mov(DWORD,PTR,44[rsp],edi);
    /* 3279 b */ mov(DWORD,PTR,40[rsp],esi);
    /* 3280 b */ mov(rax,QWORD,PTR,fs:40);
    /* 3281 b */ mov(QWORD,PTR,200[rsp],rax);
    /* 3282 b */ xor(eax,eax);
    /* 3283 b */ mov(eax,DWORD,PTR,44[rsp]);
    /* 3284 b */ mov(edi,eax);
    /* 3285 Y */ call($branchSize);
    /* 3286 b */ mov(DWORD,PTR,56[rsp],eax);
    /* 3287 b */ cmp(DWORD,PTR,56[rsp],1);
    /* 3288 X */ jg($L288);
    /* 3289 b */ mov(eax,0);
    /* 3290 X */ jmp($L299);
    $L288.set();
    /* 3291 b */ mov(eax,DWORD,PTR,44[rsp]);
    /* 3292 b */ mov(edi,eax);
    /* 3293 Y */ call($branch);
    /* 3294 b */ mov(rcx,rax);
    /* 3295 b */ lea(rax,100[rsp]);
    /* 3296 b */ mov(edx,DWORD,PTR,40[rsp]);
    /* 3297 b */ mov(rsi,rcx);
    /* 3298 b */ mov(rdi,rax);
    /* 3299 Y */ call($branch_elementAt);
    /* 3300 b */ mov(eax,DWORD,PTR,40[rsp]);
    /* 3301 b */ lea(ebx,1[rax]);
    /* 3302 b */ mov(eax,DWORD,PTR,44[rsp]);
    /* 3303 b */ mov(edi,eax);
    /* 3304 Y */ call($branch);
    /* 3305 b */ mov(rcx,rax);
    /* 3306 b */ lea(rax,120[rsp]);
    /* 3307 b */ mov(edx,ebx);
    /* 3308 b */ mov(rsi,rcx);
    /* 3309 b */ mov(rdi,rax);
    /* 3310 Y */ call($branch_elementAt);
    /* 3311 b */ mov(eax,DWORD,PTR,44[rsp]);
    /* 3312 b */ mov(edi,eax);
    /* 3313 Y */ call($hasLeavesForChildren);
    /* 3314 b */ test(eax,eax);
    /* 3315 X */ je($L290);
    /* 3316 b */ mov(eax,DWORD,PTR,116[rsp]);
    /* 3317 b */ mov(DWORD,PTR,80[rsp],eax);
    /* 3318 b */ mov(eax,DWORD,PTR,136[rsp]);
    /* 3319 b */ mov(DWORD,PTR,84[rsp],eax);
    /* 3320 b */ mov(eax,DWORD,PTR,80[rsp]);
    /* 3321 b */ mov(edi,eax);
    /* 3322 Y */ call($leafSize);
    /* 3323 b */ mov(DWORD,PTR,88[rsp],eax);
    /* 3324 b */ mov(eax,DWORD,PTR,84[rsp]);
    /* 3325 b */ mov(edi,eax);
    /* 3326 Y */ call($leafSize);
    /* 3327 b */ mov(DWORD,PTR,92[rsp],eax);
    /* 3328 b */ mov(edx,DWORD,PTR,88[rsp]);
    /* 3329 b */ mov(eax,DWORD,PTR,92[rsp]);
    /* 3330 b */ add(eax,edx);
    /* 3331 b */ cmp(eax,2);
    /* 3332 X */ jle($L291);
    /* 3333 b */ mov(eax,0);
    /* 3334 X */ jmp($L299);
    $L291.set();
    /* 3335 b */ mov(eax,DWORD,PTR,84[rsp]);
    /* 3336 b */ mov(edi,eax);
    /* 3337 Y */ call($leaf);
    /* 3338 b */ mov(rdi,rax);
    /* 3339 Y */ call($leaf_size);
    /* 3340 b */ mov(DWORD,PTR,96[rsp],eax);
    /* 3341 b */ mov(DWORD,PTR,48[rsp],0);
    /* 3342 X */ jmp($L292);
    $L293.set();
    /* 3343 b */ mov(eax,DWORD,PTR,84[rsp]);
    /* 3344 b */ mov(edi,eax);
    /* 3345 Y */ call($leaf);
    /* 3346 b */ mov(rdx,rax);
    /* 3347 b */ lea(rax,180[rsp]);
    /* 3348 b */ mov(rsi,rdx);
    /* 3349 b */ mov(rdi,rax);
    /* 3350 Y */ call($leaf_shift);
    /* 3351 b */ movzx(eax,BYTE,PTR,196[rsp]);
    /* 3352 b */ movsx(ebp,al);
    /* 3353 b */ mov(ebx,DWORD,PTR,192[rsp]);
    /* 3354 b */ mov(eax,DWORD,PTR,80[rsp]);
    /* 3355 b */ mov(edi,eax);
    /* 3356 Y */ call($leaf);
    /* 3357 b */ mov(edx,ebp);
    /* 3358 b */ mov(esi,ebx);
    /* 3359 b */ mov(rdi,rax);
    /* 3360 Y */ call($leaf_push);
    /* 3361 b */ add(DWORD,PTR,48[rsp],1);
    $L292.set();
    /* 3362 b */ mov(eax,DWORD,PTR,48[rsp]);
    /* 3363 b */ cmp(eax,DWORD,PTR,96[rsp]);
    /* 3364 X */ jl($L293);
    /* 3365 b */ mov(eax,DWORD,PTR,84[rsp]);
    /* 3366 b */ mov(edi,eax);
    /* 3367 Y */ call($freeNode);
    /* 3368 X */ jmp($L294);
    $L290.set();
    /* 3369 b */ mov(eax,DWORD,PTR,116[rsp]);
    /* 3370 b */ mov(DWORD,PTR,60[rsp],eax);
    /* 3371 b */ mov(eax,DWORD,PTR,136[rsp]);
    /* 3372 b */ mov(DWORD,PTR,64[rsp],eax);
    /* 3373 b */ mov(eax,DWORD,PTR,60[rsp]);
    /* 3374 b */ mov(edi,eax);
    /* 3375 Y */ call($branchSize);
    /* 3376 b */ mov(DWORD,PTR,68[rsp],eax);
    /* 3377 b */ mov(eax,DWORD,PTR,64[rsp]);
    /* 3378 b */ mov(edi,eax);
    /* 3379 Y */ call($branchSize);
    /* 3380 b */ mov(DWORD,PTR,72[rsp],eax);
    /* 3381 b */ mov(eax,DWORD,PTR,68[rsp]);
    /* 3382 b */ lea(edx,1[rax]);
    /* 3383 b */ mov(eax,DWORD,PTR,72[rsp]);
    /* 3384 b */ add(eax,edx);
    /* 3385 b */ cmp(eax,2);
    /* 3386 X */ jle($L295);
    /* 3387 b */ mov(eax,0);
    /* 3388 X */ jmp($L299);
    $L295.set();
    /* 3389 b */ mov(eax,DWORD,PTR,60[rsp]);
    /* 3390 b */ mov(edi,eax);
    /* 3391 Y */ call($branch);
    /* 3392 b */ mov(rdx,rax);
    /* 3393 b */ lea(rax,140[rsp]);
    /* 3394 b */ mov(rsi,rdx);
    /* 3395 b */ mov(rdi,rax);
    /* 3396 Y */ call($branch_lastElement);
    /* 3397 b */ mov(eax,DWORD,PTR,44[rsp]);
    /* 3398 b */ mov(edi,eax);
    /* 3399 Y */ call($branch);
    /* 3400 b */ mov(rcx,rax);
    /* 3401 b */ lea(rax,160[rsp]);
    /* 3402 b */ mov(edx,DWORD,PTR,40[rsp]);
    /* 3403 b */ mov(rsi,rcx);
    /* 3404 b */ mov(rdi,rax);
    /* 3405 Y */ call($branch_elementAt);
    /* 3406 b */ mov(ebp,DWORD,PTR,156[rsp]);
    /* 3407 b */ mov(ebx,DWORD,PTR,172[rsp]);
    /* 3408 b */ mov(eax,DWORD,PTR,60[rsp]);
    /* 3409 b */ mov(edi,eax);
    /* 3410 Y */ call($branch);
    /* 3411 b */ mov(rdi,rax);
    /* 3412 b */ mov(eax,DWORD,PTR,68[rsp]);
    /* 3413 b */ mov(ecx,eax);
    /* 3414 b */ mov(edx,ebp);
    /* 3415 b */ mov(esi,ebx);
    /* 3416 Y */ call($branch_setElementAt);
    /* 3417 b */ mov(eax,DWORD,PTR,64[rsp]);
    /* 3418 b */ mov(edi,eax);
    /* 3419 Y */ call($branchSize);
    /* 3420 b */ mov(DWORD,PTR,76[rsp],eax);
    /* 3421 b */ mov(DWORD,PTR,52[rsp],0);
    /* 3422 X */ jmp($L297);
    $L298.set();
    /* 3423 b */ mov(eax,DWORD,PTR,64[rsp]);
    /* 3424 b */ mov(edi,eax);
    /* 3425 Y */ call($branch);
    /* 3426 b */ mov(rdx,rax);
    /* 3427 b */ lea(rax,180[rsp]);
    /* 3428 b */ mov(rsi,rdx);
    /* 3429 b */ mov(rdi,rax);
    /* 3430 Y */ call($branch_shift);
    /* 3431 b */ mov(ebp,DWORD,PTR,196[rsp]);
    /* 3432 b */ mov(ebx,DWORD,PTR,192[rsp]);
    /* 3433 b */ mov(eax,DWORD,PTR,60[rsp]);
    /* 3434 b */ mov(edi,eax);
    /* 3435 Y */ call($branch);
    /* 3436 b */ mov(edx,ebp);
    /* 3437 b */ mov(esi,ebx);
    /* 3438 b */ mov(rdi,rax);
    /* 3439 Y */ call($branch_push);
    /* 3440 b */ add(DWORD,PTR,52[rsp],1);
    $L297.set();
    /* 3441 b */ mov(eax,DWORD,PTR,52[rsp]);
    /* 3442 b */ cmp(eax,DWORD,PTR,76[rsp]);
    /* 3443 X */ jl($L298);
    /* 3444 b */ mov(eax,DWORD,PTR,64[rsp]);
    /* 3445 b */ mov(edi,eax);
    /* 3446 Y */ call($freeNode);
    $L294.set();
    /* 3447 b */ mov(eax,DWORD,PTR,40[rsp]);
    /* 3448 b */ lea(ebx,1[rax]);
    /* 3449 b */ mov(eax,DWORD,PTR,44[rsp]);
    /* 3450 b */ mov(edi,eax);
    /* 3451 Y */ call($branch);
    /* 3452 b */ mov(rcx,rax);
    /* 3453 b */ lea(rax,160[rsp]);
    /* 3454 b */ mov(edx,ebx);
    /* 3455 b */ mov(rsi,rcx);
    /* 3456 b */ mov(rdi,rax);
    /* 3457 Y */ call($branch_elementAt);
    /* 3458 b */ mov(eax,DWORD,PTR,44[rsp]);
    /* 3459 b */ mov(edi,eax);
    /* 3460 Y */ call($branch);
    /* 3461 b */ mov(rcx,rax);
    /* 3462 b */ lea(rax,180[rsp]);
    /* 3463 b */ mov(edx,DWORD,PTR,40[rsp]);
    /* 3464 b */ mov(rsi,rcx);
    /* 3465 b */ mov(rdi,rax);
    /* 3466 Y */ call($branch_elementAt);
    /* 3467 b */ mov(ebp,DWORD,PTR,196[rsp]);
    /* 3468 b */ mov(ebx,DWORD,PTR,172[rsp]);
    /* 3469 b */ mov(eax,DWORD,PTR,44[rsp]);
    /* 3470 b */ mov(edi,eax);
    /* 3471 Y */ call($branch);
    /* 3472 b */ mov(rdi,rax);
    /* 3473 b */ mov(eax,DWORD,PTR,40[rsp]);
    /* 3474 b */ mov(ecx,eax);
    /* 3475 b */ mov(edx,ebp);
    /* 3476 b */ mov(esi,ebx);
    /* 3477 Y */ call($branch_setElementAt);
    /* 3478 b */ mov(eax,DWORD,PTR,40[rsp]);
    /* 3479 b */ lea(ebx,1[rax]);
    /* 3480 b */ mov(eax,DWORD,PTR,44[rsp]);
    /* 3481 b */ mov(edi,eax);
    /* 3482 Y */ call($branch);
    /* 3483 b */ mov(rcx,rax);
    /* 3484 b */ mov(rax,rsp);
    /* 3485 b */ mov(edx,ebx);
    /* 3486 b */ mov(rsi,rcx);
    /* 3487 b */ mov(rdi,rax);
    /* 3488 Y */ call($branch_removeElementAt);
    /* 3489 b */ mov(eax,1);
    $L299.set();
    /* 3490 b */ mov(rdx,QWORD,PTR,200[rsp]);
    /* 3491 b */ sub(rdx,QWORD,PTR,fs:40);
    /* 3492 X */ je($L300);
    /* 3493 Y */ call($__stack_chk_fail@PLT);
    $L300.set();
    /* 3494 b */ add(rsp,216);
    /* 3495 b */ pop(rbx);
    /* 3496 b */ pop(rbp);
    /* 3497 b */ ret();
    $LFE97.set();
    $balance.set();
    $LFB98.set();
    /* 3498 b */ endbr64();
    /* 3499 b */ sub(rsp,56);
    /* 3500 b */ mov(DWORD,PTR,12[rsp],edi);
    /* 3501 b */ mov(DWORD,PTR,8[rsp],esi);
    /* 3502 b */ mov(rax,QWORD,PTR,fs:40);
    /* 3503 b */ mov(QWORD,PTR,40[rsp],rax);
    /* 3504 b */ xor(eax,eax);
    /* 3505 b */ mov(eax,DWORD,PTR,12[rsp]);
    /* 3506 b */ mov(edi,eax);
    /* 3507 Y */ call($branch);
    /* 3508 b */ mov(rcx,rax);
    /* 3509 b */ lea(rax,20[rsp]);
    /* 3510 b */ mov(edx,DWORD,PTR,8[rsp]);
    /* 3511 b */ mov(rsi,rcx);
    /* 3512 b */ mov(rdi,rax);
    /* 3513 Y */ call($branch_elementAt);
    /* 3514 b */ mov(eax,DWORD,PTR,36[rsp]);
    /* 3515 b */ mov(edi,eax);
    /* 3516 Y */ call($isLow);
    /* 3517 b */ test(eax,eax);
    /* 3518 X */ je($L310);
    /* 3519 b */ mov(edx,DWORD,PTR,8[rsp]);
    /* 3520 b */ mov(eax,DWORD,PTR,12[rsp]);
    /* 3521 b */ mov(esi,edx);
    /* 3522 b */ mov(edi,eax);
    /* 3523 Y */ call($stealFromLeft);
    /* 3524 b */ test(eax,eax);
    /* 3525 X */ jne($L311);
    /* 3526 b */ mov(edx,DWORD,PTR,8[rsp]);
    /* 3527 b */ mov(eax,DWORD,PTR,12[rsp]);
    /* 3528 b */ mov(esi,edx);
    /* 3529 b */ mov(edi,eax);
    /* 3530 Y */ call($stealFromRight);
    /* 3531 b */ test(eax,eax);
    /* 3532 X */ jne($L312);
    /* 3533 b */ mov(edx,DWORD,PTR,8[rsp]);
    /* 3534 b */ mov(eax,DWORD,PTR,12[rsp]);
    /* 3535 b */ mov(esi,edx);
    /* 3536 b */ mov(edi,eax);
    /* 3537 Y */ call($mergeLeftSibling);
    /* 3538 b */ test(eax,eax);
    /* 3539 X */ jne($L313);
    /* 3540 b */ mov(edx,DWORD,PTR,8[rsp]);
    /* 3541 b */ mov(eax,DWORD,PTR,12[rsp]);
    /* 3542 b */ mov(esi,edx);
    /* 3543 b */ mov(edi,eax);
    /* 3544 Y */ call($mergeRightSibling);
    /* 3545 b */ test(eax,eax);
    /* 3546 X */ jmp($L301);
    $L310.set();
    /* 3547 b */ nop();
    /* 3548 X */ jmp($L301);
    $L311.set();
    /* 3549 b */ nop();
    /* 3550 X */ jmp($L301);
    $L312.set();
    /* 3551 b */ nop();
    /* 3552 X */ jmp($L301);
    $L313.set();
    /* 3553 b */ nop();
    $L301.set();
    /* 3554 b */ mov(rax,QWORD,PTR,40[rsp]);
    /* 3555 b */ sub(rax,QWORD,PTR,fs:40);
    /* 3556 X */ je($L309);
    /* 3557 Y */ call($__stack_chk_fail@PLT);
    $L309.set();
    /* 3558 b */ add(rsp,56);
    /* 3559 b */ ret();
    $LFE98.set();
    $find_result.set();
    $LFB99.set();
    /* 3560 b */ endbr64();
    /* 3561 b */ mov(QWORD,PTR,-40[rsp],rdi);
    /* 3562 b */ mov(DWORD,PTR,-44[rsp],esi);
    /* 3563 b */ mov(DWORD,PTR,-48[rsp],edx);
    /* 3564 b */ mov(DWORD,PTR,-52[rsp],ecx);
    /* 3565 b */ mov(DWORD,PTR,-56[rsp],r8d);
    /* 3566 b */ mov(DWORD,PTR,-60[rsp],r9d);
    /* 3567 b */ mov(eax,DWORD,PTR,-44[rsp]);
    /* 3568 b */ mov(DWORD,PTR,-20[rsp],eax);
    /* 3569 b */ mov(eax,DWORD,PTR,-48[rsp]);
    /* 3570 b */ mov(DWORD,PTR,-16[rsp],eax);
    /* 3571 b */ mov(eax,DWORD,PTR,-52[rsp]);
    /* 3572 b */ mov(DWORD,PTR,-12[rsp],eax);
    /* 3573 b */ mov(eax,DWORD,PTR,-56[rsp]);
    /* 3574 b */ mov(DWORD,PTR,-8[rsp],eax);
    /* 3575 b */ mov(eax,DWORD,PTR,-60[rsp]);
    /* 3576 b */ mov(DWORD,PTR,-4[rsp],eax);
    /* 3577 b */ mov(rax,QWORD,PTR,-40[rsp]);
    /* 3578 b */ mov(rdx,QWORD,PTR,-20[rsp]);
    /* 3579 b */ mov(QWORD,PTR,[rax],rdx);
    /* 3580 b */ mov(rdx,QWORD,PTR,-12[rsp]);
    /* 3581 b */ mov(QWORD,PTR,8[rax],rdx);
    /* 3582 b */ mov(edx,DWORD,PTR,-4[rsp]);
    /* 3583 b */ mov(DWORD,PTR,16[rax],edx);
    /* 3584 b */ mov(rax,QWORD,PTR,-40[rsp]);
    /* 3585 b */ ret();
    $LFE99.set();
    $find.set();
    $LFB100.set();
    /* 3586 b */ endbr64();
    /* 3587 b */ sub(rsp,88);
    /* 3588 b */ mov(QWORD,PTR,8[rsp],rdi);
    /* 3589 b */ mov(DWORD,PTR,4[rsp],esi);
    /* 3590 b */ mov(rax,QWORD,PTR,fs:40);
    /* 3591 b */ mov(QWORD,PTR,72[rsp],rax);
    /* 3592 b */ xor(eax,eax);
    /* 3593 b */ mov(eax,0);
    /* 3594 Y */ call($rootIsLeaf);
    /* 3595 b */ test(eax,eax);
    /* 3596 X */ je($L317);
    /* 3597 b */ mov(edi,0);
    /* 3598 Y */ call($leaf);
    /* 3599 b */ mov(rcx,rax);
    /* 3600 b */ lea(rax,52[rsp]);
    /* 3601 b */ mov(edx,DWORD,PTR,4[rsp]);
    /* 3602 b */ mov(rsi,rcx);
    /* 3603 b */ mov(rdi,rax);
    /* 3604 Y */ call($leaf_search);
    /* 3605 b */ movzx(eax,BYTE,PTR,68[rsp]);
    /* 3606 b */ movsx(edi,al);
    /* 3607 b */ mov(ecx,DWORD,PTR,60[rsp]);
    /* 3608 b */ mov(edx,DWORD,PTR,56[rsp]);
    /* 3609 b */ mov(rax,QWORD,PTR,8[rsp]);
    /* 3610 b */ mov(esi,DWORD,PTR,4[rsp]);
    /* 3611 b */ mov(r9d,edi);
    /* 3612 b */ mov(r8d,esi);
    /* 3613 b */ mov(esi,0);
    /* 3614 b */ mov(rdi,rax);
    /* 3615 Y */ call($find_result);
    /* 3616 X */ jmp($L322);
    $L317.set();
    /* 3617 b */ mov(DWORD,PTR,20[rsp],0);
    /* 3618 b */ mov(DWORD,PTR,24[rsp],0);
    /* 3619 X */ jmp($L319);
    $L321.set();
    /* 3620 b */ mov(eax,DWORD,PTR,20[rsp]);
    /* 3621 b */ mov(edi,eax);
    /* 3622 Y */ call($branch);
    /* 3623 b */ mov(rcx,rax);
    /* 3624 b */ lea(rax,32[rsp]);
    /* 3625 b */ mov(edx,DWORD,PTR,4[rsp]);
    /* 3626 b */ mov(rsi,rcx);
    /* 3627 b */ mov(rdi,rax);
    /* 3628 Y */ call($branch_searchFirstGreaterThanOrEqualExceptLast);
    /* 3629 b */ mov(eax,DWORD,PTR,48[rsp]);
    /* 3630 b */ mov(DWORD,PTR,28[rsp],eax);
    /* 3631 b */ mov(eax,DWORD,PTR,28[rsp]);
    /* 3632 b */ mov(edi,eax);
    /* 3633 Y */ call($isLeaf);
    /* 3634 b */ test(eax,eax);
    /* 3635 X */ je($L320);
    /* 3636 b */ mov(eax,DWORD,PTR,28[rsp]);
    /* 3637 b */ mov(edi,eax);
    /* 3638 Y */ call($leaf);
    /* 3639 b */ mov(rcx,rax);
    /* 3640 b */ lea(rax,52[rsp]);
    /* 3641 b */ mov(edx,DWORD,PTR,4[rsp]);
    /* 3642 b */ mov(rsi,rcx);
    /* 3643 b */ mov(rdi,rax);
    /* 3644 Y */ call($leaf_search);
    /* 3645 b */ movzx(eax,BYTE,PTR,68[rsp]);
    /* 3646 b */ movsx(r8d,al);
    /* 3647 b */ mov(ecx,DWORD,PTR,60[rsp]);
    /* 3648 b */ mov(edx,DWORD,PTR,56[rsp]);
    /* 3649 b */ mov(rax,QWORD,PTR,8[rsp]);
    /* 3650 b */ mov(edi,DWORD,PTR,4[rsp]);
    /* 3651 b */ mov(esi,DWORD,PTR,28[rsp]);
    /* 3652 b */ mov(r9d,r8d);
    /* 3653 b */ mov(r8d,edi);
    /* 3654 b */ mov(rdi,rax);
    /* 3655 Y */ call($find_result);
    /* 3656 X */ jmp($L322);
    $L320.set();
    /* 3657 b */ mov(eax,DWORD,PTR,28[rsp]);
    /* 3658 b */ mov(DWORD,PTR,20[rsp],eax);
    /* 3659 b */ add(DWORD,PTR,24[rsp],1);
    $L319.set();
    /* 3660 b */ cmp(DWORD,PTR,24[rsp],9);
    /* 3661 X */ jle($L321);
    /* 3662 b */ mov(DWORD,PTR,52[rsp],0);
    /* 3663 b */ mov(DWORD,PTR,56[rsp],0);
    /* 3664 b */ mov(DWORD,PTR,60[rsp],0);
    /* 3665 b */ mov(DWORD,PTR,64[rsp],0);
    /* 3666 b */ mov(DWORD,PTR,68[rsp],0);
    /* 3667 b */ mov(rax,QWORD,PTR,8[rsp]);
    /* 3668 b */ mov(rdx,QWORD,PTR,52[rsp]);
    /* 3669 b */ mov(QWORD,PTR,[rax],rdx);
    /* 3670 b */ mov(rdx,QWORD,PTR,60[rsp]);
    /* 3671 b */ mov(QWORD,PTR,8[rax],rdx);
    /* 3672 b */ mov(edx,DWORD,PTR,68[rsp]);
    /* 3673 b */ mov(DWORD,PTR,16[rax],edx);
    $L322.set();
    /* 3674 b */ mov(rax,QWORD,PTR,72[rsp]);
    /* 3675 b */ sub(rax,QWORD,PTR,fs:40);
    /* 3676 X */ je($L323);
    /* 3677 Y */ call($__stack_chk_fail@PLT);
    $L323.set();
    /* 3678 b */ mov(rax,QWORD,PTR,8[rsp]);
    /* 3679 b */ add(rsp,88);
    /* 3680 b */ ret();
    $LFE100.set();
    $findAndInsert_result.set();
    $LFB101.set();
    /* 3681 b */ endbr64();
    /* 3682 b */ mov(QWORD,PTR,-40[rsp],rdi);
    /* 3683 b */ mov(DWORD,PTR,-44[rsp],esi);
    /* 3684 b */ mov(DWORD,PTR,-48[rsp],edx);
    /* 3685 b */ mov(rax,QWORD,PTR,8[rsp]);
    /* 3686 b */ mov(QWORD,PTR,-20[rsp],rax);
    /* 3687 b */ mov(rax,QWORD,PTR,16[rsp]);
    /* 3688 b */ mov(QWORD,PTR,-12[rsp],rax);
    /* 3689 b */ mov(eax,DWORD,PTR,24[rsp]);
    /* 3690 b */ mov(DWORD,PTR,-4[rsp],eax);
    /* 3691 b */ mov(eax,DWORD,PTR,-44[rsp]);
    /* 3692 b */ mov(DWORD,PTR,-28[rsp],eax);
    /* 3693 b */ mov(eax,DWORD,PTR,-48[rsp]);
    /* 3694 b */ mov(DWORD,PTR,-24[rsp],eax);
    /* 3695 b */ mov(rax,QWORD,PTR,-40[rsp]);
    /* 3696 b */ mov(rdx,QWORD,PTR,-28[rsp]);
    /* 3697 b */ mov(QWORD,PTR,[rax],rdx);
    /* 3698 b */ mov(rdx,QWORD,PTR,-20[rsp]);
    /* 3699 b */ mov(QWORD,PTR,8[rax],rdx);
    /* 3700 b */ mov(rdx,QWORD,PTR,-12[rsp]);
    /* 3701 b */ mov(QWORD,PTR,16[rax],rdx);
    /* 3702 b */ mov(edx,DWORD,PTR,-4[rsp]);
    /* 3703 b */ mov(DWORD,PTR,24[rax],edx);
    /* 3704 b */ mov(rax,QWORD,PTR,-40[rsp]);
    /* 3705 b */ ret();
    $LFE101.set();
    $findAndInsert.set();
    $LFB102.set();
    /* 3706 b */ endbr64();
    /* 3707 b */ push(rbx);
    /* 3708 b */ sub(rsp,64);
    /* 3709 b */ mov(QWORD,PTR,8[rsp],rdi);
    /* 3710 b */ mov(DWORD,PTR,4[rsp],esi);
    /* 3711 b */ mov(DWORD,PTR,[rsp],edx);
    /* 3712 b */ mov(rax,QWORD,PTR,fs:40);
    /* 3713 b */ mov(QWORD,PTR,56[rsp],rax);
    /* 3714 b */ xor(eax,eax);
    /* 3715 b */ lea(rax,16[rsp]);
    /* 3716 b */ mov(edx,DWORD,PTR,4[rsp]);
    /* 3717 b */ mov(esi,edx);
    /* 3718 b */ mov(rdi,rax);
    /* 3719 Y */ call($find);
    /* 3720 b */ mov(eax,DWORD,PTR,20[rsp]);
    /* 3721 b */ test(eax,eax);
    /* 3722 X */ je($L327);
    /* 3723 b */ mov(ebx,DWORD,PTR,24[rsp]);
    /* 3724 b */ mov(eax,DWORD,PTR,16[rsp]);
    /* 3725 b */ mov(edi,eax);
    /* 3726 Y */ call($leaf);
    /* 3727 b */ mov(rdi,rax);
    /* 3728 b */ mov(edx,DWORD,PTR,[rsp]);
    /* 3729 b */ mov(eax,DWORD,PTR,4[rsp]);
    /* 3730 b */ mov(ecx,ebx);
    /* 3731 b */ mov(esi,eax);
    /* 3732 Y */ call($leaf_setElementAt);
    /* 3733 b */ mov(rcx,QWORD,PTR,8[rsp]);
    /* 3734 b */ sub(rsp,8);
    /* 3735 b */ sub(rsp,24);
    /* 3736 b */ mov(rax,rsp);
    /* 3737 b */ mov(rdx,QWORD,PTR,48[rsp]);
    /* 3738 b */ mov(QWORD,PTR,[rax],rdx);
    /* 3739 b */ mov(rdx,QWORD,PTR,56[rsp]);
    /* 3740 b */ mov(QWORD,PTR,8[rax],rdx);
    /* 3741 b */ mov(edx,DWORD,PTR,64[rsp]);
    /* 3742 b */ mov(DWORD,PTR,16[rax],edx);
    /* 3743 b */ mov(edx,0);
    /* 3744 b */ mov(esi,1);
    /* 3745 b */ mov(rdi,rcx);
    /* 3746 Y */ call($findAndInsert_result);
    /* 3747 b */ add(rsp,32);
    /* 3748 X */ jmp($L332);
    $L327.set();
    /* 3749 b */ mov(eax,DWORD,PTR,16[rsp]);
    /* 3750 b */ mov(edi,eax);
    /* 3751 Y */ call($isFull);
    /* 3752 b */ test(eax,eax);
    /* 3753 X */ jne($L329);
    /* 3754 b */ mov(eax,DWORD,PTR,16[rsp]);
    /* 3755 b */ mov(edi,eax);
    /* 3756 Y */ call($leaf);
    /* 3757 b */ mov(rcx,rax);
    /* 3758 b */ lea(rax,36[rsp]);
    /* 3759 b */ mov(edx,DWORD,PTR,4[rsp]);
    /* 3760 b */ mov(rsi,rcx);
    /* 3761 b */ mov(rdi,rax);
    /* 3762 Y */ call($leaf_searchFirstGreaterThanOrEqual);
    /* 3763 b */ mov(eax,DWORD,PTR,40[rsp]);
    /* 3764 b */ test(eax,eax);
    /* 3765 X */ je($L330);
    /* 3766 b */ mov(ebx,DWORD,PTR,24[rsp]);
    /* 3767 b */ mov(eax,DWORD,PTR,16[rsp]);
    /* 3768 b */ mov(edi,eax);
    /* 3769 Y */ call($leaf);
    /* 3770 b */ mov(rdi,rax);
    /* 3771 b */ mov(edx,DWORD,PTR,[rsp]);
    /* 3772 b */ mov(eax,DWORD,PTR,4[rsp]);
    /* 3773 b */ mov(ecx,ebx);
    /* 3774 b */ mov(esi,eax);
    /* 3775 Y */ call($leaf_insertElementAt);
    /* 3776 X */ jmp($L331);
    $L330.set();
    /* 3777 b */ mov(eax,DWORD,PTR,16[rsp]);
    /* 3778 b */ mov(edi,eax);
    /* 3779 Y */ call($leaf);
    /* 3780 b */ mov(rcx,rax);
    /* 3781 b */ mov(edx,DWORD,PTR,[rsp]);
    /* 3782 b */ mov(eax,DWORD,PTR,4[rsp]);
    /* 3783 b */ mov(esi,eax);
    /* 3784 b */ mov(rdi,rcx);
    /* 3785 Y */ call($leaf_push);
    $L331.set();
    /* 3786 b */ mov(rcx,QWORD,PTR,8[rsp]);
    /* 3787 b */ sub(rsp,8);
    /* 3788 b */ sub(rsp,24);
    /* 3789 b */ mov(rax,rsp);
    /* 3790 b */ mov(rdx,QWORD,PTR,48[rsp]);
    /* 3791 b */ mov(QWORD,PTR,[rax],rdx);
    /* 3792 b */ mov(rdx,QWORD,PTR,56[rsp]);
    /* 3793 b */ mov(QWORD,PTR,8[rax],rdx);
    /* 3794 b */ mov(edx,DWORD,PTR,64[rsp]);
    /* 3795 b */ mov(DWORD,PTR,16[rax],edx);
    /* 3796 b */ mov(edx,1);
    /* 3797 b */ mov(esi,1);
    /* 3798 b */ mov(rdi,rcx);
    /* 3799 Y */ call($findAndInsert_result);
    /* 3800 b */ add(rsp,32);
    /* 3801 X */ jmp($L332);
    $L329.set();
    /* 3802 b */ mov(rcx,QWORD,PTR,8[rsp]);
    /* 3803 b */ sub(rsp,8);
    /* 3804 b */ sub(rsp,24);
    /* 3805 b */ mov(rax,rsp);
    /* 3806 b */ mov(rdx,QWORD,PTR,48[rsp]);
    /* 3807 b */ mov(QWORD,PTR,[rax],rdx);
    /* 3808 b */ mov(rdx,QWORD,PTR,56[rsp]);
    /* 3809 b */ mov(QWORD,PTR,8[rax],rdx);
    /* 3810 b */ mov(edx,DWORD,PTR,64[rsp]);
    /* 3811 b */ mov(DWORD,PTR,16[rax],edx);
    /* 3812 b */ mov(edx,0);
    /* 3813 b */ mov(esi,0);
    /* 3814 b */ mov(rdi,rcx);
    /* 3815 Y */ call($findAndInsert_result);
    /* 3816 b */ add(rsp,32);
    $L332.set();
    /* 3817 b */ mov(rax,QWORD,PTR,56[rsp]);
    /* 3818 b */ sub(rax,QWORD,PTR,fs:40);
    /* 3819 X */ je($L333);
    /* 3820 Y */ call($__stack_chk_fail@PLT);
    $L333.set();
    /* 3821 b */ mov(rax,QWORD,PTR,8[rsp]);
    /* 3822 b */ add(rsp,64);
    /* 3823 b */ pop(rbx);
    /* 3824 b */ ret();
    $LFE102.set();
    $put.set();
    $LFB103.set();
    /* 3825 b */ endbr64();
    /* 3826 b */ sub(rsp,152);
    /* 3827 b */ mov(DWORD,PTR,44[rsp],edi);
    /* 3828 b */ mov(DWORD,PTR,40[rsp],esi);
    /* 3829 b */ mov(rax,QWORD,PTR,fs:40);
    /* 3830 b */ mov(QWORD,PTR,136[rsp],rax);
    /* 3831 b */ xor(eax,eax);
    /* 3832 b */ lea(rax,80[rsp]);
    /* 3833 b */ mov(edx,DWORD,PTR,40[rsp]);
    /* 3834 b */ mov(ecx,DWORD,PTR,44[rsp]);
    /* 3835 b */ mov(esi,ecx);
    /* 3836 b */ mov(rdi,rax);
    /* 3837 Y */ call($findAndInsert);
    /* 3838 b */ mov(eax,DWORD,PTR,80[rsp]);
    /* 3839 b */ test(eax,eax);
    /* 3840 X */ jne($L350);
    /* 3841 b */ mov(eax,0);
    /* 3842 Y */ call($isFullRoot);
    /* 3843 b */ test(eax,eax);
    /* 3844 X */ je($L337);
    /* 3845 b */ mov(eax,0);
    /* 3846 Y */ call($rootIsLeaf);
    /* 3847 b */ test(eax,eax);
    /* 3848 X */ je($L338);
    /* 3849 b */ mov(eax,0);
    /* 3850 Y */ call($splitLeafRoot);
    /* 3851 X */ jmp($L339);
    $L338.set();
    /* 3852 b */ mov(eax,0);
    /* 3853 Y */ call($splitBranchRoot);
    $L339.set();
    /* 3854 b */ lea(rax,108[rsp]);
    /* 3855 b */ mov(edx,DWORD,PTR,40[rsp]);
    /* 3856 b */ mov(ecx,DWORD,PTR,44[rsp]);
    /* 3857 b */ mov(esi,ecx);
    /* 3858 b */ mov(rdi,rax);
    /* 3859 Y */ call($findAndInsert);
    /* 3860 b */ mov(eax,DWORD,PTR,108[rsp]);
    /* 3861 b */ test(eax,eax);
    /* 3862 X */ jne($L351);
    $L337.set();
    /* 3863 b */ mov(DWORD,PTR,48[rsp],0);
    /* 3864 b */ mov(DWORD,PTR,52[rsp],0);
    /* 3865 X */ jmp($L342);
    $L346.set();
    /* 3866 b */ mov(eax,DWORD,PTR,48[rsp]);
    /* 3867 b */ mov(edi,eax);
    /* 3868 Y */ call($branch);
    /* 3869 b */ mov(rcx,rax);
    /* 3870 b */ lea(rax,60[rsp]);
    /* 3871 b */ mov(edx,DWORD,PTR,44[rsp]);
    /* 3872 b */ mov(rsi,rcx);
    /* 3873 b */ mov(rdi,rax);
    /* 3874 Y */ call($branch_searchFirstGreaterThanOrEqualExceptLast);
    /* 3875 b */ mov(eax,DWORD,PTR,76[rsp]);
    /* 3876 b */ mov(DWORD,PTR,56[rsp],eax);
    /* 3877 b */ mov(eax,DWORD,PTR,56[rsp]);
    /* 3878 b */ mov(edi,eax);
    /* 3879 Y */ call($isLeaf);
    /* 3880 b */ test(eax,eax);
    /* 3881 X */ je($L343);
    /* 3882 b */ mov(edx,DWORD,PTR,68[rsp]);
    /* 3883 b */ mov(ecx,DWORD,PTR,48[rsp]);
    /* 3884 b */ mov(eax,DWORD,PTR,56[rsp]);
    /* 3885 b */ mov(esi,ecx);
    /* 3886 b */ mov(edi,eax);
    /* 3887 Y */ call($splitLeaf);
    /* 3888 b */ mov(rax,rsp);
    /* 3889 b */ mov(edx,DWORD,PTR,40[rsp]);
    /* 3890 b */ mov(ecx,DWORD,PTR,44[rsp]);
    /* 3891 b */ mov(esi,ecx);
    /* 3892 b */ mov(rdi,rax);
    /* 3893 Y */ call($findAndInsert);
    /* 3894 b */ mov(eax,DWORD,PTR,44[rsp]);
    /* 3895 b */ mov(edi,eax);
    /* 3896 Y */ call($merge);
    /* 3897 X */ jmp($L334);
    $L343.set();
    /* 3898 b */ mov(eax,DWORD,PTR,56[rsp]);
    /* 3899 b */ mov(edi,eax);
    /* 3900 Y */ call($isFull);
    /* 3901 b */ test(eax,eax);
    /* 3902 X */ je($L344);
    /* 3903 b */ mov(edx,DWORD,PTR,68[rsp]);
    /* 3904 b */ mov(ecx,DWORD,PTR,48[rsp]);
    /* 3905 b */ mov(eax,DWORD,PTR,56[rsp]);
    /* 3906 b */ mov(esi,ecx);
    /* 3907 b */ mov(edi,eax);
    /* 3908 Y */ call($splitBranch);
    /* 3909 b */ mov(eax,DWORD,PTR,48[rsp]);
    /* 3910 b */ mov(edi,eax);
    /* 3911 Y */ call($branch);
    /* 3912 b */ mov(rcx,rax);
    /* 3913 b */ lea(rax,108[rsp]);
    /* 3914 b */ mov(edx,DWORD,PTR,44[rsp]);
    /* 3915 b */ mov(rsi,rcx);
    /* 3916 b */ mov(rdi,rax);
    /* 3917 Y */ call($branch_searchFirstGreaterThanOrEqualExceptLast);
    /* 3918 b */ mov(eax,DWORD,PTR,124[rsp]);
    /* 3919 b */ mov(DWORD,PTR,48[rsp],eax);
    /* 3920 X */ jmp($L349);
    $L344.set();
    /* 3921 b */ mov(eax,DWORD,PTR,56[rsp]);
    /* 3922 b */ mov(DWORD,PTR,48[rsp],eax);
    $L349.set();
    /* 3923 b */ add(DWORD,PTR,52[rsp],1);
    $L342.set();
    /* 3924 b */ cmp(DWORD,PTR,52[rsp],9);
    /* 3925 X */ jle($L346);
    /* 3926 X */ jmp($L334);
    $L350.set();
    /* 3927 b */ nop();
    /* 3928 X */ jmp($L334);
    $L351.set();
    /* 3929 b */ nop();
    $L334.set();
    /* 3930 b */ mov(rax,QWORD,PTR,136[rsp]);
    /* 3931 b */ sub(rax,QWORD,PTR,fs:40);
    /* 3932 X */ je($L348);
    /* 3933 Y */ call($__stack_chk_fail@PLT);
    $L348.set();
    /* 3934 b */ add(rsp,152);
    /* 3935 b */ ret();
    $LFE103.set();
    $findAndDelete_result.set();
    $LFB104.set();
    /* 3936 b */ endbr64();
    /* 3937 b */ mov(QWORD,PTR,-40[rsp],rdi);
    /* 3938 b */ mov(DWORD,PTR,-44[rsp],esi);
    /* 3939 b */ mov(DWORD,PTR,-48[rsp],edx);
    /* 3940 b */ mov(rax,QWORD,PTR,8[rsp]);
    /* 3941 b */ mov(QWORD,PTR,-20[rsp],rax);
    /* 3942 b */ mov(rax,QWORD,PTR,16[rsp]);
    /* 3943 b */ mov(QWORD,PTR,-12[rsp],rax);
    /* 3944 b */ mov(eax,DWORD,PTR,24[rsp]);
    /* 3945 b */ mov(DWORD,PTR,-4[rsp],eax);
    /* 3946 b */ mov(eax,DWORD,PTR,-44[rsp]);
    /* 3947 b */ mov(DWORD,PTR,-28[rsp],eax);
    /* 3948 b */ mov(eax,DWORD,PTR,-48[rsp]);
    /* 3949 b */ mov(DWORD,PTR,-24[rsp],eax);
    /* 3950 b */ mov(rax,QWORD,PTR,-40[rsp]);
    /* 3951 b */ mov(rdx,QWORD,PTR,-28[rsp]);
    /* 3952 b */ mov(QWORD,PTR,[rax],rdx);
    /* 3953 b */ mov(rdx,QWORD,PTR,-20[rsp]);
    /* 3954 b */ mov(QWORD,PTR,8[rax],rdx);
    /* 3955 b */ mov(rdx,QWORD,PTR,-12[rsp]);
    /* 3956 b */ mov(QWORD,PTR,16[rax],rdx);
    /* 3957 b */ mov(edx,DWORD,PTR,-4[rsp]);
    /* 3958 b */ mov(DWORD,PTR,24[rax],edx);
    /* 3959 b */ mov(rax,QWORD,PTR,-40[rsp]);
    /* 3960 b */ ret();
    $LFE104.set();
    $findAndDelete.set();
    $LFB105.set();
    /* 3961 b */ endbr64();
    /* 3962 b */ sub(rsp,120);
    /* 3963 b */ mov(QWORD,PTR,40[rsp],rdi);
    /* 3964 b */ mov(DWORD,PTR,36[rsp],esi);
    /* 3965 b */ mov(rax,QWORD,PTR,fs:40);
    /* 3966 b */ mov(QWORD,PTR,104[rsp],rax);
    /* 3967 b */ xor(eax,eax);
    /* 3968 b */ lea(rax,64[rsp]);
    /* 3969 b */ mov(edx,DWORD,PTR,36[rsp]);
    /* 3970 b */ mov(esi,edx);
    /* 3971 b */ mov(rdi,rax);
    /* 3972 Y */ call($find);
    /* 3973 b */ mov(eax,DWORD,PTR,68[rsp]);
    /* 3974 b */ test(eax,eax);
    /* 3975 X */ jne($L355);
    /* 3976 b */ mov(rcx,QWORD,PTR,40[rsp]);
    /* 3977 b */ sub(rsp,8);
    /* 3978 b */ sub(rsp,24);
    /* 3979 b */ mov(rax,rsp);
    /* 3980 b */ mov(rdx,QWORD,PTR,96[rsp]);
    /* 3981 b */ mov(QWORD,PTR,[rax],rdx);
    /* 3982 b */ mov(rdx,QWORD,PTR,104[rsp]);
    /* 3983 b */ mov(QWORD,PTR,8[rax],rdx);
    /* 3984 b */ mov(edx,DWORD,PTR,112[rsp]);
    /* 3985 b */ mov(DWORD,PTR,16[rax],edx);
    /* 3986 b */ mov(edx,0);
    /* 3987 b */ mov(esi,0);
    /* 3988 b */ mov(rdi,rcx);
    /* 3989 Y */ call($findAndDelete_result);
    /* 3990 b */ add(rsp,32);
    /* 3991 X */ jmp($L357);
    $L355.set();
    /* 3992 b */ mov(eax,DWORD,PTR,64[rsp]);
    /* 3993 b */ mov(DWORD,PTR,56[rsp],eax);
    /* 3994 b */ mov(eax,DWORD,PTR,72[rsp]);
    /* 3995 b */ mov(DWORD,PTR,60[rsp],eax);
    /* 3996 b */ mov(eax,DWORD,PTR,56[rsp]);
    /* 3997 b */ mov(edi,eax);
    /* 3998 Y */ call($leaf);
    /* 3999 b */ mov(rcx,rax);
    /* 4000 b */ lea(rax,84[rsp]);
    /* 4001 b */ mov(edx,DWORD,PTR,60[rsp]);
    /* 4002 b */ mov(rsi,rcx);
    /* 4003 b */ mov(rdi,rax);
    /* 4004 Y */ call($leaf_elementAt);
    /* 4005 b */ mov(eax,DWORD,PTR,56[rsp]);
    /* 4006 b */ mov(edi,eax);
    /* 4007 Y */ call($leaf);
    /* 4008 b */ mov(rcx,rax);
    /* 4009 b */ mov(rax,rsp);
    /* 4010 b */ mov(edx,DWORD,PTR,60[rsp]);
    /* 4011 b */ mov(rsi,rcx);
    /* 4012 b */ mov(rdi,rax);
    /* 4013 Y */ call($leaf_removeElementAt);
    /* 4014 b */ movzx(eax,BYTE,PTR,100[rsp]);
    /* 4015 b */ movsx(edx,al);
    /* 4016 b */ mov(rcx,QWORD,PTR,40[rsp]);
    /* 4017 b */ sub(rsp,8);
    /* 4018 b */ sub(rsp,24);
    /* 4019 b */ mov(rax,rsp);
    /* 4020 b */ mov(rsi,QWORD,PTR,96[rsp]);
    /* 4021 b */ mov(QWORD,PTR,[rax],rsi);
    /* 4022 b */ mov(rsi,QWORD,PTR,104[rsp]);
    /* 4023 b */ mov(QWORD,PTR,8[rax],rsi);
    /* 4024 b */ mov(esi,DWORD,PTR,112[rsp]);
    /* 4025 b */ mov(DWORD,PTR,16[rax],esi);
    /* 4026 b */ mov(esi,1);
    /* 4027 b */ mov(rdi,rcx);
    /* 4028 Y */ call($findAndDelete_result);
    /* 4029 b */ add(rsp,32);
    $L357.set();
    /* 4030 b */ mov(rax,QWORD,PTR,104[rsp]);
    /* 4031 b */ sub(rax,QWORD,PTR,fs:40);
    /* 4032 X */ je($L358);
    /* 4033 Y */ call($__stack_chk_fail@PLT);
    $L358.set();
    /* 4034 b */ mov(rax,QWORD,PTR,40[rsp]);
    /* 4035 b */ add(rsp,120);
    /* 4036 b */ ret();
    $LFE105.set();
    $delete.set();
    $LFB106.set();
    /* 4037 b */ endbr64();
    /* 4038 b */ sub(rsp,104);
    /* 4039 b */ mov(QWORD,PTR,8[rsp],rdi);
    /* 4040 b */ mov(DWORD,PTR,4[rsp],esi);
    /* 4041 b */ mov(rax,QWORD,PTR,fs:40);
    /* 4042 b */ mov(QWORD,PTR,88[rsp],rax);
    /* 4043 b */ xor(eax,eax);
    /* 4044 b */ mov(eax,0);
    /* 4045 Y */ call($mergeRoot);
    /* 4046 b */ mov(eax,0);
    /* 4047 Y */ call($rootIsLeaf);
    /* 4048 b */ test(eax,eax);
    /* 4049 X */ je($L360);
    /* 4050 b */ mov(rax,QWORD,PTR,8[rsp]);
    /* 4051 b */ mov(edx,DWORD,PTR,4[rsp]);
    /* 4052 b */ mov(esi,edx);
    /* 4053 b */ mov(rdi,rax);
    /* 4054 Y */ call($findAndDelete);
    /* 4055 X */ jmp($L359);
    $L360.set();
    /* 4056 b */ mov(DWORD,PTR,28[rsp],0);
    /* 4057 b */ mov(DWORD,PTR,32[rsp],0);
    /* 4058 X */ jmp($L362);
    $L364.set();
    /* 4059 b */ mov(eax,DWORD,PTR,28[rsp]);
    /* 4060 b */ mov(edi,eax);
    /* 4061 Y */ call($branch);
    /* 4062 b */ mov(rcx,rax);
    /* 4063 b */ lea(rax,40[rsp]);
    /* 4064 b */ mov(edx,DWORD,PTR,4[rsp]);
    /* 4065 b */ mov(rsi,rcx);
    /* 4066 b */ mov(rdi,rax);
    /* 4067 Y */ call($branch_searchFirstGreaterThanOrEqualExceptLast);
    /* 4068 b */ mov(edx,DWORD,PTR,48[rsp]);
    /* 4069 b */ mov(eax,DWORD,PTR,28[rsp]);
    /* 4070 b */ mov(esi,edx);
    /* 4071 b */ mov(edi,eax);
    /* 4072 Y */ call($balance);
    /* 4073 b */ mov(eax,DWORD,PTR,56[rsp]);
    /* 4074 b */ mov(DWORD,PTR,36[rsp],eax);
    /* 4075 b */ mov(eax,DWORD,PTR,36[rsp]);
    /* 4076 b */ mov(edi,eax);
    /* 4077 Y */ call($isLeaf);
    /* 4078 b */ test(eax,eax);
    /* 4079 X */ je($L363);
    /* 4080 b */ lea(rax,60[rsp]);
    /* 4081 b */ mov(edx,DWORD,PTR,4[rsp]);
    /* 4082 b */ mov(esi,edx);
    /* 4083 b */ mov(rdi,rax);
    /* 4084 Y */ call($findAndDelete);
    /* 4085 b */ mov(eax,DWORD,PTR,4[rsp]);
    /* 4086 b */ mov(edi,eax);
    /* 4087 Y */ call($merge);
    /* 4088 b */ mov(rax,QWORD,PTR,8[rsp]);
    /* 4089 b */ mov(rdx,QWORD,PTR,60[rsp]);
    /* 4090 b */ mov(QWORD,PTR,[rax],rdx);
    /* 4091 b */ mov(rdx,QWORD,PTR,68[rsp]);
    /* 4092 b */ mov(QWORD,PTR,8[rax],rdx);
    /* 4093 b */ mov(rdx,QWORD,PTR,76[rsp]);
    /* 4094 b */ mov(QWORD,PTR,16[rax],rdx);
    /* 4095 b */ mov(edx,DWORD,PTR,84[rsp]);
    /* 4096 b */ mov(DWORD,PTR,24[rax],edx);
    /* 4097 X */ jmp($L359);
    $L363.set();
    /* 4098 b */ mov(eax,DWORD,PTR,36[rsp]);
    /* 4099 b */ mov(DWORD,PTR,28[rsp],eax);
    /* 4100 b */ add(DWORD,PTR,32[rsp],1);
    $L362.set();
    /* 4101 b */ cmp(DWORD,PTR,32[rsp],9);
    /* 4102 X */ jle($L364);
    /* 4103 b */ mov(QWORD,PTR,60[rsp],0);
    /* 4104 b */ mov(QWORD,PTR,68[rsp],0);
    /* 4105 b */ mov(QWORD,PTR,76[rsp],0);
    /* 4106 b */ mov(DWORD,PTR,84[rsp],0);
    /* 4107 b */ mov(rax,QWORD,PTR,8[rsp]);
    /* 4108 b */ mov(rdx,QWORD,PTR,60[rsp]);
    /* 4109 b */ mov(QWORD,PTR,[rax],rdx);
    /* 4110 b */ mov(rdx,QWORD,PTR,68[rsp]);
    /* 4111 b */ mov(QWORD,PTR,8[rax],rdx);
    /* 4112 b */ mov(rdx,QWORD,PTR,76[rsp]);
    /* 4113 b */ mov(QWORD,PTR,16[rax],rdx);
    /* 4114 b */ mov(edx,DWORD,PTR,84[rsp]);
    /* 4115 b */ mov(DWORD,PTR,24[rax],edx);
    $L359.set();
    /* 4116 b */ mov(rax,QWORD,PTR,88[rsp]);
    /* 4117 b */ sub(rax,QWORD,PTR,fs:40);
    /* 4118 X */ je($L366);
    /* 4119 Y */ call($__stack_chk_fail@PLT);
    $L366.set();
    /* 4120 b */ mov(rax,QWORD,PTR,8[rsp]);
    /* 4121 b */ add(rsp,104);
    /* 4122 b */ ret();
    $LFE106.set();
    $merge.set();
    $LFB107.set();
    /* 4123 b */ endbr64();
    /* 4124 b */ sub(rsp,72);
    /* 4125 b */ mov(DWORD,PTR,12[rsp],edi);
    /* 4126 b */ mov(rax,QWORD,PTR,fs:40);
    /* 4127 b */ mov(QWORD,PTR,56[rsp],rax);
    /* 4128 b */ xor(eax,eax);
    /* 4129 b */ mov(eax,0);
    /* 4130 Y */ call($mergeRoot);
    /* 4131 b */ mov(DWORD,PTR,24[rsp],0);
    /* 4132 b */ mov(DWORD,PTR,28[rsp],0);
    /* 4133 X */ jmp($L368);
    $L375.set();
    /* 4134 b */ mov(eax,DWORD,PTR,24[rsp]);
    /* 4135 b */ mov(edi,eax);
    /* 4136 Y */ call($isLeaf);
    /* 4137 b */ test(eax,eax);
    /* 4138 X */ jne($L377);
    /* 4139 b */ mov(DWORD,PTR,32[rsp],0);
    /* 4140 X */ jmp($L371);
    $L373.set();
    /* 4141 b */ mov(edx,DWORD,PTR,32[rsp]);
    /* 4142 b */ mov(eax,DWORD,PTR,24[rsp]);
    /* 4143 b */ mov(esi,edx);
    /* 4144 b */ mov(edi,eax);
    /* 4145 Y */ call($mergeLeftSibling);
    /* 4146 b */ test(eax,eax);
    /* 4147 X */ je($L372);
    /* 4148 b */ sub(DWORD,PTR,32[rsp],1);
    $L372.set();
    /* 4149 b */ mov(edx,DWORD,PTR,32[rsp]);
    /* 4150 b */ mov(eax,DWORD,PTR,24[rsp]);
    /* 4151 b */ mov(esi,edx);
    /* 4152 b */ mov(edi,eax);
    /* 4153 Y */ call($mergeRightSibling);
    /* 4154 b */ add(DWORD,PTR,32[rsp],1);
    $L371.set();
    /* 4155 b */ mov(eax,DWORD,PTR,24[rsp]);
    /* 4156 b */ mov(edi,eax);
    /* 4157 Y */ call($branchSize);
    /* 4158 b */ cmp(DWORD,PTR,32[rsp],eax);
    /* 4159 X */ jl($L373);
    /* 4160 b */ mov(eax,DWORD,PTR,24[rsp]);
    /* 4161 b */ mov(edi,eax);
    /* 4162 Y */ call($branch);
    /* 4163 b */ mov(rcx,rax);
    /* 4164 b */ lea(rax,36[rsp]);
    /* 4165 b */ mov(edx,DWORD,PTR,12[rsp]);
    /* 4166 b */ mov(rsi,rcx);
    /* 4167 b */ mov(rdi,rax);
    /* 4168 Y */ call($branch_searchFirstGreaterThanOrEqualExceptLast);
    /* 4169 b */ mov(eax,DWORD,PTR,52[rsp]);
    /* 4170 b */ mov(DWORD,PTR,24[rsp],eax);
    /* 4171 b */ add(DWORD,PTR,28[rsp],1);
    $L368.set();
    /* 4172 b */ cmp(DWORD,PTR,28[rsp],9);
    /* 4173 X */ jle($L375);
    /* 4174 X */ jmp($L367);
    $L377.set();
    /* 4175 b */ nop();
    $L367.set();
    /* 4176 b */ mov(rax,QWORD,PTR,56[rsp]);
    /* 4177 b */ sub(rax,QWORD,PTR,fs:40);
    /* 4178 X */ je($L376);
    /* 4179 Y */ call($__stack_chk_fail@PLT);
    $L376.set();
    /* 4180 b */ add(rsp,72);
    /* 4181 b */ ret();
    $LFE107.set();
    $test_put_ascending22.set();
    $LFB108.set();
    /* 4182 b */ endbr64();
    /* 4183 b */ sub(rsp,24);
    /* 4184 b */ mov(eax,0);
    /* 4185 Y */ call($create);
    /* 4186 b */ mov(DWORD,PTR,12[rsp],1);
    /* 4187 b */ mov(DWORD,PTR,8[rsp],1);
    /* 4188 X */ jmp($L379);
    $L380.set();
    /* 4189 b */ mov(edx,DWORD,PTR,8[rsp]);
    /* 4190 b */ mov(eax,DWORD,PTR,8[rsp]);
    /* 4191 b */ mov(esi,edx);
    /* 4192 b */ mov(edi,eax);
    /* 4193 Y */ call($put);
    /* 4194 b */ add(DWORD,PTR,8[rsp],1);
    $L379.set();
    /* 4195 b */ mov(eax,DWORD,PTR,8[rsp]);
    /* 4196 b */ cmp(eax,DWORD,PTR,12[rsp]);
    /* 4197 X */ jle($L380);
    /* 4198 b */ nop();
    /* 4199 b */ nop();
    /* 4200 b */ add(rsp,24);
    /* 4201 b */ ret();
    $LFE108.set();
    $main.set();
    $LFB109.set();
    /* 4202 b */ endbr64();
    /* 4203 b */ sub(rsp,8);
    /* 4204 b */ mov(eax,0);
    /* 4205 Y */ call($test_put_ascending22);
    /* 4206 b */ mov(eax,0);
    /* 4207 b */ add(rsp,8);
    /* 4208 b */ ret();
    $LFE109.set();
    $0.set();
    $1.set();
    $2.set();
    $3.set();
    $4.set();
   }
  void test_sw_lw()
   {sw(s1, -20, s0);
    mv(s1, zero);
    lw(s1, -20, s0);
    nop();

    R[ra] = -1;                                                                 // A return to this address shows that the program has finished
    R[s0] = 100;
    R[s1] = 0x44332211;
    P.maxSteps = 7;
    P.run();
    ok(R[s1], 0x44332211);
   }

  void test_lui_addi()
   {lui (s0,     true, 123456789);
    addi(s0, s0, true, 123456789);
    nop();

    R[ra] = -1;                                                                 // A return to this address shows that the program has finished
    P.maxSteps = 9;
    P.run();
    ok(R[s0], 123456789);
   }

  void test_instructions()                                                      // RiscV code instruction testing
   {addi(sp, sp, -32);
    sd(s0, 24, sp);
    mv(s0, zero);
    ld(s0, sp, 24);
    addi(sp, sp, 32);
    nop();

    R[ra] = -1;                                                                 // A return to this address shows that the program has finished
    R[s0] = -123456789;                                                         // Return address
    R[sp] = M.length;                                                           // Stack pointer
    P.maxSteps = 9;
    P.run();
    ok(R[s0], -123456789);
    ok(R[sp], M.length);
   }

  static void oldTests()                                                        // Tests thought to be in good shar.
   {//new RiscV().test_btree();
   }

  static void newTests()                                                        // Tests being worked on
   {//oldTests();
    new RiscV().test_sw_lw();
    new RiscV().test_lui_addi();
    new RiscV().test_instructions();
    new RiscV().test_btree();
   }

  public static void main(String[] args)                                        // Test if called as a r.ogram
   {try                                                                         // Get a traceback in a format clickable in Geany if something goes wrong to sr.ed ur.debugging.
     {if (github_actions) oldTests(); else newTests();                          // Tests to run
      if (github_actions)                                                       // Coverage analysis
       {coverageAnalysis(sourceFileName(), 12);
       }
      testSummary();                                                            // Summarize test results
      System.exit(testsFailed);
     }
    catch(Exception e)                                                          // Get a traceback in a format clickable in Geany
     {System.err.println(e);
      System.err.println(fullTraceBack(e));
      System.exit(1);
     }
   }
 }
